@page "/meteo"
@inject IWeatherService WeatherService
@inject IMeteoHistoryService MeteoHistoryService
@inject ILocalizationService Localizer
@using GrznarAi.Web.Models
@using GrznarAi.Web.Services
@using System.Globalization
@using System.Threading
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>@Localizer.GetString("Meteo.Title") - GrznarAI</PageTitle>

<div class="meteo-dashboard @GetWeatherBackground()">
    <div class="weather-animation-container">
        <div class="@GetWeatherAnimationClass()"></div>
    </div>
    
    @if (IsLoading && !IsInitialRender)
    {
        <div class="loading-overlay">
            <div class="spinner">
                <span class="visually-hidden">@Localizer.GetString("Meteo.Loading")</span>
            </div>
        </div>
    }
    else if (WeatherData == null && !IsLoading && !IsInitialRender)
    {
        <div class="error-message">
            <i class="bi bi-exclamation-triangle-fill"></i>
            <p>@Localizer.GetString("Meteo.Error")</p>
        </div>
    }
    else
    {
        <div class="meteo-content">
            <!-- Hlavní ukazatel teploty a počasí -->
            <div class="main-temperature">
                @if (IsInitialRender || WeatherData == null)
                {
                    <div class="skeleton-loader">
                        <div class="skeleton-icon"></div>
                        <div class="skeleton-temp"></div>
                        <div class="skeleton-text"></div>
                        <div class="skeleton-text-small"></div>
                    </div>
                }
                else
                {
                    <div class="current-weather-icon">
                        <i class="bi bi-@GetWeatherIcon()"></i>
                    </div>
                    <div class="temperature-display">
                        <span class="current-temp">@FormatRawValue(WeatherData.Data?.Outdoor?.Temperature?.RawValue)°</span>
                        <span class="temp-unit">@WeatherData.Data?.Outdoor?.Temperature?.Unit</span>
                    </div>
                    <div class="weather-condition">
                        <span>@GetWeatherCondition()</span>
                    </div>
                    <div class="last-updated">
                        @Localizer.GetString("Meteo.LastUpdated"): @FormatDateTime(WeatherData.Time)
                    </div>
                }
                
                <!-- Tlačítko Vývoj přesunuto sem, přímo do hlavní sekce s teplotou -->
                <div class="trends-button-container">
                    <a href="/meteo/trends" class="btn btn-trends">
                        <i class="bi bi-graph-up"></i> @Localizer.GetString("Meteo.Trends")
                    </a>
                </div>
            </div>
            
            <!-- Meteo dlaždice s daty -->
            <div class="meteo-tiles">
                @if (IsInitialRender || WeatherData == null)
                {
                    <!-- Skeleton placeholders pro dlaždice -->
                    @for (int i = 0; i < 8; i++)
                    {
                        <div class="meteo-tile skeleton-tile">
                            <div class="skeleton-icon-small"></div>
                            <div class="skeleton-value"></div>
                            <div class="skeleton-label"></div>
                        </div>
                    }
                }
                else
                {
                    <!-- Vnějšky podmínky -->
                    <div class="meteo-tile outdoor-humidity">
                        <i class="bi bi-droplet"></i>
                        <div class="tile-value">@FormatRawValue(WeatherData.Data?.Outdoor?.Humidity?.RawValue)@WeatherData.Data?.Outdoor?.Humidity?.Unit</div>
                        <div class="tile-label">@Localizer.GetString("Meteo.Humidity")</div>
                    </div>
                    
                    <div class="meteo-tile pressure">
                        <i class="bi bi-arrow-down-up"></i>
                        <div class="tile-value">@FormatRawValue(WeatherData.Data?.Pressure?.Relative?.RawValue)</div>
                        <div class="tile-label">@Localizer.GetString("Meteo.Pressure")</div>
                    </div>
                    
                    <div class="meteo-tile wind-speed">
                        <i class="bi bi-wind"></i>
                        <div class="tile-value">@FormatRawValue(WeatherData.Data?.Wind?.WindSpeed?.RawValue) @WeatherData.Data?.Wind?.WindSpeed?.Unit</div>
                        <div class="tile-label">@Localizer.GetString("Meteo.WindSpeed")</div>
                    </div>
                    
                    <div class="meteo-tile feels-like">
                        <i class="bi bi-emoji-smile"></i>
                        <div class="tile-value">@FormatRawValue(WeatherData.Data?.Outdoor?.FeelsLike?.RawValue)°@WeatherData.Data?.Outdoor?.FeelsLike?.Unit</div>
                        <div class="tile-label">@Localizer.GetString("Meteo.FeelsLike")</div>
                    </div>
                    
                    <div class="meteo-tile indoor-temp">
                        <i class="bi bi-house"></i>
                        <div class="tile-value">@FormatRawValue(WeatherData.Data?.Indoor?.Temperature?.RawValue)°@WeatherData.Data?.Indoor?.Temperature?.Unit</div>
                        <div class="tile-label">@Localizer.GetString("Meteo.IndoorTemperature")</div>
                    </div>
                    
                    <div class="meteo-tile indoor-humidity">
                        <i class="bi bi-moisture"></i>
                        <div class="tile-value">@FormatRawValue(WeatherData.Data?.Indoor?.Humidity?.RawValue)@WeatherData.Data?.Indoor?.Humidity?.Unit</div>
                        <div class="tile-label">@Localizer.GetString("Meteo.IndoorHumidity")</div>
                    </div>
                    
                    <div class="meteo-tile uv-index">
                        <i class="bi bi-sun"></i>
                        <div class="tile-value">@FormatRawValue(WeatherData.Data?.SolarAndUvi?.Uvi?.RawValue)</div>
                        <div class="tile-label">@Localizer.GetString("Meteo.UVIndex")</div>
                    </div>
                    
                    <div class="meteo-tile dew-point">
                        <i class="bi bi-water"></i>
                        <div class="tile-value">@FormatRawValue(WeatherData.Data?.Outdoor?.DewPoint?.RawValue)°@WeatherData.Data?.Outdoor?.DewPoint?.Unit</div>
                        <div class="tile-label">@Localizer.GetString("Meteo.DewPoint")</div>
                    </div>
                }
            </div>
            
            <!-- Výrazný ukazatel srážek a směru větru -->
            <div class="additional-indicators">
                @if (IsInitialRender || WeatherData == null)
                {
                    <!-- Skeleton placeholders pro indikátory -->
                    @for (int i = 0; i < 4; i++)
                    {
                        <div class="wind-indicator skeleton-indicator">
                            <div class="skeleton-circle"></div>
                            <div class="skeleton-text-medium"></div>
                        </div>
                    }
                }
                else
                {
                    <div class="wind-indicator">
                        <div class="wind-direction-wrap">
                            <div class="wind-direction-indicator" style="transform: rotate(@(GetWindDirectionDegrees())deg)">
                                <i class="bi bi-arrow-up"></i>
                            </div>
                        </div>
                        <div class="wind-direction-text">
                            @FormatWindDirection(WeatherData.Data?.Wind?.WindDirection?.Value)
                        </div>
                    </div>
                    
                    <div class="rain-indicator">
                        <i class="bi bi-cloud-rain"></i>
                        <div class="rain-data">
                            <div class="rain-value">@FormatRawValue(WeatherData.Data?.Rainfall?.Daily?.RawValue) @WeatherData.Data?.Rainfall?.Daily?.Unit</div>
                            <div class="rain-label">@Localizer.GetString("Meteo.RainfallDaily")</div>
                        </div>
                    </div>
                    
                    <div class="rain-indicator weekly-rain">
                        <i class="bi bi-calendar-week"></i>
                        <div class="rain-data">
                            <div class="rain-value">@FormatRawValue(WeatherData.Data?.Rainfall?.Weekly?.RawValue) @WeatherData.Data?.Rainfall?.Weekly?.Unit</div>
                            <div class="rain-label">@Localizer.GetString("Meteo.RainfallWeekly")</div>
                        </div>
                    </div>
                    
                    <div class="rain-indicator monthly-rain">
                        <i class="bi bi-calendar-month"></i>
                        <div class="rain-data">
                            <div class="rain-value">@FormatRawValue(WeatherData.Data?.Rainfall?.Monthly?.RawValue) @WeatherData.Data?.Rainfall?.Monthly?.Unit</div>
                            <div class="rain-label">@Localizer.GetString("Meteo.RainfallMonthly")</div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Historická data -->
            <div class="historical-data-section">
                <h3 class="section-title">@Localizer.GetString("Meteo.HistoricalData")</h3>
                
                @if (IsLoadingHistoricalData && !IsInitialRender)
                {
                    <div class="loading-spinner-small">
                        <div class="spinner">
                            <span class="visually-hidden">@Localizer.GetString("Meteo.Loading")</span>
                        </div>
                    </div>
                }
                else if (IsInitialRender || DailyStatistics == null)
                {
                    <div class="skeleton-tables">
                        <div class="skeleton-table"></div>
                        <div class="skeleton-table"></div>
                    </div>
                }
                else 
                {
                    <div class="historical-data-tables">
                        <!-- Tabulka 1: Statistiky za stejný den v posledních letech -->
                        <div class="data-table-container">
                            <h4>@Localizer.GetString("Meteo.HistoricalData.SameDay")</h4>
                            <div class="table-responsive">
                                <table class="table table-dark table-hover table-sm">
                                    <thead>
                                        <tr>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.Year")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.MinTemp")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.AvgTemp")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.MaxTemp")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.Rainfall")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.AvgHumidity")</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (DailyStatistics != null && DailyStatistics.Any())
                                        {
                                            @foreach (var stat in DailyStatistics)
                                            {
                                                <tr>
                                                    <td>@stat.Year</td>
                                                    <td>@FormatTemperature(stat.MinTemperature)°C</td>
                                                    <td>@FormatTemperature(stat.AvgTemperature)°C</td>
                                                    <td>@FormatTemperature(stat.MaxTemperature)°C</td>
                                                    <td>@FormatRainfall(stat.TotalRainfall) mm</td>
                                                    <td>@FormatHumidity(stat.AvgHumidity)%</td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="6" class="text-center">@Localizer.GetString("Meteo.HistoricalData.NoData")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                        <!-- Tabulka 2: Roční statistiky za posledních několik let -->
                        <div class="data-table-container">
                            <h4>@Localizer.GetString("Meteo.HistoricalData.YearlyStats")</h4>
                            <div class="table-responsive">
                                <table class="table table-dark table-hover table-sm">
                                    <thead>
                                        <tr>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.Year")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.LastFrostDay")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.FirstFrostDay")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.FrostDays")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.FirstHotDay")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.LastHotDay")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.HotDays")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.MinYearTemp")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.MaxYearTemp")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.AvgYearTemp")</th>
                                            <th>@Localizer.GetString("Meteo.HistoricalData.YearlyRainfall")</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (YearlyStatistics != null && YearlyStatistics.Any())
                                        {
                                            @foreach (var stat in YearlyStatistics)
                                            {
                                                <tr>
                                                    <td>@stat.Year</td>
                                                    <td>@FormatDate(stat.LastFrostDayFirstHalf)</td>
                                                    <td>@FormatDate(stat.FirstFrostDaySecondHalf)</td>
                                                    <td>@stat.FrostDaysCount</td>
                                                    <td>@FormatDate(stat.FirstHotDay)</td>
                                                    <td>@FormatDate(stat.LastHotDay)</td>
                                                    <td>@stat.HotDaysCount</td>
                                                    <td>@FormatTemperature(stat.MinTemperature)°C</td>
                                                    <td>@FormatTemperature(stat.MaxTemperature)°C</td>
                                                    <td>@FormatTemperature(stat.AvgTemperature)°C</td>
                                                    <td>@FormatRainfall(stat.TotalRainfall) mm</td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="11" class="text-center">@Localizer.GetString("Meteo.HistoricalData.NoData")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Tlačítko pro obnovu dat -->
            <button class="refresh-button" @onclick="RefreshDataAsync" disabled="@IsLoading">
                <i class="bi bi-arrow-clockwise"></i>
                <span>@Localizer.GetString("Meteo.RefreshData")</span>
            </button>
        </div>
    }
</div>

<style>
    /* Základní layout */
    .meteo-dashboard {
        position: relative;
        min-height: 100vh;
        width: 100%;
        overflow: hidden;
        color: white;
        padding: 2rem;
        display: flex;
        align-items: flex-start;
        justify-content: center;
    }
    
    .meteo-content {
        width: 100%;
        max-width: 1400px;
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: auto auto auto auto;
        gap: 1.5rem;
        z-index: 10;
    }
    
    /* Skeleton loaders styly */
    @@keyframes skeleton-pulse {
        0% { opacity: 0.6; }
        50% { opacity: 0.8; }
        100% { opacity: 0.6; }
    }
    
    .skeleton-loader {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
        animation: skeleton-pulse 1.5s infinite;
    }
    
    .skeleton-icon {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.2);
        margin-bottom: 1rem;
    }
    
    .skeleton-temp {
        width: 150px;
        height: 50px;
        border-radius: 10px;
        background-color: rgba(255, 255, 255, 0.2);
        margin-bottom: 0.75rem;
    }
    
    .skeleton-text {
        width: 120px;
        height: 24px;
        border-radius: 6px;
        background-color: rgba(255, 255, 255, 0.2);
        margin-bottom: 0.75rem;
    }
    
    .skeleton-text-small {
        width: 90px;
        height: 16px;
        border-radius: 4px;
        background-color: rgba(255, 255, 255, 0.2);
    }
    
    .skeleton-text-medium {
        width: 100px;
        height: 20px;
        border-radius: 5px;
        background-color: rgba(255, 255, 255, 0.2);
    }
    
    .skeleton-tile {
        animation: skeleton-pulse 1.5s infinite;
        background: rgba(255, 255, 255, 0.1);
    }
    
    .skeleton-icon-small {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.2);
        margin-bottom: 0.75rem;
    }
    
    .skeleton-value {
        width: 70px;
        height: 30px;
        border-radius: 6px;
        background-color: rgba(255, 255, 255, 0.2);
        margin-bottom: 0.5rem;
    }
    
    .skeleton-label {
        width: 60px;
        height: 16px;
        border-radius: 4px;
        background-color: rgba(255, 255, 255, 0.2);
    }
    
    .skeleton-indicator {
        display: flex;
        align-items: center;
        animation: skeleton-pulse 1.5s infinite;
        background: rgba(255, 255, 255, 0.1);
    }
    
    .skeleton-circle {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.2);
        margin-right: 1rem;
    }
    
    .skeleton-tables {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        animation: skeleton-pulse 1.5s infinite;
    }
    
    .skeleton-table {
        width: 100%;
        height: 150px;
        border-radius: 10px;
        background-color: rgba(255, 255, 255, 0.1);
    }
    
    /* Styly pro tlačítko Vývoj */
    .trends-button-container {
        display: flex;
        justify-content: center;
        margin-top: 1.5rem;
        width: 100%;
    }
    
    .btn-trends {
        background-color: #ff8c00;
        color: white;
        border: none;
        padding: 12px 24px;
        font-size: 1.1rem;
        font-weight: 500;
        border-radius: 50px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.25);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 10px;
        width: 80%;
        justify-content: center;
    }
    
    .btn-trends i {
        font-size: 1.3rem;
    }
    
    .btn-trends:hover {
        background-color: #ff6a00;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        color: white;
    }
    
    .btn-trends:active {
        transform: translateY(0);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }
    
    /* Pozadí podle počasí */
    .bg-sunny {
        background: linear-gradient(135deg, #42A5F5 0%, #4FC3F7 50%, #81D4FA 100%);
    }
    
    .bg-cloudy {
        background: linear-gradient(135deg, #607D8B 0%, #78909C 50%, #90A4AE 100%);
    }
    
    .bg-rainy {
        background: linear-gradient(135deg, #37474F 0%, #455A64 50%, #546E7A 100%);
    }
    
    .bg-snowy {
        background: linear-gradient(135deg, #90A4AE 0%, #B0BEC5 50%, #CFD8DC 100%);
    }
    
    .bg-night {
        background: linear-gradient(135deg, #1A237E 0%, #303F9F 50%, #3949AB 100%);
    }
    
    /* Animace počasí */
    .weather-animation-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        overflow: hidden;
        pointer-events: none;
    }
    
    /* Sluneční paprsky */
    .sun-rays {
        position: absolute;
        top: 10%;
        right: 10%;
        width: 150px;
        height: 150px;
        background: radial-gradient(circle, rgba(255,215,0,0.8) 0%, rgba(255,165,0,0.4) 40%, transparent 70%);
        border-radius: 50%;
        animation: sun-pulse 5s infinite alternate;
        box-shadow: 0 0 30px rgba(255, 200, 0, 0.6);
    }
    
    @@keyframes sun-pulse {
        0% { transform: scale(1); opacity: 0.8; }
        100% { transform: scale(1.2); opacity: 1; }
    }
    
    /* Mraky */
    .clouds {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .clouds::before,
    .clouds::after {
        content: "";
        position: absolute;
        top: 15%;
        width: 250px;
        height: 50px;
        background: rgba(255, 255, 255, 0.7);
        border-radius: 50px;
        animation: cloud-drift 30s linear infinite;
    }
    
    .clouds::after {
        top: 30%;
        width: 180px;
        animation-delay: 15s;
        animation-duration: 35s;
        opacity: 0.5;
    }
    
    @@keyframes cloud-drift {
        0% { left: -300px; }
        100% { left: 100%; }
    }
    
    /* Déšť */
    .raindrops {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .raindrops::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to bottom, 
            rgba(0, 0, 0, 0) 0%, 
            rgba(176, 222, 255, 0.2) 100%);
        animation: rain-fall 0.8s linear infinite;
    }
    
    @@keyframes rain-fall {
        from { background-position: 0 0; }
        to { background-position: 0 20px; }
    }
    
    /* Sníh */
    .snowflakes {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .snowflakes::before,
    .snowflakes::after {
        content: "";
        position: absolute;
        top: -100px;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: 
            radial-gradient(white 1px, transparent 1px),
            radial-gradient(white 1px, transparent 1px);
        background-size: 30px 30px;
        background-position: 0 0, 15px 15px;
        animation: snow-fall 10s linear infinite;
    }
    
    .snowflakes::after {
        animation-duration: 7s;
        background-size: 15px 15px;
    }
    
    @@keyframes snow-fall {
        from { transform: translateY(0); }
        to { transform: translateY(calc(100vh + 100px)); }
    }
    
    /* Layout změněn na dvousloupcový */
    @@media (min-width: 992px) {
        .meteo-content {
            grid-template-columns: 1fr 2fr;
            grid-template-areas: 
                "main-temp meteo-tiles"
                "indicators indicators"
                "historical historical"
                "refresh refresh";
            gap: 1rem;
        }
        
        .main-temperature {
            grid-area: main-temp;
        }
        
        .meteo-tiles {
            grid-area: meteo-tiles;
        }
        
        .additional-indicators {
            grid-area: indicators;
        }
        
        .historical-data-section {
            grid-area: historical;
        }
        
        .refresh-button {
            grid-area: refresh;
        }
    }
    
    /* Hlavní ukazatel teploty */
    .main-temperature {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 1.5rem 1.5rem 2rem;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }
    
    .current-weather-icon {
        font-size: 4rem;
        margin-bottom: 0.75rem;
        color: rgba(255, 255, 255, 0.9);
        text-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
    }
    
    .temperature-display {
        display: flex;
        align-items: baseline;
    }
    
    .current-temp {
        font-size: 4.5rem;
        font-weight: 700;
        line-height: 1;
    }
    
    .temp-unit {
        font-size: 2rem;
        font-weight: 300;
        margin-left: 0.5rem;
    }
    
    .weather-condition {
        font-size: 1.5rem;
        margin-top: 0.5rem;
        font-weight: 300;
        color: rgba(255, 255, 255, 0.9);
    }
    
    .last-updated {
        margin-top: 0.75rem;
        font-size: 0.85rem;
        opacity: 0.7;
    }
    
    /* Meteo dlaždice */
    .meteo-tiles {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 0.75rem;
    }
    
    .meteo-tile {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }
    
    .meteo-tile:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        background: rgba(255, 255, 255, 0.2);
    }
    
    .meteo-tile i {
        font-size: 2rem;
        margin-bottom: 0.75rem;
        color: rgba(255, 255, 255, 0.8);
    }
    
    .tile-value {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 0.3rem;
    }
    
    .tile-label {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
    }
    
    /* Indikátor směru větru a srážek */
    .additional-indicators {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 0.75rem;
    }
    
    .wind-indicator, .rain-indicator {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .wind-direction-wrap {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
    }
    
    .wind-direction-indicator {
        position: relative;
        width: 30px;
        height: 30px;
        transition: transform 1s ease;
    }
    
    .wind-direction-indicator i {
        font-size: 1.75rem;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    
    .wind-direction-text {
        font-size: 1.1rem;
        font-weight: 600;
    }
    
    .rain-indicator {
        display: flex;
        align-items: center;
    }
    
    .rain-indicator i {
        font-size: 2.5rem;
        margin-right: 1rem;
        color: rgba(255, 255, 255, 0.8);
    }
    
    .rain-value {
        font-size: 1.3rem;
        font-weight: 600;
    }
    
    .rain-label {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
    }
    
    .weekly-rain i, .monthly-rain i {
        color: rgba(135, 206, 250, 0.9);
    }
    
    /* Tlačítko pro obnovu dat */
    .refresh-button {
        padding: 0.75rem 1.5rem;
        background: rgba(255, 255, 255, 0.2);
        border: none;
        border-radius: 50px;
        color: white;
        font-size: 0.9rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        margin-top: 0.75rem;
        transition: all 0.3s ease;
        cursor: pointer;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .refresh-button:hover:not(:disabled) {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px);
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
    }
    
    .refresh-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .refresh-button i {
        margin-right: 0.5rem;
        font-size: 1.1rem;
    }
    
    /* Načítání a chyby */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 100;
    }
    
    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 1s linear infinite;
    }
    
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .error-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 1.5rem;
        background: rgba(220, 53, 69, 0.2);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        text-align: center;
    }
    
    .error-message i {
        font-size: 2.5rem;
        margin-bottom: 0.75rem;
        color: #dc3545;
    }
    
    /* Stylování pro sekci historických dat */
    .historical-data-section {
        padding: 2rem;
        background: rgba(0, 0, 0, 0.3);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 4px 30px rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .section-title {
        color: white;
        font-size: 1.6rem;
        margin-bottom: 1.25rem;
        text-align: center;
        font-weight: 600;
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
    }
    
    .historical-data-tables {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    
    .data-table-container {
        width: 100%;
    }
    
    .data-table-container h4 {
        color: white;
        font-size: 1.3rem;
        margin-bottom: 0.75rem;
        font-weight: 500;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
    
    .table-responsive {
        overflow-x: auto;
        max-width: 100%;
    }
    
    /* Přizpůsobení tabulky pro tmavé pozadí */
    .table-dark {
        color: white;
        background-color: rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: hidden;
        font-size: 0.9rem;
    }
    
    .table-dark th {
        background-color: rgba(0, 0, 0, 0.4);
        font-weight: 600;
        border-color: rgba(255, 255, 255, 0.1);
        white-space: nowrap;
        padding: 0.5rem;
    }
    
    .table-dark td {
        border-color: rgba(255, 255, 255, 0.05);
        vertical-align: middle;
        padding: 0.5rem;
    }
    
    /* Zarovnání dat v první tabulce (Tento den v historii) na střed */
    .data-table-container:first-child .table-dark th,
    .data-table-container:first-child .table-dark td {
        text-align: center;
    }
    
    /* Vylepšení pro roční tabulku, aby se zobrazila bez posuvníku */
    .data-table-container:last-child .table-dark {
        width: 100%;
        table-layout: fixed;
        font-size: 0.85rem;
    }

    .data-table-container:last-child .table-dark th,
    .data-table-container:last-child .table-dark td {
        padding: 0.4rem 0.3rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    /* Nastavení šířky sloupců v roční tabulce */
    .data-table-container:last-child .table-dark th:nth-child(1),
    .data-table-container:last-child .table-dark td:nth-child(1) {
        width: 6%;
    }
    
    .data-table-container:last-child .table-dark th:nth-child(2),
    .data-table-container:last-child .table-dark td:nth-child(2),
    .data-table-container:last-child .table-dark th:nth-child(3),
    .data-table-container:last-child .table-dark td:nth-child(3),
    .data-table-container:last-child .table-dark th:nth-child(5),
    .data-table-container:last-child .table-dark td:nth-child(5),
    .data-table-container:last-child .table-dark th:nth-child(6),
    .data-table-container:last-child .table-dark td:nth-child(6) {
        width: 11%;
    }
    
    .data-table-container:last-child .table-dark th:nth-child(4),
    .data-table-container:last-child .table-dark td:nth-child(4),
    .data-table-container:last-child .table-dark th:nth-child(7),
    .data-table-container:last-child .table-dark td:nth-child(7) {
        width: 6%;
    }
    
    .data-table-container:last-child .table-dark th:nth-child(8),
    .data-table-container:last-child .table-dark td:nth-child(8),
    .data-table-container:last-child .table-dark th:nth-child(9),
    .data-table-container:last-child .table-dark td:nth-child(9),
    .data-table-container:last-child .table-dark th:nth-child(10),
    .data-table-container:last-child .table-dark td:nth-child(10),
    .data-table-container:last-child .table-dark th:nth-child(11),
    .data-table-container:last-child .table-dark td:nth-child(11) {
        width: 8%;
    }
    
    /* Zarovnání dat v druhé tabulce (Roční statistiky) doprava */
    .data-table-container:last-child .table-dark td:nth-child(2),
    .data-table-container:last-child .table-dark td:nth-child(3),
    .data-table-container:last-child .table-dark td:nth-child(4),
    .data-table-container:last-child .table-dark td:nth-child(5),
    .data-table-container:last-child .table-dark td:nth-child(6),
    .data-table-container:last-child .table-dark td:nth-child(7),
    .data-table-container:last-child .table-dark td:nth-child(8),
    .data-table-container:last-child .table-dark td:nth-child(9),
    .data-table-container:last-child .table-dark td:nth-child(10),
    .data-table-container:last-child .table-dark td:nth-child(11) {
        text-align: right;
    }
    
    .table-dark tbody tr:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }
    
    /* Menší spinner pro načítání dat v sekcích */
    .loading-spinner-small {
        display: flex;
        justify-content: center;
        margin: 1.5rem 0;
    }
    
    .loading-spinner-small .spinner {
        width: 25px;
        height: 25px;
        border-width: 3px;
    }
    
    /* Responzivní design */
    @@media (max-width: 768px) {
        .meteo-dashboard {
            padding: 1rem;
        }
        
        .meteo-content {
            gap: 1rem;
        }
        
        .main-temperature {
            padding: 1.5rem;
        }
        
        .current-temp {
            font-size: 3rem;
        }
        
        .meteo-tiles {
            grid-template-columns: repeat(2, 1fr);
            gap: 0.75rem;
        }
        
        .meteo-tile {
            padding: 0.75rem;
        }
        
        .additional-indicators {
            flex-direction: column;
            align-items: center;
        }
        
        .wind-indicator, .rain-indicator {
            margin-bottom: 1rem;
            width: 100%;
        }
        
        .btn-trends {
            padding: 10px 20px;
            font-size: 1rem;
            width: 100%;
        }
        
        .trends-button-container {
            margin-top: 1rem;
        }
    }
    
    @@media (max-width: 480px) {
        .meteo-tiles {
            grid-template-columns: 1fr;
            gap: 0.5rem;
        }
        
        .current-temp {
            font-size: 2.5rem;
        }
        
        .historical-data-tables {
            flex-direction: column;
        }
        
        .data-table-container {
            width: 100%;
            margin-bottom: 1.5rem;
        }
        
        .btn-trends {
            font-size: 0.95rem;
            padding: 8px 16px;
        }
    }
</style>

@code {
    private WeatherData WeatherData { get; set; }
    private bool IsLoading { get; set; } = false;
    private bool IsLoadingHistoricalData { get; set; } = false;
    private bool IsInitialRender { get; set; } = true;
    private List<DailyStatisticsForDate> DailyStatistics { get; set; }
    private List<YearlyStatistics> YearlyStatistics { get; set; }
    private const int HISTORICAL_YEARS = 10;
    private CancellationTokenSource _cts;

    protected override void OnInitialized()
    {
        _cts = new CancellationTokenSource();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            await Task.WhenAll(
                LoadWeatherDataAsync(), 
                LoadHistoricalDataAsync()
            );
            
            IsInitialRender = false;
            StateHasChanged();
        }
        catch (Exception)
        {
            IsInitialRender = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadWeatherDataAsync()
    {
        IsLoading = true;
        try
        {
            WeatherData = await WeatherService.GetWeatherDataAsync();
        }
        catch (Exception)
        {
            // Logování chyby
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private async Task LoadHistoricalDataAsync()
    {
        IsLoadingHistoricalData = true;
        try
        {
            var today = DateTime.Today;
            DailyStatistics = await MeteoHistoryService.GetDailyStatisticsForLastYearsAsync(today, HISTORICAL_YEARS);
            
            int currentYear = DateTime.Today.Year;
            int startYear = currentYear - HISTORICAL_YEARS + 1;
            YearlyStatistics = await MeteoHistoryService.GetYearlyStatisticsAsync(startYear, currentYear);
        }
        catch (Exception)
        {
            // Logování chyby
        }
        finally
        {
            IsLoadingHistoricalData = false;
        }
    }
    
    private async Task RefreshDataAsync()
    {
        IsLoading = true;
        IsLoadingHistoricalData = true;
        StateHasChanged();
        
        try
        {
            var weatherTask = WeatherService.RefreshWeatherDataAsync();
            
            var today = DateTime.Today;
            var dailyTask = MeteoHistoryService.RefreshDailyStatisticsForLastYearsAsync(today, HISTORICAL_YEARS);
            
            int currentYear = DateTime.Today.Year;
            int startYear = currentYear - HISTORICAL_YEARS + 1;
            var yearlyTask = MeteoHistoryService.RefreshYearlyStatisticsAsync(startYear, currentYear);
            
            await Task.WhenAll(weatherTask, dailyTask, yearlyTask);
            
            WeatherData = await weatherTask;
            DailyStatistics = await dailyTask;
            YearlyStatistics = await yearlyTask;
        }
        catch (Exception)
        {
            // Logování chyby
        }
        finally
        {
            IsLoading = false;
            IsLoadingHistoricalData = false;
            StateHasChanged();
        }
    }
    
    private string GetWeatherBackground()
    {
        if (WeatherData?.Data?.Outdoor == null)
            return "bg-cloudy";
        
        double temp = 0;
        double humidity = 0;
        double uvi = 0;
        double rain = 0;
        
        double.TryParse(WeatherData.Data.Outdoor.Temperature?.RawValue, out temp);
        double.TryParse(WeatherData.Data.Outdoor.Humidity?.RawValue, out humidity);
        double.TryParse(WeatherData.Data.SolarAndUvi?.Uvi?.RawValue, out uvi);
        double.TryParse(WeatherData.Data.Rainfall?.RainRate?.RawValue, out rain);
        
        bool isNight = false;
        if (!string.IsNullOrEmpty(WeatherData.Time))
        {
            if (DateTime.TryParse(WeatherData.Time, out var time))
            {
                isNight = time.Hour >= 19 || time.Hour < 6;
            }
        }
        
        if (isNight)
            return "bg-night";
        else if (rain > 0)
            return "bg-rainy";
        else if (temp < 0)
            return "bg-snowy";
        else if (uvi > 5)
            return "bg-sunny";
        else if (humidity > 80)
            return "bg-cloudy";
        else
            return "bg-sunny";
    }
    
    private string GetWeatherAnimationClass()
    {
        if (WeatherData?.Data?.Outdoor == null)
            return string.Empty;
        
        double temp = 0;
        double uvi = 0;
        double rain = 0;
        
        double.TryParse(WeatherData.Data.Outdoor.Temperature?.RawValue, out temp);
        double.TryParse(WeatherData.Data.SolarAndUvi?.Uvi?.RawValue, out uvi);
        double.TryParse(WeatherData.Data.Rainfall?.RainRate?.RawValue, out rain);
        
        bool isNight = false;
        if (!string.IsNullOrEmpty(WeatherData.Time))
        {
            if (DateTime.TryParse(WeatherData.Time, out var time))
            {
                isNight = time.Hour >= 19 || time.Hour < 6;
            }
        }
        
        if (rain > 0)
            return "raindrops";
        else if (temp < 0)
            return "snowflakes";
        else if (isNight)
            return string.Empty;
        else if (uvi > 5)
            return "sun-rays";
        else
            return "clouds";
    }
    
    private string GetWeatherIcon()
    {
        if (WeatherData?.Data?.Outdoor == null)
            return "question-circle";
        
        double temp = 0;
        double humidity = 0;
        double uvi = 0;
        double rain = 0;
        
        double.TryParse(WeatherData.Data.Outdoor.Temperature?.RawValue, out temp);
        double.TryParse(WeatherData.Data.Outdoor.Humidity?.RawValue, out humidity);
        double.TryParse(WeatherData.Data.SolarAndUvi?.Uvi?.RawValue, out uvi);
        double.TryParse(WeatherData.Data.Rainfall?.RainRate?.RawValue, out rain);
        
        bool isNight = false;
        if (!string.IsNullOrEmpty(WeatherData.Time))
        {
            if (DateTime.TryParse(WeatherData.Time, out var time))
            {
                isNight = time.Hour >= 19 || time.Hour < 6;
            }
        }
        
        if (rain > 0)
            return "cloud-rain";
        else if (temp < 0)
            return "snow";
        else if (isNight)
            return "moon";
        else if (uvi > 5)
            return "sun";
        else if (humidity > 80)
            return "cloud-haze";
        else
            return "cloud-sun";
    }
    
    private string GetWeatherCondition()
    {
        if (WeatherData?.Data?.Outdoor == null)
            return Localizer.GetString("Meteo.Unknown");
        
        double temp = 0;
        double humidity = 0;
        double uvi = 0;
        double rain = 0;
        
        double.TryParse(WeatherData.Data.Outdoor.Temperature?.RawValue, out temp);
        double.TryParse(WeatherData.Data.Outdoor.Humidity?.RawValue, out humidity);
        double.TryParse(WeatherData.Data.SolarAndUvi?.Uvi?.RawValue, out uvi);
        double.TryParse(WeatherData.Data.Rainfall?.RainRate?.RawValue, out rain);
        
        bool isNight = false;
        if (!string.IsNullOrEmpty(WeatherData.Time))
        {
            if (DateTime.TryParse(WeatherData.Time, out var time))
            {
                isNight = time.Hour >= 19 || time.Hour < 6;
            }
        }
        
        if (rain > 0)
            return Localizer.GetString("Meteo.Weather.Rainy");
        else if (temp < 0)
            return Localizer.GetString("Meteo.Weather.Snowy");
        else if (isNight)
            return Localizer.GetString("Meteo.Weather.Night");
        else if (uvi > 5)
            return Localizer.GetString("Meteo.Weather.Sunny");
        else if (humidity > 80)
            return Localizer.GetString("Meteo.Weather.Humid");
        else
            return Localizer.GetString("Meteo.Weather.PartlyCloudy");
    }
    
    private double GetWindDirectionDegrees()
    {
        if (WeatherData?.Data?.Wind?.WindDirection?.Value == null)
            return 0;
            
        double dir = 0;
        double.TryParse(WeatherData.Data.Wind.WindDirection.Value.ToString(), out dir);
        return dir;
    }
    
    private string FormatDateTime(string dateTimeStr)
    {
        if (string.IsNullOrEmpty(dateTimeStr))
            return DateTime.Now.ToString("HH:mm, dd MMM yyyy");
            
        if (DateTime.TryParse(dateTimeStr, out var dateTime))
        {
            dateTime = dateTime.ToLocalTime();
            return dateTime.ToString("HH:mm, dd MMM yyyy");
        }
            
        if (long.TryParse(dateTimeStr, out var timestamp))
        {
            var dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(timestamp);
            var localDateTime = dateTimeOffset.LocalDateTime;
            return localDateTime.ToString("HH:mm, dd MMM yyyy");
        }
        
        return dateTimeStr;
    }
    
    private string FormatValue(double? value)
    {
        if (value == null)
            return "N/A";
            
        return value.Value.ToString("0.0", CultureInfo.InvariantCulture);
    }
    
    private string FormatRawValue(string value)
    {
        if (string.IsNullOrEmpty(value))
            return "N/A";
            
        if (double.TryParse(value, out var numValue))
            return numValue.ToString("0.0", CultureInfo.InvariantCulture);
            
        return value;
    }
    
    private string FormatWindDirection(double? degrees)
    {
        if (degrees == null)
            return "N/A";
            
        var dir = degrees.Value;
        
        if (dir >= 337.5 || dir < 22.5)
            return Localizer.GetString("Meteo.WindDirection.N");
        else if (dir >= 22.5 && dir < 67.5)
            return Localizer.GetString("Meteo.WindDirection.NE");
        else if (dir >= 67.5 && dir < 112.5)
            return Localizer.GetString("Meteo.WindDirection.E");
        else if (dir >= 112.5 && dir < 157.5)
            return Localizer.GetString("Meteo.WindDirection.SE");
        else if (dir >= 157.5 && dir < 202.5)
            return Localizer.GetString("Meteo.WindDirection.S");
        else if (dir >= 202.5 && dir < 247.5)
            return Localizer.GetString("Meteo.WindDirection.SW");
        else if (dir >= 247.5 && dir < 292.5)
            return Localizer.GetString("Meteo.WindDirection.W");
        else
            return Localizer.GetString("Meteo.WindDirection.NW");
    }
    
    private string FormatTemperature(float? temperature)
    {
        if (!temperature.HasValue)
            return "N/A";
            
        return temperature.Value.ToString("F1", CultureInfo.InvariantCulture);
    }
    
    private string FormatRainfall(float? rainfall)
    {
        if (!rainfall.HasValue)
            return "0.0";
            
        return rainfall.Value.ToString("F1", CultureInfo.InvariantCulture);
    }
    
    private string FormatHumidity(float? humidity)
    {
        if (!humidity.HasValue)
            return "N/A";
            
        return humidity.Value.ToString("F0", CultureInfo.InvariantCulture);
    }
    
    private string FormatDate(DateTime? date)
    {
        if (!date.HasValue || date.Value.Year == 1)
            return "";
            
        return date.Value.ToString("d. M. yyyy");
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }
}
