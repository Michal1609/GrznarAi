@page "/meteo/trends"
@rendermode InteractiveServer
@using GrznarAi.Web.Services.Weather
@using System.Globalization
@inject ITemperatureHistoryService TemperatureHistoryService
@inject ILogger<MeteoTrends> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Meteo Trends - GrznarAI</PageTitle>

<div class="container-fluid">
    <h1>Meteo Trends</h1>
    
    <div class="row mb-3">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Teplotni historie</h5>
                    <div class="d-flex align-items-center">
                        @if (TemperatureData?.Count > 0)
                        {
                            <div class="me-2">
                                <span class="badge rounded-pill text-bg-info">Min: @($"{TemperatureSummary.Min:F1} °C")</span>
                            </div>
                            <div class="me-2">
                                <span class="badge rounded-pill text-bg-warning">Avg: @($"{TemperatureSummary.Avg:F1} °C")</span>
                            </div>
                            <div class="me-2">
                                <span class="badge rounded-pill text-bg-danger">Max: @($"{TemperatureSummary.Max:F1} °C")</span>
                            </div>
                        }
                        <div class="btn-group" role="group">
                            <button type="button" class="btn @(SelectedPeriod == "day" ? "btn-primary" : "btn-outline-primary")" @onclick="ChangePeriodDay">Den</button>
                            <button type="button" class="btn @(SelectedPeriod == "week" ? "btn-primary" : "btn-outline-primary")" @onclick="ChangePeriodWeek">Tyden</button>
                            <button type="button" class="btn @(SelectedPeriod == "month" ? "btn-primary" : "btn-outline-primary")" @onclick="ChangePeriodMonth">Mesic</button>
                            <button type="button" class="btn @(SelectedPeriod == "year" ? "btn-primary" : "btn-outline-primary")" @onclick="ChangePeriodYear">Rok</button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            @switch (SelectedPeriod)
                            {
                                case "day":
                                    <div class="form-group">
                                        <label>Vyberte den:</label>
                                        <input type="date" class="form-control" @bind="SelectedDate" @bind:format="yyyy-MM-dd" @bind:after="RefreshData" />
                                    </div>
                                    break;
                                case "week":
                                    <div class="form-group">
                                        <label>Vyberte tyden:</label>
                                        <div class="d-flex">
                                            <button class="btn btn-outline-secondary" @onclick="PreviousWeek">
                                                <i class="bi bi-chevron-left"></i>
                                            </button>
                                            <div class="form-control text-center">
                                                @($"{WeekStartDate:dd.MM.yyyy} - {WeekEndDate:dd.MM.yyyy}")
                                            </div>
                                            <button class="btn btn-outline-secondary" @onclick="NextWeek">
                                                <i class="bi bi-chevron-right"></i>
                                            </button>
                                        </div>
                                    </div>
                                    break;
                                case "month":
                                    <div class="form-group">
                                        <label>Vyberte mesic:</label>
                                        <div class="d-flex">
                                            <button class="btn btn-outline-secondary" @onclick="PreviousMonth">
                                                <i class="bi bi-chevron-left"></i>
                                            </button>
                                            <div class="form-control text-center">
                                                @(new DateTime(SelectedDate.Year, SelectedDate.Month, 1).ToString("MMMM yyyy", CultureInfo.CreateSpecificCulture("cs-CZ")))
                                            </div>
                                            <button class="btn btn-outline-secondary" @onclick="NextMonth">
                                                <i class="bi bi-chevron-right"></i>
                                            </button>
                                        </div>
                                    </div>
                                    break;
                                case "year":
                                    <div class="form-group">
                                        <label>Vyberte rok:</label>
                                        <div class="d-flex">
                                            <button class="btn btn-outline-secondary" @onclick="PreviousYear">
                                                <i class="bi bi-chevron-left"></i>
                                            </button>
                                            <div class="form-control text-center">
                                                @SelectedDate.Year
                                            </div>
                                            <button class="btn btn-outline-secondary" @onclick="NextYear">
                                                <i class="bi bi-chevron-right"></i>
                                            </button>
                                        </div>
                                    </div>
                                    break;
                            }
                        </div>
                        <div class="col-md-6">
                            <!-- Odstraníme statistiku odsud, protože jsme ji přesunuli do hlavičky -->
                        </div>
                    </div>

                    @if (IsLoading)
                    {
                        <div class="d-flex justify-content-center my-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Nacitani...</span>
                            </div>
                        </div>
                    }
                    else if (TemperatureData?.Count > 0)
                    {
                        <div id="temperature-chart" style="height: 400px;"></div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            Zadna data nejsou k dispozici pro vybrane obdobi.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string SelectedPeriod = "day";
    private DateTime SelectedDate = DateTime.Today;
    private DateTime WeekStartDate => SelectedDate.AddDays(-(int)SelectedDate.DayOfWeek + (int)DayOfWeek.Monday);
    private DateTime WeekEndDate => WeekStartDate.AddDays(6);
    private List<TemperatureDataPoint> TemperatureData = new();
    private bool IsLoading = false;
    private bool ChartNeedsRendering = false;

    private record TemperatureSummaryData(float Min, float Avg, float Max);
    private TemperatureSummaryData TemperatureSummary = new(0, 0, 0);

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ChartNeedsRendering && TemperatureData?.Count > 0)
        {
            ChartNeedsRendering = false;
            await RenderChartAsync();
        }
    }

    private async Task RenderChartAsync()
    {
        try
        {
            // Nejprve ověříme, zda existuje DOM element pro graf
            var elementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('temperature-chart') !== null");
            
            if (!elementExists)
            {
                Logger.LogWarning("Element grafu 'temperature-chart' nenalezen, graf nebude vykreslen");
                return;
            }

            // Připravíme data pro graf
            var categories = TemperatureData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
            var minTemperatureData = TemperatureData.Select(d => d.MinTemperature).ToArray();
            var avgTemperatureData = TemperatureData.Select(d => d.AvgTemperature).ToArray();
            var maxTemperatureData = TemperatureData.Select(d => d.MaxTemperature).ToArray();

            Logger.LogInformation("Vykresluji graf s {Count} body", categories.Length);
            
            // Zavoláme funkci pro vykreslení grafu
            await JSRuntime.InvokeVoidAsync("renderTemperatureChart", 
                "temperature-chart", 
                categories, 
                minTemperatureData, 
                avgTemperatureData, 
                maxTemperatureData);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Chyba pri vykreslovani grafu: {Message}", ex.Message);
        }
    }

    private async Task RefreshData()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            DateTime startDate;
            DateTime endDate;
            string aggregationType;

            switch (SelectedPeriod)
            {
                case "day":
                    startDate = SelectedDate.Date;
                    endDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                    aggregationType = "hourly";
                    break;
                case "week":
                    startDate = WeekStartDate;
                    endDate = WeekEndDate.AddDays(1).AddSeconds(-1);
                    aggregationType = "daily";
                    break;
                case "month":
                    startDate = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
                    endDate = startDate.AddMonths(1).AddSeconds(-1);
                    aggregationType = "daily";
                    break;
                case "year":
                    startDate = new DateTime(SelectedDate.Year, 1, 1);
                    endDate = new DateTime(SelectedDate.Year, 12, 31, 23, 59, 59);
                    aggregationType = "monthly";
                    break;
                default:
                    startDate = SelectedDate.Date;
                    endDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                    aggregationType = "hourly";
                    break;
            }

            Logger.LogInformation("Načítám data pro {Period} od {Start} do {End}", SelectedPeriod, startDate, endDate);
            TemperatureData = await TemperatureHistoryService.GetTemperatureDataAsync(startDate, endDate, aggregationType);
            
            if (TemperatureData.Count > 0)
            {
                // Odfiltrujeme hodnoty null, pokud existují
                var validMinValues = TemperatureData.Where(d => d.MinTemperature.HasValue).Select(d => d.MinTemperature.Value).ToList();
                var validAvgValues = TemperatureData.Where(d => d.AvgTemperature.HasValue).Select(d => d.AvgTemperature.Value).ToList();
                var validMaxValues = TemperatureData.Where(d => d.MaxTemperature.HasValue).Select(d => d.MaxTemperature.Value).ToList();
                
                if (validMinValues.Any() && validAvgValues.Any() && validMaxValues.Any())
                {
                    TemperatureSummary = new TemperatureSummaryData(
                        validMinValues.Min(),
                        validAvgValues.Average(),
                        validMaxValues.Max()
                    );
                }
                else
                {
                    TemperatureSummary = new TemperatureSummaryData(0, 0, 0);
                }
                
                Logger.LogInformation("Načteno {Count} záznamů pro období {Period}", TemperatureData.Count, SelectedPeriod);
                ChartNeedsRendering = true;
            }
            else
            {
                TemperatureSummary = new TemperatureSummaryData(0, 0, 0);
                Logger.LogWarning("Nebyla načtena žádná data pro období {Period}", SelectedPeriod);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Chyba pri nacitani dat teplotni historie");
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ChangePeriod(string period)
    {
        if (period == SelectedPeriod)
            return;
            
        // Pokusíme se zničit existující graf před změnou období
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", "if(window.temperatureChart) { window.temperatureChart.destroy(); window.temperatureChart = null; }");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Nepodařilo se zničit existující graf před změnou období");
        }
        
        SelectedPeriod = period;
        await RefreshData();
    }
    
    private Task ChangePeriodDay() => ChangePeriod("day");
    
    private Task ChangePeriodWeek() => ChangePeriod("week");
    
    private Task ChangePeriodMonth() => ChangePeriod("month");
    
    private Task ChangePeriodYear() => ChangePeriod("year");

    private async Task PreviousWeek()
    {
        SelectedDate = SelectedDate.AddDays(-7);
        await RefreshData();
    }

    private async Task NextWeek()
    {
        SelectedDate = SelectedDate.AddDays(7);
        await RefreshData();
    }

    private async Task PreviousMonth()
    {
        SelectedDate = SelectedDate.AddMonths(-1);
        await RefreshData();
    }

    private async Task NextMonth()
    {
        SelectedDate = SelectedDate.AddMonths(1);
        await RefreshData();
    }

    private async Task PreviousYear()
    {
        SelectedDate = SelectedDate.AddYears(-1);
        await RefreshData();
    }

    private async Task NextYear()
    {
        SelectedDate = SelectedDate.AddYears(1);
        await RefreshData();
    }
} 