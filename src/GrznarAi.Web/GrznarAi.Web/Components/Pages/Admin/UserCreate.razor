@page "/admin/administration/users/create"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin")]
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject ILocalizationService Localizer
@inject NavigationManager NavigationManager

<PageTitle>@Localizer.GetString("Administration.Users.Create")</PageTitle>

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2>@Localizer.GetString("Administration.Users.Create")</h2>
        </div>
        <div class="card-body">
            <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-4" />

                <div class="mb-3">
                    <label class="form-label" for="userName">@Localizer.GetString("Administration.Users.Username")</label>
                    <InputText id="userName" class="form-control" @bind-Value="model.UserName" />
                    <ValidationMessage For="() => model.UserName" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="email">@Localizer.GetString("Administration.Users.Email")</label>
                    <InputText id="email" class="form-control" @bind-Value="model.Email" />
                    <ValidationMessage For="() => model.Email" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="password">@Localizer.GetString("Administration.Users.Password")</label>
                    <InputText id="password" class="form-control" type="password" @bind-Value="model.Password" />
                    <ValidationMessage For="() => model.Password" />
                    <div id="passwordHelpBlock" class="form-text">
                        @Localizer.GetString("Administration.Users.PasswordRequirements")
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label" for="confirmPassword">@Localizer.GetString("Administration.Users.ConfirmPassword")</label>
                    <InputText id="confirmPassword" class="form-control" type="password" @bind-Value="model.ConfirmPassword" />
                    <ValidationMessage For="() => model.ConfirmPassword" />
                </div>

                <div class="mb-3 form-check">
                    <InputCheckbox id="emailConfirmed" class="form-check-input" @bind-Value="model.EmailConfirmed" />
                    <label class="form-check-label" for="emailConfirmed">
                        @Localizer.GetString("Administration.Users.EmailConfirmed")
                    </label>
                </div>

                <div class="mb-3">
                    <label class="form-label">@Localizer.GetString("Administration.Users.Roles")</label>
                    <div class="d-flex flex-wrap gap-2">
                        @foreach (var role in availableRoles)
                        {
                            <div class="form-check">
                                <input class="form-check-input" 
                                       type="checkbox" 
                                       id="role_@role" 
                                       @onchange="@(e => ToggleRole(role, (bool)e.Value!))" />
                                <label class="form-check-label" for="role_@role">@role</label>
                            </div>
                        }
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
                    </div>
                }

                <div class="mt-4 d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            @Localizer.GetString("Administration.Saving")
                        }
                        else
                        {
                            <i class="bi bi-check-lg me-2"></i>
                            @Localizer.GetString("Administration.Save")
                        }
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="GoBack">
                        <i class="bi bi-arrow-left me-2"></i>@Localizer.GetString("Administration.Back")
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private UserCreateModel model = new();
    private List<string> availableRoles = new();
    private List<string> selectedRoles = new();
    private bool isSaving;
    private string? errorMessage;

    private class UserCreateModel
    {
        [Required(ErrorMessage = "Uživatelské jméno je povinné")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Email je povinný")]
        [EmailAddress(ErrorMessage = "Neplatný formát emailu")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Heslo je povinné")]
        [StringLength(100, ErrorMessage = "Heslo musí být dlouhé alespoň {2} znaků.", MinimumLength = 6)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{6,}$", 
            ErrorMessage = "Heslo musí obsahovat velké písmeno, malé písmeno, číslici a speciální znak.")]
        public string Password { get; set; } = "";
        
        [Compare("Password", ErrorMessage = "Hesla se neshodují")]
        public string ConfirmPassword { get; set; } = "";

        public bool EmailConfirmed { get; set; } = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRolesAsync();
    }

    private async Task LoadRolesAsync()
    {
        availableRoles = await RoleManager.Roles
            .Select(r => r.Name)
            .Where(n => n != null)
            .Cast<string>()
            .ToListAsync();
    }

    private void ToggleRole(string role, bool isChecked)
    {
        if (isChecked && !selectedRoles.Contains(role))
        {
            selectedRoles.Add(role);
        }
        else if (!isChecked && selectedRoles.Contains(role))
        {
            selectedRoles.Remove(role);
        }
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        errorMessage = null;

        try
        {
            var user = new ApplicationUser
            {
                UserName = model.UserName,
                Email = model.Email,
                EmailConfirmed = model.EmailConfirmed
            };

            var result = await UserManager.CreateAsync(user, model.Password);
            if (result.Succeeded)
            {
                if (selectedRoles.Any())
                {
                    await UserManager.AddToRolesAsync(user, selectedRoles);
                }
                
                NavigationManager.NavigateTo("/admin/administration/users");
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Chyba při vytváření uživatele: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/admin/administration/users");
    }
} 