@page "/admin/ainews"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin")]
@rendermode InteractiveServer

@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using System.Globalization
@using Microsoft.AspNetCore.Components.Web

@inject IAiNewsService AiNewsService
@inject IAiNewsSourceService SourceService
@inject IAiNewsErrorService ErrorService
@inject ILocalizationService Localizer
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>@Localizer.GetString("Administration.AiNews.Title")</PageTitle>

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2>@Localizer.GetString("Administration.AiNews.Title")</h2>
            <p class="mb-0">@Localizer.GetString("Administration.AiNews.Description")</p>
        </div>
        
        <div class="card-body">
            <!-- Záložky pro přepínání mezi sekcemi -->
            <ul class="nav nav-tabs mb-4">
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "news" ? "active" : "")" 
                            @onclick="@(() => ChangeTab("news"))">
                        <i class="bi bi-newspaper me-1"></i> @Localizer.GetString("Administration.AiNews.List")
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "sources" ? "active" : "")" 
                            @onclick="@(() => ChangeTab("sources"))">
                        <i class="bi bi-link-45deg me-1"></i> @Localizer.GetString("Administration.AiNews.Sources")
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "errors" ? "active" : "")" 
                            @onclick="@(() => ChangeTab("errors"))">
                        <i class="bi bi-exclamation-triangle me-1"></i> @Localizer.GetString("Administration.AiNews.Errors")
                    </button>
                </li>
            </ul>

            <!-- Sekce pro AI novinky -->
            @if (activeTab == "news")
            {
                <div class="mb-4">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-search"></i></span>
                                <input type="text" class="form-control" 
                                       placeholder="@Localizer.GetString("Administration.AiNews.Filter")" 
                                       @bind-value="searchTerm" 
                                       @bind-value:event="oninput" 
                                       @onkeyup="HandleSearchKeyPress" />
                                <button class="btn btn-primary" @onclick="Search">
                                    <i class="bi bi-search"></i> @Localizer.GetString("Administration.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                @if (isLoading)
                {
                    <div class="d-flex justify-content-center my-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">@Localizer.GetString("Administration.Loading")</span>
                        </div>
                        <span class="ms-3">@Localizer.GetString("Administration.Loading")</span>
                    </div>
                }
                else if (newsItems.Count == 0)
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        @Localizer.GetString("Administration.AiNews.NoItems")
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>@Localizer.GetString("AiNews.Title") (CZ)</th>
                                    <th>@Localizer.GetString("AiNews.Title") (EN)</th>
                                    <th>Datum publikace</th>
                                    <th>Zdroj</th>
                                    <th>@Localizer.GetString("Administration.Actions")</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in newsItems)
                                {
                                    <tr>
                                        <td>@item.Id</td>
                                        <td>@item.TitleCz</td>
                                        <td>@item.TitleEn</td>
                                        <td>@(item.PublishedDate?.ToString("d. MMMM yyyy") ?? "Nedatováno")</td>
                                        <td>@(string.IsNullOrEmpty(item.SourceName) ? "-" : item.SourceName)</td>
                                        <td>
                                            <button class="btn btn-sm btn-danger" @onclick="@(() => ShowDeleteConfirmation(item, "news"))">
                                                <i class="bi bi-trash"></i> @Localizer.GetString("Administration.AiNews.Delete")
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="d-flex justify-content-center mt-4">
                        <nav>
                            <ul class="pagination">
                                <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="PreviousPage" disabled="@(currentPage <= 1)">
                                        &laquo;
                                    </button>
                                </li>

                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }

                                <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="NextPage" disabled="@(currentPage >= totalPages)">
                                        &raquo;
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
            }
            
            <!-- Sekce pro zdroje novinek -->
            @if (activeTab == "sources")
            {
                <div class="mb-4">
                    <button class="btn btn-success" @onclick="() => ShowSourceForm()">
                        <i class="bi bi-plus-circle me-1"></i> @Localizer.GetString("Administration.AiNews.Sources.Add")
                    </button>
                </div>
                
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center my-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">@Localizer.GetString("Administration.Loading")</span>
                        </div>
                        <span class="ms-3">@Localizer.GetString("Administration.Loading")</span>
                    </div>
                }
                else if (sources.Count == 0)
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        @Localizer.GetString("Administration.AiNews.Sources.NoItems")
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Název</th>
                                    <th>URL</th>
                                    <th>Typ</th>
                                    <th>Naposledy staženo</th>
                                    <th>Aktivní</th>
                                    <th>Akce</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var source in sources)
                                {
                                    <tr>
                                        <td>@source.Id</td>
                                        <td>@source.Name</td>
                                        <td>
                                            <a href="@source.Url" target="_blank">@source.Url</a>
                                        </td>
                                        <td>@source.Type</td>
                                        <td>@(source.LastFetched?.ToString("dd.MM.yyyy HH:mm") ?? "Nikdy")</td>
                                        <td>
                                            @if (source.IsActive)
                                            {
                                                <span class="badge bg-success">Aktivní</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Neaktivní</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-primary" @onclick="() => ShowSourceForm(source)">
                                                    <i class="bi bi-pencil"></i> @Localizer.GetString("Administration.AiNews.Sources.Edit")
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="@(() => ShowDeleteConfirmation(source, "source"))">
                                                    <i class="bi bi-trash"></i> @Localizer.GetString("Administration.AiNews.Sources.Delete")
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
            
            <!-- Sekce pro chyby -->
            @if (activeTab == "errors")
            {
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center my-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">@Localizer.GetString("Administration.Loading")</span>
                        </div>
                        <span class="ms-3">@Localizer.GetString("Administration.Loading")</span>
                    </div>
                }
                else if (errors.Count == 0)
                {
                    <div class="alert alert-success">
                        <i class="bi bi-check-circle me-2"></i>
                        @Localizer.GetString("Administration.AiNews.Errors.NoItems")
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Datum a čas</th>
                                    <th>Zpráva</th>
                                    <th>Zdroj</th>
                                    <th>Akce</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var error in errors)
                                {
                                    <tr>
                                        <td>@error.Id</td>
                                        <td>@error.OccurredAt.ToString("dd.MM.yyyy HH:mm:ss")</td>
                                        <td>@error.Message</td>
                                        <td>@(error.Source?.Name ?? "-")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-info" title="@Localizer.GetString("Administration.AiNews.Errors.ShowDetails")" data-bs-toggle="collapse" 
                                                        data-bs-target="#error-@error.Id">
                                                    <i class="bi bi-info-circle"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="@(() => ShowDeleteConfirmation(error, "error"))">
                                                    <i class="bi bi-trash"></i> @Localizer.GetString("Administration.AiNews.Errors.Delete")
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr class="collapse" id="error-@error.Id">
                                        <td colspan="5" class="bg-light">
                                            <div class="p-3">
                                                <h6>@Localizer.GetString("Administration.AiNews.Errors.StackTrace")</h6>
                                                <pre class="border p-2 bg-white">@(error.StackTrace ?? Localizer.GetString("Administration.AiNews.Errors.NoStackTrace"))</pre>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="d-flex justify-content-center mt-4">
                        <nav>
                            <ul class="pagination">
                                <li class="page-item @(errorCurrentPage <= 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="ErrorPreviousPage" disabled="@(errorCurrentPage <= 1)">
                                        &laquo;
                                    </button>
                                </li>

                                @for (int i = Math.Max(1, errorCurrentPage - 2); i <= Math.Min(errorTotalPages, errorCurrentPage + 2); i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(pageNumber == errorCurrentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => ErrorGoToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }

                                <li class="page-item @(errorCurrentPage >= errorTotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="ErrorNextPage" disabled="@(errorCurrentPage >= errorTotalPages)">
                                        &raquo;
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
            }
        </div>
    </div>
</div>

<!-- Modální okno pro potvrzení mazání -->
@if (deleteConfirmationVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Localizer.GetString("Administration.Confirmation")</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteConfirmation"></button>
                </div>
                <div class="modal-body">
                    @switch (deleteItemType)
                    {
                        case "news":
                            <p>@Localizer.GetString("Administration.AiNews.DeleteConfirmation")</p>
                            <p><strong>@(newsItemToDelete?.TitleCz ?? "")</strong></p>
                            break;
                        case "source":
                            <p>@Localizer.GetString("Administration.AiNews.Sources.DeleteConfirmation")</p>
                            <p><strong>@(sourceToDelete?.Name ?? "")</strong></p>
                            <p class="text-danger">@Localizer.GetString("Administration.AiNews.Sources.DeleteWarning")</p>
                            break;
                        case "error":
                            <p>@Localizer.GetString("Administration.AiNews.Errors.DeleteConfirmation")</p>
                            <p><strong>@(errorToDelete?.Message ?? "")</strong></p>
                            break;
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmation">
                        @Localizer.GetString("Administration.Cancel")
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteItemAsync">
                        @Localizer.GetString("Administration.AiNews.Delete")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modální okno pro přidání/editaci zdroje -->
@if (showSourceModal && sourceToEdit != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isSourceModalEdit ? Localizer.GetString("Administration.AiNews.Sources.Edit") : Localizer.GetString("Administration.AiNews.Sources.Add"))</h5>
                    <button type="button" class="btn-close" @onclick="CloseSourceModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="sourceName" class="form-label">@Localizer.GetString("Administration.AiNews.Sources.Name")</label>
                        <input type="text" class="form-control" id="sourceName" 
                               @bind="sourceToEdit.Name" required />
                    </div>
                    <div class="mb-3">
                        <label for="sourceUrl" class="form-label">@Localizer.GetString("Administration.AiNews.Sources.Url")</label>
                        <input type="url" class="form-control" id="sourceUrl" 
                               @bind="sourceToEdit.Url" required />
                    </div>
                    <div class="mb-3">
                        <label for="sourceType" class="form-label">@Localizer.GetString("Administration.AiNews.Sources.Type")</label>
                        <select class="form-select" id="sourceType" @bind="sourceToEdit.Type">
                            <option value="@SourceType.Web">Web</option>
                            <option value="@SourceType.Facebook">Facebook</option>
                            <option value="@SourceType.Twitter">Twitter</option>
                        </select>
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="sourceActive" 
                               @bind="sourceToEdit.IsActive" />
                        <label class="form-check-label" for="sourceActive">@Localizer.GetString("Administration.AiNews.Sources.Active")</label>
                    </div>
                    <div class="mb-3">
                        <label for="sourceDescription" class="form-label">@Localizer.GetString("Administration.AiNews.Sources.Description")</label>
                        <textarea class="form-control" id="sourceDescription" rows="3"
                                  @bind="sourceToEdit.Description"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="sourceParameters" class="form-label">@Localizer.GetString("Administration.AiNews.Sources.Parameters")</label>
                        <textarea class="form-control" id="sourceParameters" rows="3"
                                  @bind="sourceToEdit.Parameters"></textarea>
                        <small class="text-muted">@Localizer.GetString("Administration.AiNews.Sources.ParametersHelp")</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSourceModal">
                        @Localizer.GetString("Administration.Cancel")
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="SaveSourceAsync">
                        @Localizer.GetString("Administration.Save")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<AiNewsItem> newsItems = new();
    private List<AiNewsSource> sources = new();
    private List<AiNewsError> errors = new();
    private string searchTerm = "";
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private int totalPages => (int)Math.Ceiling(totalCount / (double)pageSize);
    
    // Proměnné pro aktuální zobrazený tab
    private string activeTab = "news"; // "news", "sources", "errors"
    
    // Proměnné pro zdroje
    private AiNewsSource newSource = new();
    private AiNewsSource? sourceToEdit = null;
    private bool showSourceModal = false;
    private bool isSourceModalEdit = false;
    
    // Proměnné pro chyby
    private int errorCurrentPage = 1;
    private int errorTotalCount = 0;
    private int errorTotalPages => (int)Math.Ceiling(errorTotalCount / (double)pageSize);

    // Proměnné pro potvrzení mazání
    private bool deleteConfirmationVisible = false;
    private AiNewsItem? newsItemToDelete = null;
    private AiNewsSource? sourceToDelete = null;
    private AiNewsError? errorToDelete = null;
    private string deleteItemType = "news"; // "news", "source", "error"

    protected override async Task OnInitializedAsync()
    {
        await LoadNewsAsync();
        await LoadSourcesAsync();
        await LoadErrorsAsync();
    }

    private async Task LoadNewsAsync()
    {
        isLoading = true;
        try
        {
            var result = await AiNewsService.GetAiNewsAsync(currentPage, pageSize, searchTerm);
            newsItems = result.Items;
            totalCount = result.TotalCount;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při načítání dat: {ex.Message}");
            newsItems = new List<AiNewsItem>();
            totalCount = 0;
        }
        isLoading = false;
    }
    
    private async Task LoadSourcesAsync()
    {
        isLoading = true;
        try
        {
            var result = await SourceService.GetSourcesAsync(1, 100); // Předpokládáme, že zdrojů bude málo
            sources = result.Items;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při načítání zdrojů: {ex.Message}");
            sources = new List<AiNewsSource>();
        }
        isLoading = false;
    }
    
    private async Task LoadErrorsAsync()
    {
        isLoading = true;
        try
        {
            var result = await ErrorService.GetErrorsAsync(errorCurrentPage, pageSize);
            errors = result;
            errorTotalCount = result.Count;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při načítání chyb: {ex.Message}");
            errors = new List<AiNewsError>();
            errorTotalCount = 0;
        }
        isLoading = false;
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadNewsAsync();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadNewsAsync();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadNewsAsync();
        }
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadNewsAsync();
    }

    private void ChangeTab(string tab)
    {
        activeTab = tab;
    }
    
    private void ShowSourceForm(AiNewsSource? source = null)
    {
        if (source != null)
        {
            sourceToEdit = new AiNewsSource
            {
                Id = source.Id,
                Name = source.Name,
                Url = source.Url,
                Type = source.Type,
                IsActive = source.IsActive,
                Description = source.Description,
                Parameters = source.Parameters
            };
            isSourceModalEdit = true;
        }
        else
        {
            sourceToEdit = new AiNewsSource();
            isSourceModalEdit = false;
        }
        
        showSourceModal = true;
    }
    
    private void CloseSourceModal()
    {
        showSourceModal = false;
        sourceToEdit = null;
    }
    
    private async Task SaveSourceAsync()
    {
        if (sourceToEdit == null) return;
        
        try
        {
            if (isSourceModalEdit)
            {
                var result = await SourceService.UpdateSourceAsync(sourceToEdit);
                if (result)
                {
                    await JSRuntime.InvokeVoidAsync("Toastify", new { 
                        text = "Zdroj byl úspěšně aktualizován", 
                        duration = 3000, 
                        gravity = "bottom", 
                        position = "right", 
                        style = new { background = "linear-gradient(to right, #00b09b, #96c93d)" }
                    });
                }
            }
            else
            {
                var result = await SourceService.AddSourceAsync(sourceToEdit);
                if (result != null)
                {
                    await JSRuntime.InvokeVoidAsync("Toastify", new { 
                        text = "Nový zdroj byl úspěšně přidán", 
                        duration = 3000, 
                        gravity = "bottom", 
                        position = "right", 
                        style = new { background = "linear-gradient(to right, #00b09b, #96c93d)" }
                    });
                }
            }
            
            CloseSourceModal();
            await LoadSourcesAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("Toastify", new { 
                text = "Chyba při ukládání zdroje: " + ex.Message, 
                duration = 3000, 
                gravity = "bottom", 
                position = "right", 
                style = new { background = "linear-gradient(to right, #ff5f6d, #ffc371)" }
            });
        }
    }
    
    private void ShowDeleteConfirmation(AiNewsItem item)
    {
        ShowDeleteConfirmation(item, "news");
    }
    
    private void ShowDeleteConfirmation(object item, string type)
    {
        deleteItemType = type;
        
        switch (type)
        {
            case "news":
                newsItemToDelete = (AiNewsItem)item;
                sourceToDelete = null;
                errorToDelete = null;
                break;
            case "source":
                newsItemToDelete = null;
                sourceToDelete = (AiNewsSource)item;
                errorToDelete = null;
                break;
            case "error":
                newsItemToDelete = null;
                sourceToDelete = null;
                errorToDelete = (AiNewsError)item;
                break;
        }
        
        deleteConfirmationVisible = true;
    }

    private async Task DeleteNewsItem()
    {
        await DeleteItemAsync();
    }

    private async Task ErrorPreviousPage()
    {
        if (errorCurrentPage > 1)
        {
            errorCurrentPage--;
            await LoadErrorsAsync();
        }
    }

    private async Task ErrorNextPage()
    {
        if (errorCurrentPage < errorTotalPages)
        {
            errorCurrentPage++;
            await LoadErrorsAsync();
        }
    }

    private async Task ErrorGoToPage(int page)
    {
        errorCurrentPage = page;
        await LoadErrorsAsync();
    }

    private async Task DeleteItemAsync()
    {
        try
        {
            bool result = false;
            string successMessage = "";
            string errorMessage = "";
            
            switch (deleteItemType)
            {
                case "news":
                    if (newsItemToDelete != null)
                    {
                        result = await AiNewsService.DeleteAiNewsItemAsync(newsItemToDelete.Id);
                        successMessage = "Novinka byla úspěšně smazána";
                        errorMessage = "Chyba při mazání novinky";
                    }
                    break;
                case "source":
                    if (sourceToDelete != null)
                    {
                        result = await SourceService.DeleteSourceAsync(sourceToDelete.Id);
                        successMessage = "Zdroj byl úspěšně smazán";
                        errorMessage = "Chyba při mazání zdroje";
                    }
                    break;
                case "error":
                    if (errorToDelete != null)
                    {
                        result = await ErrorService.DeleteErrorAsync(errorToDelete.Id);
                        successMessage = "Záznam o chybě byl úspěšně smazán";
                        errorMessage = "Chyba při mazání záznamu o chybě";
                    }
                    break;
            }
            
            CloseDeleteConfirmation();
            
            if (result)
            {
                await JSRuntime.InvokeVoidAsync("Toastify", new { 
                    text = successMessage, 
                    duration = 3000, 
                    gravity = "bottom", 
                    position = "right", 
                    style = new { background = "linear-gradient(to right, #00b09b, #96c93d)" }
                });
                
                // Znovu načteme data podle aktivního tabu
                switch (activeTab)
                {
                    case "news":
                        await LoadNewsAsync();
                        break;
                    case "sources":
                        await LoadSourcesAsync();
                        break;
                    case "errors":
                        await LoadErrorsAsync();
                        break;
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("Toastify", new { 
                    text = errorMessage, 
                    duration = 3000, 
                    gravity = "bottom", 
                    position = "right", 
                    style = new { background = "linear-gradient(to right, #ff5f6d, #ffc371)" }
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při mazání: {ex.Message}");
            
            await JSRuntime.InvokeVoidAsync("Toastify", new { 
                text = "Chyba při mazání: " + ex.Message, 
                duration = 3000, 
                gravity = "bottom", 
                position = "right", 
                style = new { background = "linear-gradient(to right, #ff5f6d, #ffc371)" }
            });
            
            CloseDeleteConfirmation();
        }
    }

    private void CloseDeleteConfirmation()
    {
        deleteConfirmationVisible = false;
        newsItemToDelete = null;
        sourceToDelete = null;
        errorToDelete = null;
    }
} 