@page "/meteo/trends"
@rendermode InteractiveServer
@using GrznarAi.Web.Services.Weather
@using System.Globalization
@inject ITemperatureHistoryService TemperatureHistoryService
@inject ILogger<MeteoTrends> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Meteo Trends - GrznarAI</PageTitle>

<div class="container-fluid">
    <h1>Meteo Trends</h1>
    
    <div class="row mb-3">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Teplotni historie</h5>
                </div>
                <div class="card-body">
                    <!-- Přepínače období s ikonami -->
                    <div class="period-tabs mb-4">
                        <button class="period-btn @(SelectedPeriod == "day" ? "active" : "")" @onclick="ChangePeriodDay">
                            <i class="bi bi-calendar-day"></i> Den
                        </button>
                        <button class="period-btn @(SelectedPeriod == "week" ? "active" : "")" @onclick="ChangePeriodWeek">
                            <i class="bi bi-calendar-week"></i> Týden
                        </button>
                        <button class="period-btn @(SelectedPeriod == "month" ? "active" : "")" @onclick="ChangePeriodMonth">
                            <i class="bi bi-calendar-month"></i> Měsíc
                        </button>
                        <button class="period-btn @(SelectedPeriod == "year" ? "active" : "")" @onclick="ChangePeriodYear">
                            <i class="bi bi-calendar-range"></i> Rok
                        </button>
                    </div>

                    <!-- Datumový výběr -->
                    <div class="date-selector mb-4">
                        @switch (SelectedPeriod)
                        {
                            case "day":
                                <div class="date-nav-container">
                                    <button class="date-nav-btn" @onclick="PreviousDay">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                    <div class="date-display">
                                        <input type="date" class="form-control date-input" @bind="SelectedDate" @bind:format="yyyy-MM-dd" @bind:after="RefreshData" />
                                    </div>
                                    <button class="date-nav-btn" @onclick="NextDay">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                                break;
                            case "week":
                                <div class="date-nav-container">
                                    <button class="date-nav-btn" @onclick="PreviousWeek">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                    <div class="date-display">
                                        @($"{WeekStartDate:dd.MM.yyyy} - {WeekEndDate:dd.MM.yyyy}")
                                    </div>
                                    <button class="date-nav-btn" @onclick="NextWeek">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                                break;
                            case "month":
                                <div class="date-nav-container">
                                    <button class="date-nav-btn" @onclick="PreviousMonth">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                    <div class="date-display">
                                        @(new DateTime(SelectedDate.Year, SelectedDate.Month, 1).ToString("MMMM yyyy", CultureInfo.CreateSpecificCulture("cs-CZ")))
                                    </div>
                                    <button class="date-nav-btn" @onclick="NextMonth">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                                break;
                            case "year":
                                <div class="date-nav-container">
                                    <button class="date-nav-btn" @onclick="PreviousYear">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                    <div class="date-display">
                                        @SelectedDate.Year
                                    </div>
                                    <button class="date-nav-btn" @onclick="NextYear">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                                break;
                        }
                    </div>

                    @if (IsLoading)
                    {
                        <div class="d-flex justify-content-center my-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Nacitani...</span>
                            </div>
                        </div>
                    }
                    else if (TemperatureData?.Count > 0)
                    {
                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Teplotní graf</h5>
                                <div class="temperature-summary">
                                    <span class="badge text-bg-info me-2">Min: @TemperatureSummary.Min.ToString("F1") °C</span>
                                    <span class="badge text-bg-warning me-2">Avg: @TemperatureSummary.Avg.ToString("F1") °C</span>
                                    <span class="badge text-bg-danger">Max: @TemperatureSummary.Max.ToString("F1") °C</span>
                                </div>
                            </div>
                            <div id="temperature-chart" style="height: 400px;"></div>
                        </div>

                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Graf vlhkosti</h5>
                                <div class="humidity-summary">
                                    <span class="badge text-bg-info me-2">Min: @HumiditySummary.Min.ToString("F1") %</span>
                                    <span class="badge text-bg-warning me-2">Avg: @HumiditySummary.Avg.ToString("F1") %</span>
                                    <span class="badge text-bg-danger">Max: @HumiditySummary.Max.ToString("F1") %</span>
                                </div>
                            </div>
                            <div id="humidity-chart" style="height: 400px;"></div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            Zadna data nejsou k dispozici pro vybrane obdobi.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Styly pro přepínače období */
    .period-tabs {
        display: flex;
        margin-bottom: 1rem;
        border-radius: 0.25rem;
        overflow: hidden;
        background-color: #f8f9fa;
    }
    
    .period-btn {
        flex: 1;
        border: none;
        padding: 0.75rem 0.5rem;
        background-color: transparent;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        font-weight: 500;
        color: #495057;
    }
    
    .period-btn i {
        font-size: 1.1rem;
    }
    
    .period-btn.active {
        background-color: #ff8c00;
        color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .period-btn:hover:not(.active) {
        background-color: #e9ecef;
    }
    
    /* Styly pro výběr data */
    .date-nav-container {
        display: flex;
        align-items: center;
        max-width: 400px;
        margin: 0 auto;
    }
    
    .date-display {
        flex: 1;
        text-align: center;
        padding: 0.5rem 1rem;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        margin: 0 0.5rem;
        font-weight: 500;
    }
    
    .date-nav-btn {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        color: #495057;
        transition: all 0.2s ease;
    }
    
    .date-nav-btn:hover {
        background-color: #e9ecef;
    }
    
    .date-input {
        border: none;
        text-align: center;
        padding: 0;
        height: auto;
    }
    
    /* Responzivní úpravy */
    @@media (max-width: 576px) {
        .period-btn {
            padding: 0.5rem 0.25rem;
            font-size: 0.9rem;
        }
        
        .date-display {
            font-size: 0.9rem;
            padding: 0.5rem;
        }
    }
</style>

@code {
    private string SelectedPeriod = "day";
    private DateTime SelectedDate = DateTime.Today;
    private DateTime WeekStartDate => SelectedDate.AddDays(-(int)SelectedDate.DayOfWeek + (int)DayOfWeek.Monday);
    private DateTime WeekEndDate => WeekStartDate.AddDays(6);
    private List<TemperatureDataPoint> TemperatureData = new();
    private bool IsLoading = false;
    private bool ChartNeedsRendering = false;

    private record TemperatureSummaryData(float Min, float Avg, float Max);
    private TemperatureSummaryData TemperatureSummary = new(0, 0, 0);
    private TemperatureSummaryData HumiditySummary = new(0, 0, 0);

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ChartNeedsRendering && TemperatureData?.Count > 0)
        {
            ChartNeedsRendering = false;
            await RenderChartAsync();
        }
    }

    private async Task RenderChartAsync()
    {
        try
        {
            // Nejprve ověříme, zda existuje DOM element pro graf teploty
            var tempElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('temperature-chart') !== null");
            
            if (tempElementExists)
            {
                // Připravíme data pro teplotní graf
                var categories = TemperatureData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                var minTemperatureData = TemperatureData.Select(d => d.MinTemperature).ToArray();
                var avgTemperatureData = TemperatureData.Select(d => d.AvgTemperature).ToArray();
                var maxTemperatureData = TemperatureData.Select(d => d.MaxTemperature).ToArray();

                Logger.LogInformation("Vykresluji teplotní graf s {Count} body", categories.Length);
                
                // Zavoláme funkci pro vykreslení teplotního grafu
                await JSRuntime.InvokeVoidAsync("renderTemperatureChart", 
                    "temperature-chart", 
                    categories, 
                    minTemperatureData, 
                    avgTemperatureData, 
                    maxTemperatureData);
            }
            else
            {
                Logger.LogWarning("Element grafu 'temperature-chart' nenalezen, teplotní graf nebude vykreslen");
            }
            
            // Pak ověříme, zda existuje DOM element pro graf vlhkosti
            var humidityElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('humidity-chart') !== null");
                
            if (humidityElementExists)
            {
                // Připravíme data pro graf vlhkosti
                var categories = TemperatureData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                var minHumidityData = TemperatureData.Select(d => d.MinHumidity).ToArray();
                var avgHumidityData = TemperatureData.Select(d => d.AvgHumidity).ToArray();
                var maxHumidityData = TemperatureData.Select(d => d.MaxHumidity).ToArray();

                Logger.LogInformation("Vykresluji graf vlhkosti s {Count} body", categories.Length);
                
                // Zavoláme funkci pro vykreslení grafu vlhkosti
                await JSRuntime.InvokeVoidAsync("renderHumidityChart", 
                    "humidity-chart", 
                    categories, 
                    minHumidityData, 
                    avgHumidityData, 
                    maxHumidityData);
            }
            else
            {
                Logger.LogWarning("Element grafu 'humidity-chart' nenalezen, graf vlhkosti nebude vykreslen");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Chyba pri vykreslovani grafu: {Message}", ex.Message);
        }
    }

    private async Task RefreshData()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            DateTime startDate;
            DateTime endDate;
            string aggregationType;

            switch (SelectedPeriod)
            {
                case "day":
                    startDate = SelectedDate.Date;
                    endDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                    aggregationType = "hourly";
                    break;
                case "week":
                    startDate = WeekStartDate;
                    endDate = WeekEndDate.AddDays(1).AddSeconds(-1);
                    aggregationType = "daily";
                    break;
                case "month":
                    startDate = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
                    endDate = startDate.AddMonths(1).AddSeconds(-1);
                    aggregationType = "daily";
                    break;
                case "year":
                    startDate = new DateTime(SelectedDate.Year, 1, 1);
                    endDate = new DateTime(SelectedDate.Year, 12, 31, 23, 59, 59);
                    aggregationType = "monthly";
                    break;
                default:
                    startDate = SelectedDate.Date;
                    endDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                    aggregationType = "hourly";
                    break;
            }

            Logger.LogInformation("Načítám data pro {Period} od {Start} do {End}", SelectedPeriod, startDate, endDate);
            TemperatureData = await TemperatureHistoryService.GetTemperatureDataAsync(startDate, endDate, aggregationType);
            
            if (TemperatureData.Count > 0)
            {
                // Odfiltrujeme hodnoty null, pokud existují
                var validMinValues = TemperatureData.Where(d => d.MinTemperature.HasValue).Select(d => d.MinTemperature.Value).ToList();
                var validAvgValues = TemperatureData.Where(d => d.AvgTemperature.HasValue).Select(d => d.AvgTemperature.Value).ToList();
                var validMaxValues = TemperatureData.Where(d => d.MaxTemperature.HasValue).Select(d => d.MaxTemperature.Value).ToList();
                
                if (validMinValues.Any() && validAvgValues.Any() && validMaxValues.Any())
                {
                    TemperatureSummary = new TemperatureSummaryData(
                        validMinValues.Min(),
                        validAvgValues.Average(),
                        validMaxValues.Max()
                    );
                }
                else
                {
                    TemperatureSummary = new TemperatureSummaryData(0, 0, 0);
                }

                // Počítání statistik pro vlhkost
                var validMinHumidity = TemperatureData.Where(d => d.MinHumidity.HasValue).Select(d => d.MinHumidity.Value).ToList();
                var validAvgHumidity = TemperatureData.Where(d => d.AvgHumidity.HasValue).Select(d => d.AvgHumidity.Value).ToList();
                var validMaxHumidity = TemperatureData.Where(d => d.MaxHumidity.HasValue).Select(d => d.MaxHumidity.Value).ToList();
                
                if (validMinHumidity.Any() && validAvgHumidity.Any() && validMaxHumidity.Any())
                {
                    HumiditySummary = new TemperatureSummaryData(
                        validMinHumidity.Min(),
                        validAvgHumidity.Average(),
                        validMaxHumidity.Max()
                    );
                }
                else
                {
                    HumiditySummary = new TemperatureSummaryData(0, 0, 0);
                }
                
                Logger.LogInformation("Načteno {Count} záznamů pro období {Period}", TemperatureData.Count, SelectedPeriod);
                ChartNeedsRendering = true;
            }
            else
            {
                TemperatureSummary = new TemperatureSummaryData(0, 0, 0);
                HumiditySummary = new TemperatureSummaryData(0, 0, 0);
                Logger.LogWarning("Nebyla načtena žádná data pro období {Period}", SelectedPeriod);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Chyba pri nacitani dat teplotni historie");
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ChangePeriod(string period)
    {
        if (period == SelectedPeriod)
            return;
            
        // Pokusíme se zničit existující graf před změnou období
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", "if(window.temperatureChart) { window.temperatureChart.destroy(); window.temperatureChart = null; }");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Nepodařilo se zničit existující graf před změnou období");
        }
        
        SelectedPeriod = period;
        await RefreshData();
    }
    
    private Task ChangePeriodDay() => ChangePeriod("day");
    
    private Task ChangePeriodWeek() => ChangePeriod("week");
    
    private Task ChangePeriodMonth() => ChangePeriod("month");
    
    private Task ChangePeriodYear() => ChangePeriod("year");

    // Nová metoda pro posun o den zpět
    private async Task PreviousDay()
    {
        SelectedDate = SelectedDate.AddDays(-1);
        await RefreshData();
    }

    // Nová metoda pro posun o den vpřed
    private async Task NextDay()
    {
        SelectedDate = SelectedDate.AddDays(1);
        await RefreshData();
    }

    private async Task PreviousWeek()
    {
        SelectedDate = SelectedDate.AddDays(-7);
        await RefreshData();
    }

    private async Task NextWeek()
    {
        SelectedDate = SelectedDate.AddDays(7);
        await RefreshData();
    }

    private async Task PreviousMonth()
    {
        SelectedDate = SelectedDate.AddMonths(-1);
        await RefreshData();
    }

    private async Task NextMonth()
    {
        SelectedDate = SelectedDate.AddMonths(1);
        await RefreshData();
    }

    private async Task PreviousYear()
    {
        SelectedDate = SelectedDate.AddYears(-1);
        await RefreshData();
    }

    private async Task NextYear()
    {
        SelectedDate = SelectedDate.AddYears(1);
        await RefreshData();
    }
} 