@page "/blog"
@page "/blog/tag/{Tag}"
@page "/blog/archive/{Year:int}/{Month:int}"
@using GrznarAi.Web.Services
@using GrznarAi.Web.Data
@using GrznarAi.Web.Components.Pages.Blog.Models
@inject IBlogService BlogService
@inject MarkdownService MarkdownService
@inject NavigationManager NavigationManager

<PageTitle>Blog - GrznarAI</PageTitle>

<style>
    .blog-card {
        height: auto;
        margin-bottom: 1.5rem;
    }
    
    .blog-card .card-body {
        padding: 1.25rem;
    }
    
    .blog-post-title {
        margin-bottom: 0.5rem;
        font-size: 1.5rem;
    }
    
    .blog-post-meta {
        font-size: 0.9rem;
        margin-bottom: 0.75rem;
    }
    
    .blog-card .card-text {
        margin-bottom: 1rem;
        max-height: 4.5em;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
    }
    
    /* Styly pro sidebar */
    .blog-sidebar .card {
        margin-bottom: 1.25rem;
    }
    
    .blog-sidebar .card-header {
        padding: 0.75rem 1rem;
    }
    
    .blog-sidebar .card-header h4 {
        font-size: 1.15rem;
        margin: 0;
    }
    
    .blog-sidebar .card-body {
        padding: 0.75rem 1rem;
    }
    
    .blog-sidebar .list-unstyled li {
        margin-bottom: 0.5rem;
    }
    
    .blog-sidebar .list-unstyled li:last-child {
        margin-bottom: 0;
    }
    
    /* Kompaktnější vyhledávání */
    .search-container {
        margin-bottom: 1rem;
    }
    
    .search-container .input-group {
        width: 100%;
    }
    
    .blog-main-content {
        min-height: 200px;
    }
    
    .page-header {
        margin-bottom: 1rem;
    }
    
    .page-header h1 {
        margin-bottom: 0.5rem;
    }
</style>

<div class="container mt-3">
    <div class="row">
        <!-- Main content -->
        <div class="col-lg-8">
            <div class="page-header d-flex justify-content-between align-items-center flex-wrap">
                <h1>
                    Blog
                    @if (!string.IsNullOrEmpty(Tag))
                    {
                        <small class="text-muted"> - Tag: @Tag</small>
                    }
                    @if (Year > 0 && Month > 0)
                    {
                        <small class="text-muted"> - Archive: @(new DateTime(Year, Month, 1).ToString("MMMM yyyy"))</small>
                    }
                </h1>
                
                <!-- Search bar - inline with header -->
                <div class="search-container">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Hledejte v blogu..." 
                               @bind="searchTerm" @bind:event="oninput" 
                               @onkeyup="HandleSearchKeyPress">
                        <button class="btn btn-primary" type="button" @onclick="Search">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="blog-main-content">
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center my-2">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Načítání...</span>
                        </div>
                    </div>
                }
                else if (!blogPosts.Any())
                {
                    <div class="alert alert-info py-2" role="alert">
                        <h5 class="alert-heading">Žádné příspěvky</h5>
                        <p class="mb-0">Nebyly nalezeny žádné příspěvky odpovídající vašemu vyhledávání.</p>
                    </div>
                }
                else
                {
                    @if (isSearchActive && !string.IsNullOrWhiteSpace(searchTerm))
                    {
                        <div class="alert alert-light py-2 mt-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Výsledky vyhledávání pro: <strong>"@searchTerm"</strong> (@totalPosts)</span>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="ClearSearch">
                                    <i class="bi bi-x-lg"></i> Zrušit vyhledávání
                                </button>
                            </div>
                        </div>
                    }

                    <!-- Blog posts -->
                    @foreach (var post in blogPosts)
                    {
                        <div class="card blog-card">
                            <div class="card-body">
                                <h2 class="blog-post-title">@post.Title</h2>
                                <div class="blog-post-meta text-muted">
                                    @post.CreatedAt.ToString("d. MMMM yyyy")
                                    @if (post.Tags.Any())
                                    {
                                        <span class="ms-1">|</span>
                                        @foreach (var tag in post.Tags)
                                        {
                                            <a href="/blog/tag/@tag" class="badge bg-secondary ms-1 text-decoration-none">@tag</a>
                                        }
                                    }
                                </div>
                                <p class="card-text">@post.Description</p>
                                <a href="/blog/@post.Slug" class="btn btn-sm btn-primary">Číst více</a>
                            </div>
                        </div>
                    }
                
                    <!-- Pagination -->
                    @if (totalPages > 1)
                    {
                        <nav aria-label="Page navigation" class="mt-3">
                            <ul class="pagination pagination-sm justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="javascript:void(0)" @onclick="PreviousPage">Předchozí</a>
                                </li>
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                        <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(pageNumber)">@pageNumber</a>
                                    </li>
                                }
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <a class="page-link" href="javascript:void(0)" @onclick="NextPage">Další</a>
                                </li>
                            </ul>
                        </nav>
                    }
                }
            </div>
        </div>
        
        <!-- Sidebar -->
        <div class="col-lg-4">
            <div class="blog-sidebar">                
                <!-- Popular Tags -->
                <div class="card">
                    <div class="card-header">
                        <h4>Populární tagy</h4>
                    </div>
                    <div class="card-body">
                        @if (popularTags.Any())
                        {
                            <div class="d-flex flex-wrap gap-1">
                                @foreach (var tag in popularTags)
                                {
                                    <a href="/blog/tag/@tag" class="badge bg-secondary text-decoration-none">@tag</a>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted mb-0">Zatím nejsou žádné tagy</p>
                        }
                    </div>
                </div>
                
                <!-- Archive -->
                <div class="card">
                    <div class="card-header">
                        <h4>Archiv</h4>
                    </div>
                    <div class="card-body">
                        @if (archiveMonths.Any())
                        {
                            <ul class="list-unstyled mb-0">
                                @foreach (var month in archiveMonths)
                                {
                                    <li>
                                        <a href="/blog/archive/@month.Year/@month.Month">
                                            @month.ToString("MMMM yyyy")
                                        </a>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="text-muted mb-0">Zatím není žádný archiv</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Tag { get; set; }
    
    [Parameter]
    public int Year { get; set; }
    
    [Parameter]
    public int Month { get; set; }
    
    private string searchTerm = "";
    private bool isSearching = false;
    private bool isLoading = true;
    
    private int currentPage = 1;
    private int postsPerPage = 10;
    private int totalPosts = 0;
    private int totalPages => (int)Math.Ceiling((double)totalPosts / postsPerPage);
    
    private List<BlogViewModel> blogPosts = new List<BlogViewModel>();
    private List<string> popularTags = new List<string>();
    private List<DateTime> archiveMonths = new List<DateTime>();
    
    // Jazyk pro blog, můžeme později rozšířit pro vícejazyčnost
    private string languageCode = "cs";
    
    private bool isSearchActive = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Pokud se změní URL parametry (Tag, Year, Month), resetujeme stránku a znovu načteme data
        currentPage = 1;
        await LoadDataAsync();
    }
    
    private async Task LoadDataAsync()
    {
        isLoading = true;
        
        try
        {
            // Načtení příspěvků podle parametrů URL
            if (!string.IsNullOrEmpty(Tag))
            {
                var (posts, count) = await LoadPostsByTagAsync(Tag);
                blogPosts = posts;
                totalPosts = count;
                // Zrušíme vyhledávání, jelikož jsme v zobrazení podle tagu
                isSearchActive = false;
            }
            else if (Year > 0 && Month > 0)
            {
                var (posts, count) = await LoadPostsByMonthAsync(Year, Month);
                blogPosts = posts;
                totalPosts = count;
                // Zrušíme vyhledávání, jelikož jsme v zobrazení podle měsíce
                isSearchActive = false;
            }
            else if (isSearching && !string.IsNullOrWhiteSpace(searchTerm))
            {
                // Aktivní vyhledávání
                var (posts, count) = await LoadPostsBySearchAsync(searchTerm);
                blogPosts = posts;
                totalPosts = count;
                isSearchActive = true;
            }
            else
            {
                // Standardní zobrazení všech příspěvků
                var (posts, count) = await LoadAllPostsAsync();
                blogPosts = posts;
                totalPosts = count;
                isSearchActive = false;
            }
            
            // Načtení populárních tagů pro sidebar
            popularTags = await BlogService.GetPopularTagsAsync(languageCode);
            
            // Načtení archivních měsíců pro sidebar
            archiveMonths = await BlogService.GetArchiveMonthsAsync(languageCode);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blog data: {ex.Message}");
            // Můžeme zde implementovat lepší zpracování chyb
        }
        finally
        {
            isLoading = false;
            isSearching = false; // Reset proměnné po dokončení načítání
        }
    }
    
    private async Task<(List<BlogViewModel>, int)> LoadAllPostsAsync()
    {
        var posts = await BlogService.GetPublishedBlogsAsync(
            languageCode, 
            skip: (currentPage - 1) * postsPerPage, 
            take: postsPerPage);
            
        var totalCount = await BlogService.GetPublishedBlogsCountAsync(languageCode);
        
        return (posts.Select(p => MapBlogContentToViewModel(p)).ToList(), totalCount);
    }
    
    private async Task<(List<BlogViewModel>, int)> LoadPostsByTagAsync(string tag)
    {
        var posts = await BlogService.GetBlogsByTagAsync(
            languageCode,
            tag,
            skip: (currentPage - 1) * postsPerPage, 
            take: postsPerPage);
            
        var totalCount = await BlogService.GetBlogsByTagCountAsync(languageCode, tag);
        
        return (posts.Select(p => MapBlogContentToViewModel(p)).ToList(), totalCount);
    }
    
    private async Task<(List<BlogViewModel>, int)> LoadPostsByMonthAsync(int year, int month)
    {
        var posts = await BlogService.GetBlogsByMonthAsync(
            languageCode,
            year,
            month,
            skip: (currentPage - 1) * postsPerPage, 
            take: postsPerPage);
            
        var totalCount = await BlogService.GetBlogsByMonthCountAsync(languageCode, year, month);
        
        return (posts.Select(p => MapBlogContentToViewModel(p)).ToList(), totalCount);
    }
    
    private async Task<(List<BlogViewModel>, int)> LoadPostsBySearchAsync(string term)
    {
        var posts = await BlogService.SearchBlogsAsync(
            languageCode,
            term,
            skip: (currentPage - 1) * postsPerPage, 
            take: postsPerPage);
            
        var totalCount = await BlogService.SearchBlogsCountAsync(languageCode, term);
        
        return (posts.Select(p => MapBlogContentToViewModel(p)).ToList(), totalCount);
    }
    
    private BlogViewModel MapBlogContentToViewModel(BlogContent blogContent)
    {
        return new BlogViewModel
        {
            Id = blogContent.Id,
            BlogId = blogContent.BlogId,
            Title = blogContent.Title,
            Slug = GenerateSlug(blogContent.Title),
            Description = blogContent.Description ?? "",
            Content = blogContent.Content,
            Tags = ParseTags(blogContent.Tags),
            CreatedAt = blogContent.CreatedAt,
            UpdatedAt = blogContent.UpdatedAt ?? DateTime.UtcNow,
            IsPublished = blogContent.IsPublished
        };
    }
    
    private List<string> ParseTags(string? tags)
    {
        if (string.IsNullOrEmpty(tags))
            return new List<string>();
            
        return tags.Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(t => t.Trim())
            .Where(t => !string.IsNullOrEmpty(t))
            .ToList();
    }
    
    private string GenerateSlug(string title)
    {
        // Jednoduchá implementace pro vytvoření slugu z titulku (stejná jako v BlogService)
        return title
            .ToLowerInvariant()
            .Replace(" ", "-")
            .Replace("č", "c")
            .Replace("ř", "r")
            .Replace("ž", "z")
            .Replace("š", "s")
            .Replace("ě", "e")
            .Replace("ť", "t")
            .Replace("ď", "d")
            .Replace("ň", "n")
            .Replace("ú", "u")
            .Replace("ů", "u")
            .Replace("á", "a")
            .Replace("í", "i")
            .Replace("é", "e")
            .Replace("ý", "y")
            .Replace("ó", "o");
    }
    
    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                if (isSearchActive)
                {
                    await ClearSearch();
                }
                return;
            }
            
            isSearching = true;
            isSearchActive = true;
            currentPage = 1;
            await LoadDataAsync();
        }
    }
    
    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            if (isSearchActive)
            {
                await ClearSearch();
            }
            return;
        }
        
        isSearching = true;
        isSearchActive = true;
        currentPage = 1;
        await LoadDataAsync();
    }
    
    private async Task ClearSearch()
    {
        searchTerm = "";
        isSearching = false;
        isSearchActive = false;
        currentPage = 1;
        await LoadDataAsync();
    }
    
    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadDataAsync();
        }
    }
    
    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadDataAsync();
        }
    }
    
    private async Task GoToPage(int pageNumber)
    {
        currentPage = pageNumber;
        await LoadDataAsync();
    }
}
