// <auto-generated />
using System;
using GrznarAi.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GrznarAi.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250417123652_SeedHomePageLocalization")]
    partial class SeedHomePageLocalization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrznarAi.Web.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GrznarAi.Web.Data.LocalizationString", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ValueCs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("LocalizationStrings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Home page title",
                            Key = "HomePage.Title",
                            ValueCs = "GrznarAI - Osobní Web",
                            ValueEn = "GrznarAI - Personal Website"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Home Carousel 1 Title",
                            Key = "HomePage.Carousel1.Title",
                            ValueCs = "Vítejte na GrznarAI",
                            ValueEn = "Welcome to GrznarAI"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Home Carousel 1 Lead Text",
                            Key = "HomePage.Carousel1.Lead",
                            ValueCs = "Osobní web s blogem, projekty a meteo daty",
                            ValueEn = "Personal website with blog, projects and meteo data"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Carousel Button - Read Blog",
                            Key = "HomePage.Carousel.ReadBlogButton",
                            ValueCs = "Číst Blog",
                            ValueEn = "Read Blog"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Carousel Button - View Projects",
                            Key = "HomePage.Carousel.ViewProjectsButton",
                            ValueCs = "Zobrazit Projekty",
                            ValueEn = "View Projects"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Home Carousel 2 Title",
                            Key = "HomePage.Carousel2.Title",
                            ValueCs = "Prozkoumejte Mé Projekty",
                            ValueEn = "Explore My Projects"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Home Carousel 2 Lead Text",
                            Key = "HomePage.Carousel2.Lead",
                            ValueCs = "Podívejte se na mé nejnovější GitHub projekty a experimenty",
                            ValueEn = "Check out my latest GitHub projects and experiments"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Home Carousel 3 Title",
                            Key = "HomePage.Carousel3.Title",
                            ValueCs = "Meteo Data",
                            ValueEn = "Meteo Data"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Home Carousel 3 Lead Text",
                            Key = "HomePage.Carousel3.Lead",
                            ValueCs = "Prozkoumejte statistiky počasí z mých osobních meteostanic",
                            ValueEn = "Explore weather statistics from my personal meteo stations"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Carousel Button - View Meteo Data",
                            Key = "HomePage.Carousel.ViewMeteoButton",
                            ValueCs = "Zobrazit Meteo Data",
                            ValueEn = "View Meteo Data"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Carousel Control - Previous",
                            Key = "HomePage.Carousel.Previous",
                            ValueCs = "Předchozí",
                            ValueEn = "Previous"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Carousel Control - Next",
                            Key = "HomePage.Carousel.Next",
                            ValueCs = "Další",
                            ValueEn = "Next"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Featured Card Title - Blog",
                            Key = "HomePage.Featured.Blog.Title",
                            ValueCs = "Blog",
                            ValueEn = "Blog"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Featured Card Text - Blog",
                            Key = "HomePage.Featured.Blog.Text",
                            ValueCs = "Sdílejte články ve formátu Markdown s full-text vyhledáváním a komentáři.",
                            ValueEn = "Share articles in Markdown format with full-text search and commenting capabilities."
                        },
                        new
                        {
                            Id = 15,
                            Description = "Featured Card Title - Projects",
                            Key = "HomePage.Featured.Projects.Title",
                            ValueCs = "Projekty",
                            ValueEn = "Projects"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Featured Card Text - Projects",
                            Key = "HomePage.Featured.Projects.Text",
                            ValueCs = "Prozkoumejte mé GitHub projekty s dokumentací, changelogy a demy.",
                            ValueEn = "Explore my GitHub projects with documentation, changelogs, and demos."
                        },
                        new
                        {
                            Id = 17,
                            Description = "Featured Card Title - Meteo",
                            Key = "HomePage.Featured.Meteo.Title",
                            ValueCs = "Meteo Data",
                            ValueEn = "Meteo Data"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Featured Card Text - Meteo",
                            Key = "HomePage.Featured.Meteo.Text",
                            ValueCs = "Získejte přístup ke statistikám počasí a datům z osobních meteostanic.",
                            ValueEn = "Access weather statistics and data from personal meteo stations."
                        },
                        new
                        {
                            Id = 19,
                            Description = "Latest Posts Section Title",
                            Key = "HomePage.LatestPosts.Title",
                            ValueCs = "Nejnovější Příspěvky na Blogu",
                            ValueEn = "Latest Blog Posts"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Latest Posts Button - Read More",
                            Key = "HomePage.LatestPosts.ReadMore",
                            ValueCs = "Číst Více",
                            ValueEn = "Read More"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Latest Posts Button - View All",
                            Key = "HomePage.LatestPosts.ViewAll",
                            ValueCs = "Zobrazit Všechny Příspěvky",
                            ValueEn = "View All Posts"
                        });
                });

            modelBuilder.Entity("GrznarAi.Web.Data.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GitHubUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GrznarAi.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GrznarAi.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrznarAi.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GrznarAi.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
