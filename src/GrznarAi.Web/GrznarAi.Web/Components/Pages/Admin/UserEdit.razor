@page "/admin/administration/users/edit/{UserId}"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin")]
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject ILocalizationService Localizer
@inject NavigationManager NavigationManager

<PageTitle>@Localizer.GetString("Administration.Users.Edit")</PageTitle>

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2>@Localizer.GetString("Administration.Users.Edit")</h2>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">@Localizer.GetString("Administration.Loading")</span>
                    </div>
                </div>
            }
            else
            {
                <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-4" />

                    <div class="mb-3">
                        <label class="form-label" for="userName">@Localizer.GetString("Administration.Users.Username")</label>
                        <InputText id="userName" class="form-control" @bind-Value="model.UserName" />
                        <ValidationMessage For="() => model.UserName" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label" for="email">@Localizer.GetString("Administration.Users.Email")</label>
                        <InputText id="email" class="form-control" @bind-Value="model.Email" />
                        <ValidationMessage For="() => model.Email" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="emailConfirmed" class="form-check-input" @bind-Value="model.EmailConfirmed" />
                        <label class="form-check-label" for="emailConfirmed">
                            @Localizer.GetString("Administration.Users.EmailConfirmed")
                        </label>
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="lockoutEnabled" class="form-check-input" @bind-Value="model.LockoutEnabled" />
                        <label class="form-check-label" for="lockoutEnabled">
                            @Localizer.GetString("Administration.Users.LockoutEnabled")
                        </label>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">@Localizer.GetString("Administration.Users.Roles")</label>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var role in availableRoles)
                            {
                                <div class="form-check">
                                    <input 
                                        class="form-check-input" 
                                        type="checkbox" 
                                        id="role_@role" 
                                        checked="@IsInRole(role)" 
                                        @onchange="@(e => ToggleRole(role, (bool)e.Value!))" />
                                    <label class="form-check-label" for="role_@role">@role</label>
                                </div>
                            }
                        </div>
                    </div>

                    @if (showPasswordFields)
                    {
                        <div class="mb-3">
                            <label class="form-label" for="newPassword">Nové heslo</label>
                            <InputText id="newPassword" type="password" class="form-control" @bind-Value="model.NewPassword" />
                            <ValidationMessage For="() => model.NewPassword" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label" for="confirmPassword">Potvrzení hesla</label>
                            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="model.ConfirmPassword" />
                            <ValidationMessage For="() => model.ConfirmPassword" />
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordFields">
                                <i class="bi bi-key me-2"></i>Změnit heslo
                            </button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle me-2"></i>@successMessage
                        </div>
                    }

                    <div class="mt-4 d-flex gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                @Localizer.GetString("Administration.Saving")
                            }
                            else
                            {
                                <i class="bi bi-check-lg me-2"></i>
                                @Localizer.GetString("Administration.Save")
                            }
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="GoBack">
                            <i class="bi bi-arrow-left me-2"></i>@Localizer.GetString("Administration.Back")
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = default!;

    private UserEditModel model = new();
    private List<string> availableRoles = new();
    private List<string> userRoles = new();
    private bool isLoading = true;
    private bool isSaving;
    private string? errorMessage;
    private string? successMessage;
    private bool showPasswordFields;

    private class UserEditModel
    {
        [Required(ErrorMessage = "Uživatelské jméno je povinné")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Email je povinný")]
        [EmailAddress(ErrorMessage = "Neplatný formát emailu")]
        public string Email { get; set; } = "";

        public bool EmailConfirmed { get; set; }
        public bool LockoutEnabled { get; set; }
        
        [StringLength(100, ErrorMessage = "Heslo musí být dlouhé alespoň {2} znaků.", MinimumLength = 6)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{6,}$", 
            ErrorMessage = "Heslo musí obsahovat velké písmeno, malé písmeno, číslici a speciální znak.")]
        public string? NewPassword { get; set; }
        
        [Compare("NewPassword", ErrorMessage = "Hesla se neshodují")]
        public string? ConfirmPassword { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRolesAsync();
        await LoadUserAsync();
    }

    private async Task LoadRolesAsync()
    {
        availableRoles = await RoleManager.Roles.Select(r => r.Name).Where(n => n != null).Cast<string>().ToListAsync();
    }

    private async Task LoadUserAsync()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;
        
        try
        {
            var user = await UserManager.FindByIdAsync(UserId);
            if (user == null)
            {
                NavigationManager.NavigateTo("/admin/administration/users");
                return;
            }

            model = new UserEditModel
            {
                UserName = user.UserName ?? "",
                Email = user.Email ?? "",
                EmailConfirmed = user.EmailConfirmed,
                LockoutEnabled = user.LockoutEnabled
            };

            userRoles = (await UserManager.GetRolesAsync(user)).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Chyba při načítání uživatele: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsInRole(string role)
    {
        return userRoles.Contains(role);
    }

    private void ToggleRole(string role, bool isChecked)
    {
        if (isChecked && !userRoles.Contains(role))
        {
            userRoles.Add(role);
        }
        else if (!isChecked && userRoles.Contains(role))
        {
            userRoles.Remove(role);
        }
    }

    private void TogglePasswordFields()
    {
        showPasswordFields = !showPasswordFields;
        if (!showPasswordFields)
        {
            model.NewPassword = null;
            model.ConfirmPassword = null;
        }
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            var user = await UserManager.FindByIdAsync(UserId);
            if (user == null)
            {
                errorMessage = "Uživatel nebyl nalezen.";
                return;
            }

            user.UserName = model.UserName;
            user.Email = model.Email;
            user.EmailConfirmed = model.EmailConfirmed;
            user.LockoutEnabled = model.LockoutEnabled;

            // Update user details
            var updateResult = await UserManager.UpdateAsync(user);
            if (!updateResult.Succeeded)
            {
                errorMessage = string.Join(", ", updateResult.Errors.Select(e => e.Description));
                return;
            }

            // Update password if provided
            if (!string.IsNullOrEmpty(model.NewPassword))
            {
                var token = await UserManager.GeneratePasswordResetTokenAsync(user);
                var resetResult = await UserManager.ResetPasswordAsync(user, token, model.NewPassword);
                
                if (!resetResult.Succeeded)
                {
                    errorMessage = string.Join(", ", resetResult.Errors.Select(e => e.Description));
                    return;
                }
            }

            // Update roles
            var currentRoles = await UserManager.GetRolesAsync(user);
            
            // Remove roles that are no longer assigned
            var rolesToRemove = currentRoles.Except(userRoles).ToList();
            if (rolesToRemove.Any())
            {
                await UserManager.RemoveFromRolesAsync(user, rolesToRemove);
            }
            
            // Add new roles
            var rolesToAdd = userRoles.Except(currentRoles).ToList();
            if (rolesToAdd.Any())
            {
                await UserManager.AddToRolesAsync(user, rolesToAdd);
            }

            successMessage = "Uživatel byl úspěšně aktualizován.";
            showPasswordFields = false;
            model.NewPassword = null;
            model.ConfirmPassword = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Chyba při ukládání uživatele: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/admin/administration/users");
    }
} 