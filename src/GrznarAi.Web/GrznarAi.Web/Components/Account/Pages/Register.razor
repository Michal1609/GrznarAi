@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using Serilog

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IJSRuntime JSRuntime
@inject IReCaptchaService ReCaptchaService

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-lg-6">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="small text-muted">
                    <i class="bi bi-shield-check me-1"></i> This form is protected by Google reCAPTCHA.
                </div>
                <button type="submit" class="btn btn-lg btn-primary">Register</button>
            </div>
            @if (recaptchaError)
            {
                <div class="alert alert-danger py-1 mb-3 small">
                    <i class="bi bi-exclamation-triangle-fill me-1"></i> Verification that you are not a robot failed. Please try again.
                </div>
            }
        </EditForm>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private bool recaptchaInitialized = false;
    private bool recaptchaError = false;

    // Stejný způsob logování jako v Program.cs
    private static readonly Serilog.ILogger log = new LoggerConfiguration()
        .WriteTo.File("log.txt", rollingInterval: RollingInterval.Day)
        .CreateLogger();

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Inicializace Google reCAPTCHA v3
                await JSRuntime.InvokeVoidAsync("initializeRecaptcha", ReCaptchaService.GetSiteKey());
                recaptchaInitialized = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error initializing reCAPTCHA");
            }
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task RegisterUser(EditContext editContext)
    {
        log.Information("===== ZAČÁTEK REGISTRACE UŽIVATELE =====");
        log.Information("Email pro registraci: {Email}", Input.Email);
        
        recaptchaError = false;

        // Verify reCAPTCHA first
        bool isHuman = true;
        if (recaptchaInitialized)
        {
            try
            {
                log.Information("Začínám verifikaci reCAPTCHA");
                var recaptchaToken = await JSRuntime.InvokeAsync<string>("executeRecaptcha", "register_submit");
                log.Information("ReCAPTCHA token získán, délka: {Length}", recaptchaToken?.Length ?? 0);
                
                isHuman = await ReCaptchaService.VerifyAsync(recaptchaToken);
                log.Information("Výsledek ověření reCAPTCHA: {IsHuman}", isHuman);
            }
            catch (Exception ex)
            {
                log.Error(ex, "Chyba při ověřování reCAPTCHA");
                // In case of reCAPTCHA service error, assume it's a human
                isHuman = true;
            }
        }
        else
        {
            log.Warning("reCAPTCHA není inicializována, přeskakuji ověření");
        }

        if (!isHuman)
        {
            recaptchaError = true;
            log.Warning("reCAPTCHA ověření selhalo pro e-mail: {Email}", Input.Email);
            return;
        }

        log.Information("Vytvářím uživatelský účet pro e-mail: {Email}", Input.Email);
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        log.Information("Ukládám uživatelské přihlašovací údaje pro {Email}", Input.Email);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            foreach (var error in result.Errors)
            {
                log.Error("Chyba při vytváření uživatele: {Code} - {Description}", error.Code, error.Description);
            }
            log.Error("Vytváření uživatelského účtu selhalo");
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        log.Information("Uživatel {UserId} byl úspěšně vytvořen", userId);

        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        
        log.Information("Vygenerován potvrzovací token - UserId: {UserId}, Délka tokenu: {CodeLength}", 
            userId, code?.Length ?? 0);
        
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        
        log.Information("Vytvořen potvrzovací odkaz: {BaseUrl}?userId={UserId}&code=***&returnUrl={ReturnUrl}", 
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri, userId, ReturnUrl);

        try
        {
            log.Information("===== ZAČÁTEK ODESÍLÁNÍ E-MAILU =====");
            log.Information("Pokus o odeslání potvrzovacího e-mailu na adresu {Email}", Input.Email);
            
            // Detailní diagnostické informace
            log.Information("Parametry e-mailu:");
            log.Information(" - Příjemce: {Recipient}", Input.Email);
            log.Information(" - UserId: {UserId}", userId);
            log.Information(" - Délka potvrzovacího odkazu: {UrlLength}", callbackUrl.Length);
            log.Information(" - Určení systému: {OS}", Environment.OSVersion);
            log.Information(" - Framework: {Framework}", Environment.Version);
            
            await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
            
            log.Information("Potvrzovací e-mail byl úspěšně odeslán na adresu {Email}", Input.Email);
            log.Information("===== E-MAIL ÚSPĚŠNĚ ODESLÁN =====");
        }
        catch (Exception ex)
        {
            log.Error(ex, "===== CHYBA PŘI ODESÍLÁNÍ E-MAILU =====");
            log.Error("Nepodařilo se odeslat potvrzovací e-mail na adresu {Email}: {ErrorMessage}", 
                Input.Email, ex.Message);
            
            if (ex.InnerException != null)
            {
                log.Error("Vnitřní výjimka: {InnerExceptionType}: {InnerErrorMessage}", 
                    ex.InnerException.GetType().Name, ex.InnerException.Message);
                
                // Přidání extra detailů pro SMTP výjimky
                if (ex.InnerException is System.Net.Mail.SmtpException smtpEx)
                {
                    log.Error("SMTP Status kód: {StatusCode}", smtpEx.StatusCode);
                    log.Error("SMTP Server Response: {Response}", smtpEx.Message);
                }
            }
            
            // Pokus o získání zásobníku volání
            log.Error("Stack Trace: {StackTrace}", ex.StackTrace);
            
            // Pokračování v registraci navzdory chybě e-mailu
            log.Warning("Pokračuji v procesu registrace navzdory chybě e-mailu pro {Email}", Input.Email);
        }

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            log.Information("Přesměrovávám uživatele {Email} na stránku RegisterConfirmation", Input.Email);
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        log.Information("Uživatel {Email} byl přihlášen po registraci", Input.Email);
        log.Information("===== KONEC REGISTRACE UŽIVATELE =====");
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
