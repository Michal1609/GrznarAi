@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<div class="page">
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container">
            <a class="navbar-brand" href="/">
                <img src="/images/logo.svg" alt="GrznarAI Logo" class="logo" />
                <span>GrznarAI</span>
            </a>

            <button type="button" class="navbar-toggler" @onclick="ToggleNavbar">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse @NavbarCssClass" id="navbarNav">
                <NavMenu />

                <div class="ms-auto d-flex align-items-center">
                    <button @onclick="ToggleTheme" class="theme-toggle me-3" title="@(isDarkTheme ? "Switch to light mode" : "Switch to dark mode")">
                        @if (isDarkTheme)
                        {
                            <i class="bi bi-sun-fill"></i>
                        }
                        else
                        {
                            <i class="bi bi-moon-fill"></i>
                        }
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <main>

        <article class="content">
            @Body
        </article>

        <footer class="footer text-center">
            <div class="container">
                <div class="row">
                    <div class="col-md-4">
                        <h5>GrznarAI</h5>
                        <p class="text-muted">Personal website with blog, projects and meteo data.</p>
                    </div>
                    <div class="col-md-4">
                        <h5>Links</h5>
                        <ul class="list-unstyled">
                            <li><a href="/">Home</a></li>
                            <li><a href="/blog">Blog</a></li>
                            <li><a href="/projects">Projects</a></li>
                            <li><a href="/meteo">Meteo</a></li>
                        </ul>
                    </div>
                    <div class="col-md-4">
                        <h5>Connect</h5>
                        <ul class="list-unstyled">
                            <li><a href="https://github.com/Michal1609" target="_blank">GitHub</a></li>
                            <li><a href="/contact">Contact</a></li>
                        </ul>
                    </div>
                </div>
                <div class="mt-4">
                    <p class="text-muted">&copy; @DateTime.Now.Year GrznarAI. All rights reserved.</p>
                </div>
            </div>
        </footer>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<script src="js/site.js"></script>
<script src="js/carousel.js"></script>

@code {
    private bool navbarVisible = false;
    private bool isDarkTheme = false;

    private string NavbarCssClass => navbarVisible ? "show" : "";

    private void ToggleNavbar()
    {
        navbarVisible = !navbarVisible;
    }

    private async Task ToggleTheme()
    {
        try
        {
            isDarkTheme = !isDarkTheme;
            bool success = await JSRuntime.InvokeAsync<bool>("toggleTheme", isDarkTheme);
            Console.WriteLine($"Theme toggled to: {(isDarkTheme ? "dark" : "light")}, Success: {success}");

            // Force re-render
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling theme: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check system preference for dark mode
            isDarkTheme = await JSRuntime.InvokeAsync<bool>("isDarkModePreferred");
            Console.WriteLine($"Theme preference detected in MainLayout: {(isDarkTheme ? "dark" : "light")}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error detecting theme preference: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Apply theme
                bool success = await JSRuntime.InvokeAsync<bool>("toggleTheme", isDarkTheme);
                Console.WriteLine($"Theme initialized in MainLayout: {(isDarkTheme ? "dark" : "light")}, Success: {success}");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing theme: {ex.Message}");
            }
        }
    }
}