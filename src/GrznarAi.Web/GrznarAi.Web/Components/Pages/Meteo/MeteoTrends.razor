@page "/meteo/trends"
@rendermode InteractiveServer
@using GrznarAi.Web.Services.Weather
@using System.Globalization
@inject ITemperatureHistoryService TemperatureHistoryService
@inject IHumidityHistoryService HumidityHistoryService
@inject IPressureHistoryService PressureHistoryService
@inject IWindSpeedHistoryService WindSpeedHistoryService
@inject IWindDirectionHistoryService WindDirectionHistoryService
@inject IRainHistoryService RainHistoryService
@inject ISolarRadiationHistoryService SolarRadiationHistoryService
@inject IUVIndexHistoryService UVIndexHistoryService
@inject ILogger<MeteoTrends> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Meteo Trends - GrznarAI</PageTitle>

<div class="container-fluid">
    <h1>Meteo Trends</h1>
    
    <div class="row mb-3">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Teplotni historie</h5>
                </div>
                <div class="card-body">
                    <!-- Přepínače období s ikonami -->
                    <div class="period-tabs mb-4">
                        <button class="period-btn @(SelectedPeriod == "day" ? "active" : "")" @onclick="ChangePeriodDay">
                            <i class="bi bi-calendar-day"></i> Den
                        </button>
                        <button class="period-btn @(SelectedPeriod == "week" ? "active" : "")" @onclick="ChangePeriodWeek">
                            <i class="bi bi-calendar-week"></i> Týden
                        </button>
                        <button class="period-btn @(SelectedPeriod == "month" ? "active" : "")" @onclick="ChangePeriodMonth">
                            <i class="bi bi-calendar-month"></i> Měsíc
                        </button>
                        <button class="period-btn @(SelectedPeriod == "year" ? "active" : "")" @onclick="ChangePeriodYear">
                            <i class="bi bi-calendar-range"></i> Rok
                        </button>
                    </div>

                    <!-- Datumový výběr -->
                    <div class="date-selector mb-4">
                        @switch (SelectedPeriod)
                        {
                            case "day":
                                <div class="date-nav-container">
                                    <button class="date-nav-btn" @onclick="PreviousDay">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                    <div class="date-display">
                                        <input type="date" class="form-control date-input" @bind="SelectedDate" @bind:format="yyyy-MM-dd" @bind:after="RefreshData" />
                                    </div>
                                    <button class="date-nav-btn" @onclick="NextDay">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                                break;
                            case "week":
                                <div class="date-nav-container">
                                    <button class="date-nav-btn" @onclick="PreviousWeek">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                    <div class="date-display date-picker-container">
                                        <div class="date-picker-text" @onclick="ToggleWeekPicker">
                                            @($"{WeekStartDate:dd.MM.yyyy} - {WeekEndDate:dd.MM.yyyy}")
                                        </div>
                                        @if (ShowWeekPicker)
                                        {
                                            <div class="date-picker-dropdown">
                                                <input type="date" class="form-control date-input" @bind="WeekPickerDate" @bind:format="yyyy-MM-dd" />
                                                <button class="btn btn-sm btn-primary mt-2" @onclick="SelectWeek">Vybrat týden</button>
                                            </div>
                                        }
                                    </div>
                                    <button class="date-nav-btn" @onclick="NextWeek">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                                break;
                            case "month":
                                <div class="date-nav-container">
                                    <button class="date-nav-btn" @onclick="PreviousMonth">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                    <div class="date-display date-picker-container">
                                        <div class="date-picker-text" @onclick="ToggleMonthPicker">
                                            @(new DateTime(SelectedDate.Year, SelectedDate.Month, 1).ToString("MMMM yyyy", CultureInfo.CreateSpecificCulture("cs-CZ")))
                                        </div>
                                        @if (ShowMonthPicker)
                                        {
                                            <div class="date-picker-dropdown">
                                                <div class="d-flex">
                                                    <select class="form-select me-2" @bind="SelectedMonthValue">
                                                        @for (int m = 1; m <= 12; m++)
                                                        {
                                                            <option value="@m">@(new DateTime(2000, m, 1).ToString("MMMM", CultureInfo.CreateSpecificCulture("cs-CZ")))</option>
                                                        }
                                                    </select>
                                                    <select class="form-select" @bind="SelectedYearValue">
                                                        @for (int y = 2021; y <= DateTime.Now.Year; y++)
                                                        {
                                                            <option value="@y">@y</option>
                                                        }
                                                    </select>
                                                </div>
                                                <button class="btn btn-sm btn-primary mt-2" @onclick="SelectMonth">Vybrat měsíc</button>
                                            </div>
                                        }
                                    </div>
                                    <button class="date-nav-btn" @onclick="NextMonth">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                                break;
                            case "year":
                                <div class="date-nav-container">
                                    <button class="date-nav-btn" @onclick="PreviousYear">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                    <div class="date-display date-picker-container">
                                        <div class="date-picker-text" @onclick="ToggleYearPicker">
                                            @SelectedDate.Year
                                        </div>
                                        @if (ShowYearPicker)
                                        {
                                            <div class="date-picker-dropdown">
                                                <select class="form-select" @bind="SelectedYearForYearView">
                                                    @for (int y = 2021; y <= DateTime.Now.Year; y++)
                                                    {
                                                        <option value="@y">@y</option>
                                                    }
                                                </select>
                                                <button class="btn btn-sm btn-primary mt-2" @onclick="SelectYear">Vybrat rok</button>
                                            </div>
                                        }
                                    </div>
                                    <button class="date-nav-btn" @onclick="NextYear">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                                break;
                        }
                    </div>

                    @if (IsLoading)
                    {
                        <div class="d-flex justify-content-center my-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Nacitani...</span>
                            </div>
                        </div>
                    }
                    else if (TemperatureData?.Count > 0)
                    {
                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Teplotní graf</h5>
                                <div class="temperature-summary">
                                    <span class="badge text-bg-info me-2">Min: @TemperatureSummary.Min.ToString("F1") °C</span>
                                    <span class="badge text-bg-warning me-2">Avg: @TemperatureSummary.Avg.ToString("F1") °C</span>
                                    <span class="badge text-bg-danger">Max: @TemperatureSummary.Max.ToString("F1") °C</span>
                                </div>
                            </div>
                            <div id="temperature-chart" style="height: 400px;"></div>
                        </div>

                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Graf vlhkosti</h5>
                                <div class="humidity-summary">
                                    <span class="badge text-bg-info me-2">Min: @HumiditySummary.Min.ToString("F1") %</span>
                                    <span class="badge text-bg-warning me-2">Avg: @HumiditySummary.Avg.ToString("F1") %</span>
                                    <span class="badge text-bg-danger">Max: @HumiditySummary.Max.ToString("F1") %</span>
                                </div>
                            </div>
                            <div id="humidity-chart" style="height: 400px;"></div>
                        </div>
                        
                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Graf atmosférického tlaku</h5>
                                <div class="pressure-summary">
                                    <span class="badge text-bg-info me-2">Min: @PressureSummary.Min.ToString("F1") hPa</span>
                                    <span class="badge text-bg-warning me-2">Avg: @PressureSummary.Avg.ToString("F1") hPa</span>
                                    <span class="badge text-bg-danger">Max: @PressureSummary.Max.ToString("F1") hPa</span>
                                </div>
                            </div>
                            <div id="pressure-chart" style="height: 400px;"></div>
                        </div>
                        
                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Graf rychlosti větru</h5>
                                <div class="wind-speed-summary">
                                    <span class="badge text-bg-info me-2">Min: @((WindSpeedSummary.Min * 3.6).ToString("F1")) km/h</span>
                                    <span class="badge text-bg-warning me-2">Avg: @((WindSpeedSummary.Avg * 3.6).ToString("F1")) km/h</span>
                                    <span class="badge text-bg-danger me-2">Max: @((WindSpeedSummary.Max * 3.6).ToString("F1")) km/h</span>
                                    <span class="badge text-bg-purple">Nárazy: @((GustSpeedSummary * 3.6).ToString("F1")) km/h</span>
                                </div>
                            </div>
                            <div id="wind-speed-chart" style="height: 400px;"></div>
                        </div>
                        
                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Graf srážek</h5>
                                <div class="rain-summary">
                                    <span class="badge text-bg-primary me-2">Max: @(RainMax.ToString("F1")) mm</span>
                                </div>
                            </div>
                            <div id="rain-chart" style="height: 400px;"></div>
                        </div>
                        
                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Graf slunečního záření</h5>
                                <div class="solar-radiation-summary">
                                    <span class="badge text-bg-info me-2">Min: @(SolarRadiationSummary.Min.ToString("F1")) W/m²</span>
                                    <span class="badge text-bg-warning me-2">Avg: @(SolarRadiationSummary.Avg.ToString("F1")) W/m²</span>
                                    <span class="badge text-bg-danger me-2">Max: @(SolarRadiationSummary.Max.ToString("F1")) W/m²</span>
                                    <span class="badge text-bg-success">Slunečno: @(SunshineHoursTotal.ToString("F1")) h</span>
                                </div>
                            </div>
                            <div id="solar-radiation-chart" style="height: 400px;"></div>
                        </div>
                        
                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Graf směru větru (stupně)</h5>
                                <div class="wind-direction-summary">
                                    <span class="badge text-bg-primary me-2">Avg: @(WindDirectionAvg.ToString("F1"))°</span>
                                </div>
                            </div>
                            <div id="wind-direction-chart" style="height: 400px;"></div>
                        </div>
                        
                        <div class="chart-container mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5>Graf UV indexu</h5>
                                <div class="uv-index-summary">
                                    <span class="badge text-bg-warning me-2">Avg: @(UVIndexSummary.Avg.ToString("F1"))</span>
                                    <span class="badge text-bg-danger">Max: @(UVIndexSummary.Max.ToString("F1"))</span>
                                </div>
                            </div>
                            <div id="uv-index-chart" style="height: 400px;"></div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            Zadna data nejsou k dispozici pro vybrane obdobi.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Styly pro přepínače období */
    .period-tabs {
        display: flex;
        margin-bottom: 1rem;
        border-radius: 0.25rem;
        overflow: hidden;
        background-color: #f8f9fa;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }
    
    .period-btn {
        flex: 1;
        border: none;
        padding: 0.75rem 0.5rem;
        background-color: transparent;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        font-weight: 500;
        color: #495057;
    }
    
    .period-btn i {
        font-size: 1.1rem;
    }
    
    .period-btn.active {
        background-color: #ff8c00;
        color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .period-btn:hover:not(.active) {
        background-color: #e9ecef;
    }
    
    /* Styly pro výběr data */
    .date-nav-container {
        display: flex;
        align-items: center;
        max-width: 400px;
        margin: 0 auto;
    }
    
    .date-display {
        flex: 1;
        text-align: center;
        padding: 0.5rem 1rem;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        margin: 0 0.5rem;
        font-weight: 500;
        position: relative;
    }
    
    .date-nav-btn {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        color: #495057;
        transition: all 0.2s ease;
    }
    
    .date-nav-btn:hover {
        background-color: #e9ecef;
    }
    
    .date-input {
        border: none;
        text-align: center;
        padding: 0;
        height: auto;
    }
    
    /* Styly pro rozbalovací výběr data */
    .date-picker-container {
        position: relative;
    }
    
    .date-picker-text {
        cursor: pointer;
    }
    
    .date-picker-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        padding: 0.5rem;
        margin-top: 0.25rem;
        z-index: 1000;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    /* Responzivní úpravy */
    @@media (max-width: 576px) {
        .period-btn {
            padding: 0.5rem 0.25rem;
            font-size: 0.9rem;
        }
        
        .date-display {
            font-size: 0.9rem;
            padding: 0.5rem;
        }
    }
    
    .badge.text-bg-purple {
        background-color: #9b59b6;
        color: white;
    }
</style>

@code {
    private string SelectedPeriod = "day";
    private DateTime SelectedDate = DateTime.Today;
    private DateTime WeekStartDate => SelectedDate.AddDays(-(int)SelectedDate.DayOfWeek + (int)DayOfWeek.Monday);
    private DateTime WeekEndDate => WeekStartDate.AddDays(6);
    private List<TemperatureDataPoint> TemperatureData = new();
    private List<HumidityDataPoint> HumidityData = new();
    private List<PressureDataPoint> PressureData = new();
    private List<WindSpeedDataPoint> WindSpeedData = new();
    private List<WindDirectionDataPoint> WindDirectionData = new();
    private List<RainDataPoint> RainData = new();
    private List<SolarRadiationDataPoint> SolarRadiationData = new();
    private List<UVIndexDataPoint> UVIndexData = new();
    private bool IsLoading = false;
    private bool ChartNeedsRendering = false;
    
    // Proměnné pro výběr datumu
    private bool ShowWeekPicker = false;
    private bool ShowMonthPicker = false;
    private bool ShowYearPicker = false;
    private DateTime WeekPickerDate = DateTime.Today;
    private int SelectedMonthValue = DateTime.Today.Month;
    private int SelectedYearValue = DateTime.Today.Year;
    private int SelectedYearForYearView = DateTime.Today.Year;

    private record TemperatureSummaryData(float Min, float Avg, float Max);
    private TemperatureSummaryData TemperatureSummary = new(0, 0, 0);
    private TemperatureSummaryData HumiditySummary = new(0, 0, 0);
    private TemperatureSummaryData PressureSummary = new(0, 0, 0);
    private TemperatureSummaryData WindSpeedSummary = new(0, 0, 0);
    private TemperatureSummaryData SolarRadiationSummary = new(0, 0, 0);
    private TemperatureSummaryData UVIndexSummary = new(0, 0, 0);
    private float GustSpeedSummary = 0;
    private float WindDirectionAvg = 0;
    private float RainMax = 0;
    private float SunshineHoursTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        Instance = this;
        await RefreshData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Načteme JavaScript soubory pro grafy
            await JSRuntime.InvokeVoidAsync("eval", 
                @"
                    var script = document.createElement('script');
                    script.src = '/js/wind-direction-chart.js';
                    document.head.appendChild(script);
                    
                    var rainScript = document.createElement('script');
                    rainScript.src = '/js/meteo/rain-chart.js';
                    document.head.appendChild(rainScript);
                    
                    var solarRadiationScript = document.createElement('script');
                    solarRadiationScript.src = '/js/meteo/solar-radiation-chart.js';
                    document.head.appendChild(solarRadiationScript);
                    
                    var uvIndexScript = document.createElement('script');
                    uvIndexScript.src = '/js/meteo/uv-index-chart.js';
                    document.head.appendChild(uvIndexScript);
                    
                    // Přidáme event listener pro zavírání date pickerů při kliknutí mimo ně
                    document.addEventListener('click', function(event) {
                        var datePickers = document.querySelectorAll('.date-picker-dropdown');
                        var datePickerContainers = document.querySelectorAll('.date-picker-container');
                        var clickedInsidePicker = false;
                        
                        // Kontrola, zda klik byl uvnitř nějakého pickeru nebo jeho containeru
                        for (var i = 0; i < datePickers.length; i++) {
                            if (datePickers[i].contains(event.target)) {
                                clickedInsidePicker = true;
                                break;
                            }
                        }
                        
                        for (var i = 0; i < datePickerContainers.length; i++) {
                            if (datePickerContainers[i].contains(event.target) && 
                                event.target.classList.contains('date-picker-text')) {
                                clickedInsidePicker = true;
                                break;
                            }
                        }
                        
                        if (!clickedInsidePicker) {
                            // Pokud klik nebyl uvnitř pickeru, odešleme signál do Blazor
                            DotNet.invokeMethodAsync('GrznarAi.Web', 'CloseDatePickers');
                        }
                    });
                ");
            
            // Registrujeme JSInterop metodu pro zavírání pickerů
            await JSRuntime.InvokeVoidAsync("eval", 
                @"
                window.CloseDatePickers = function() {
                    DotNet.invokeMethodAsync('GrznarAi.Web', 'CloseDatePickers');
                };
                ");
        }
        
        if (ChartNeedsRendering && TemperatureData?.Count > 0 && HumidityData?.Count > 0 && 
            PressureData?.Count > 0 && WindSpeedData?.Count > 0 && WindDirectionData?.Count > 0 && 
            RainData?.Count > 0 && SolarRadiationData?.Count > 0 && UVIndexData?.Count > 0)
        {
            ChartNeedsRendering = false;
            await RenderChartAsync();
        }
    }

    private async Task RenderChartAsync()
    {
        try
        {
            // Nejprve ověříme, zda existuje DOM element pro graf teploty
            var tempElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('temperature-chart') !== null");
            
            if (tempElementExists)
            {
                // Připravíme data pro teplotní graf
                var categories = TemperatureData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                var minTemperatureData = TemperatureData.Select(d => d.MinTemperature).ToArray();
                var avgTemperatureData = TemperatureData.Select(d => d.AvgTemperature).ToArray();
                var maxTemperatureData = TemperatureData.Select(d => d.MaxTemperature).ToArray();

                Logger.LogInformation("Vykresluji teplotní graf s {Count} body", categories.Length);
                
                // Zavoláme funkci pro vykreslení teplotního grafu
                await JSRuntime.InvokeVoidAsync("renderTemperatureChart", 
                    "temperature-chart", 
                    categories, 
                    minTemperatureData, 
                    avgTemperatureData, 
                    maxTemperatureData);
            }
            else
            {
                Logger.LogWarning("Element grafu 'temperature-chart' nenalezen, teplotní graf nebude vykreslen");
            }
            
            // Pak ověříme, zda existuje DOM element pro graf vlhkosti
            var humidityElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('humidity-chart') !== null");
                
            if (humidityElementExists)
            {
                // Připravíme data pro graf vlhkosti
                var categories = HumidityData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                var minHumidityData = HumidityData.Select(d => d.MinHumidity).ToArray();
                var avgHumidityData = HumidityData.Select(d => d.AvgHumidity).ToArray();
                var maxHumidityData = HumidityData.Select(d => d.MaxHumidity).ToArray();

                Logger.LogInformation("Vykresluji graf vlhkosti s {Count} body", categories.Length);
                
                // Zavoláme funkci pro vykreslení grafu vlhkosti
                await JSRuntime.InvokeVoidAsync("renderHumidityChart", 
                    "humidity-chart", 
                    categories, 
                    minHumidityData, 
                    avgHumidityData, 
                    maxHumidityData);
            }
            else
            {
                Logger.LogWarning("Element grafu 'humidity-chart' nenalezen, graf vlhkosti nebude vykreslen");
            }
            
            // Ověříme, zda existuje DOM element pro graf atmosférického tlaku
            var pressureElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('pressure-chart') !== null");
                
            if (pressureElementExists)
            {
                // Připravíme data pro graf atmosférického tlaku
                var categories = PressureData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                var minPressureData = PressureData.Select(d => d.MinPressure).ToArray();
                var avgPressureData = PressureData.Select(d => d.AvgPressure).ToArray();
                var maxPressureData = PressureData.Select(d => d.MaxPressure).ToArray();

                Logger.LogInformation("Vykresluji graf atmosférického tlaku s {Count} body", categories.Length);
                
                // Zavoláme funkci pro vykreslení grafu atmosférického tlaku
                await JSRuntime.InvokeVoidAsync("renderPressureChart", 
                    "pressure-chart", 
                    categories, 
                    minPressureData, 
                    avgPressureData, 
                    maxPressureData);
            }
            else
            {
                Logger.LogWarning("Element grafu 'pressure-chart' nenalezen, graf atmosférického tlaku nebude vykreslen");
            }
            
            // Ověříme, zda existuje DOM element pro graf rychlosti větru
            var windSpeedElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('wind-speed-chart') !== null");
                
            if (windSpeedElementExists)
            {
                // Připravíme data pro graf rychlosti větru
                var categories = WindSpeedData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                var minWindSpeedData = WindSpeedData.Select(d => d.MinWindSpeed).ToArray();
                var avgWindSpeedData = WindSpeedData.Select(d => d.AvgWindSpeed).ToArray();
                var maxWindSpeedData = WindSpeedData.Select(d => d.MaxWindSpeed).ToArray();
                var gustWindSpeedData = WindSpeedData.Select(d => d.GustWindSpeed).ToArray();

                Logger.LogInformation("Vykresluji graf rychlosti větru s {Count} body", categories.Length);
                
                // Zavoláme funkci pro vykreslení grafu rychlosti větru
                await JSRuntime.InvokeVoidAsync("renderWindSpeedChart", 
                    "wind-speed-chart", 
                    categories, 
                    minWindSpeedData, 
                    avgWindSpeedData, 
                    maxWindSpeedData,
                    gustWindSpeedData);
            }
            else
            {
                Logger.LogWarning("Element grafu 'wind-speed-chart' nenalezen, graf rychlosti větru nebude vykreslen");
            }
            
            // Ověříme, zda existuje DOM element pro graf směru větru
            var windDirectionElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('wind-direction-chart') !== null");
                
            if (windDirectionElementExists)
            {
                // Připravíme data pro graf směru větru
                var categories = WindDirectionData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                var windDirectionData = WindDirectionData.Select(d => d.WindDirection).ToArray();

                Logger.LogInformation("Vykresluji graf směru větru s {Count} body", categories.Length);
                
                // Zavoláme funkci pro vykreslení grafu směru větru
                await JSRuntime.InvokeVoidAsync("renderWindDirectionChart", 
                    "wind-direction-chart", 
                    categories, 
                    windDirectionData);
            }
            else
            {
                Logger.LogWarning("Element grafu 'wind-direction-chart' nenalezen, graf směru větru nebude vykreslen");
            }
            
            // Ověříme, zda existuje DOM element pro graf srážek
            var rainElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('rain-chart') !== null");
                
            if (rainElementExists)
            {
                // Připravíme data pro graf srážek
                var categories = RainData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                var rainData = RainData.Select(d => d.Rain).ToArray();

                Logger.LogInformation("Vykresluji graf srážek s {Count} body", categories.Length);
                
                // Zavoláme funkci pro vykreslení grafu srážek
                await JSRuntime.InvokeVoidAsync("renderRainChart", 
                    "rain-chart", 
                    categories, 
                    rainData);
            }
            else
            {
                Logger.LogWarning("Element grafu 'rain-chart' nenalezen, graf srážek nebude vykreslen");
            }
            
            // Ověříme, zda existuje DOM element pro graf slunečního záření
            var solarRadiationElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('solar-radiation-chart') !== null");
                
            if (solarRadiationElementExists)
            {
                // Připravíme data pro graf slunečního záření
                var categories = SolarRadiationData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                
                // Zajistíme, že všechny hodnoty budou validní (ne null)
                var avgSolarRadiationData = SolarRadiationData.Select(d => d.AvgSolarRadiation.HasValue ? d.AvgSolarRadiation.Value : 0).ToArray();
                var maxSolarRadiationData = SolarRadiationData.Select(d => d.MaxSolarRadiation.HasValue ? d.MaxSolarRadiation.Value : 0).ToArray();
                var sunshineHoursData = SolarRadiationData.Select(d => d.SunshineHours.HasValue ? d.SunshineHours.Value : 0).ToArray();

                Logger.LogInformation("Vykresluji graf slunečního záření s {Count} body, data avg: {AvgCount}, max: {MaxCount}, sunshine: {SunshineCount}", 
                    categories.Length, avgSolarRadiationData.Length, maxSolarRadiationData.Length, sunshineHoursData.Length);
                
                // Zavoláme funkci pro vykreslení grafu slunečního záření
                await JSRuntime.InvokeVoidAsync("renderSolarRadiationChart", 
                    "solar-radiation-chart", 
                    categories, 
                    new object[] { avgSolarRadiationData, maxSolarRadiationData, sunshineHoursData },
                    new string[] { "Průměrné záření", "Maximální záření", "Hodiny slunečního svitu" },
                    "Čas",
                    "W/m²",
                    new string[] { "line", "line", "column" });
            }
            else
            {
                Logger.LogWarning("Element grafu 'solar-radiation-chart' nenalezen, graf slunečního záření nebude vykreslen");
            }
            
            // Ověříme, zda existuje DOM element pro graf UV indexu
            var uvIndexElementExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.getElementById('uv-index-chart') !== null");
                
            if (uvIndexElementExists)
            {
                // Připravíme data pro graf UV indexu
                var categories = UVIndexData.Select(d => d.DisplayTime?.ToString() ?? string.Empty).ToArray();
                var avgUVIndexData = UVIndexData.Select(d => d.AvgUVIndex.HasValue ? d.AvgUVIndex.Value : 0).ToArray();
                var maxUVIndexData = UVIndexData.Select(d => d.MaxUVIndex.HasValue ? d.MaxUVIndex.Value : 0).ToArray();

                Logger.LogInformation("Vykresluji graf UV indexu s {Count} body", categories.Length);
                
                // Zavoláme funkci pro vykreslení grafu UV indexu
                await JSRuntime.InvokeVoidAsync("renderUVIndexChart", 
                    "uv-index-chart", 
                    categories, 
                    new object[] { avgUVIndexData, maxUVIndexData },
                    new string[] { "Průměrný UV index", "Maximální UV index" },
                    "Čas",
                    "UV Index",
                    new string[] { "line", "line" });
            }
            else
            {
                Logger.LogWarning("Element grafu 'uv-index-chart' nenalezen, graf UV indexu nebude vykreslen");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Chyba pri vykreslovani grafu: {Message}", ex.Message);
        }
    }

    private async Task RefreshData()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            DateTime startDate;
            DateTime endDate;
            string aggregationType;

            switch (SelectedPeriod)
            {
                case "day":
                    startDate = SelectedDate.Date;
                    endDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                    aggregationType = "hourly";
                    break;
                case "week":
                    startDate = WeekStartDate;
                    endDate = WeekEndDate.AddDays(1).AddSeconds(-1);
                    aggregationType = "6hour";
                    break;
                case "month":
                    startDate = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
                    endDate = startDate.AddMonths(1).AddSeconds(-1);
                    aggregationType = "daily";
                    break;
                case "year":
                    startDate = new DateTime(SelectedDate.Year, 1, 1);
                    endDate = new DateTime(SelectedDate.Year, 12, 31, 23, 59, 59);
                    aggregationType = "monthly";
                    break;
                default:
                    startDate = SelectedDate.Date;
                    endDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                    aggregationType = "hourly";
                    break;
            }

            Logger.LogInformation("Načítám data pro {Period} od {Start} do {End} s agregací {Aggregation}", 
                SelectedPeriod, startDate, endDate, aggregationType);
            
            // Načtení dat o teplotě
            TemperatureData = await TemperatureHistoryService.GetTemperatureDataAsync(startDate, endDate, aggregationType);
            
            // Načtení dat o vlhkosti
            HumidityData = await HumidityHistoryService.GetHumidityDataAsync(startDate, endDate, aggregationType);
            
            // Načtení dat o atmosférickém tlaku
            PressureData = await PressureHistoryService.GetPressureDataAsync(startDate, endDate, aggregationType);
            
            // Načtení dat o rychlosti větru
            WindSpeedData = await WindSpeedHistoryService.GetWindSpeedDataAsync(startDate, endDate, aggregationType);
            
            // Načtení dat o směru větru
            WindDirectionData = await WindDirectionHistoryService.GetWindDirectionDataAsync(startDate, endDate, aggregationType);
            
            // Načtení dat o srážkách
            RainData = await RainHistoryService.GetRainDataAsync(startDate, endDate, aggregationType);
            
            // Načtení dat o slunečním záření
            SolarRadiationData = await SolarRadiationHistoryService.GetSolarRadiationDataAsync(startDate, endDate, aggregationType);
            
            // Načtení dat o UV indexu
            UVIndexData = await UVIndexHistoryService.GetUVIndexDataAsync(startDate, endDate, aggregationType);
            
            if (TemperatureData.Count > 0)
            {
                // Odfiltrujeme hodnoty null, pokud existují
                var validMinValues = TemperatureData.Where(d => d.MinTemperature.HasValue).Select(d => d.MinTemperature.Value).ToList();
                var validAvgValues = TemperatureData.Where(d => d.AvgTemperature.HasValue).Select(d => d.AvgTemperature.Value).ToList();
                var validMaxValues = TemperatureData.Where(d => d.MaxTemperature.HasValue).Select(d => d.MaxTemperature.Value).ToList();
                
                if (validMinValues.Any() && validAvgValues.Any() && validMaxValues.Any())
                {
                    TemperatureSummary = new TemperatureSummaryData(
                        validMinValues.Min(),
                        validAvgValues.Average(),
                        validMaxValues.Max()
                    );
                }
                else
                {
                    TemperatureSummary = new TemperatureSummaryData(0, 0, 0);
                }

                Logger.LogInformation("Načteno {Count} záznamů teploty pro období {Period}", TemperatureData.Count, SelectedPeriod);
            }
            else
            {
                TemperatureSummary = new TemperatureSummaryData(0, 0, 0);
                Logger.LogWarning("Nebyla načtena žádná data teploty pro období {Period}", SelectedPeriod);
            }
            
            if (HumidityData.Count > 0)
            {
                // Počítání statistik pro vlhkost
                var validMinHumidity = HumidityData.Where(d => d.MinHumidity.HasValue).Select(d => d.MinHumidity.Value).ToList();
                var validAvgHumidity = HumidityData.Where(d => d.AvgHumidity.HasValue).Select(d => d.AvgHumidity.Value).ToList();
                var validMaxHumidity = HumidityData.Where(d => d.MaxHumidity.HasValue).Select(d => d.MaxHumidity.Value).ToList();
                
                if (validMinHumidity.Any() && validAvgHumidity.Any() && validMaxHumidity.Any())
                {
                    HumiditySummary = new TemperatureSummaryData(
                        validMinHumidity.Min(),
                        validAvgHumidity.Average(),
                        validMaxHumidity.Max()
                    );
                }
                else
                {
                    HumiditySummary = new TemperatureSummaryData(0, 0, 0);
                }
                
                Logger.LogInformation("Načteno {Count} záznamů vlhkosti pro období {Period}", HumidityData.Count, SelectedPeriod);
            }
            else
            {
                HumiditySummary = new TemperatureSummaryData(0, 0, 0);
                Logger.LogWarning("Nebyla načtena žádná data vlhkosti pro období {Period}", SelectedPeriod);
            }
            
            if (PressureData.Count > 0)
            {
                // Počítání statistik pro atmosférický tlak
                var validMinPressure = PressureData.Where(d => d.MinPressure.HasValue).Select(d => d.MinPressure.Value).ToList();
                var validAvgPressure = PressureData.Where(d => d.AvgPressure.HasValue).Select(d => d.AvgPressure.Value).ToList();
                var validMaxPressure = PressureData.Where(d => d.MaxPressure.HasValue).Select(d => d.MaxPressure.Value).ToList();
                
                if (validMinPressure.Any() && validAvgPressure.Any() && validMaxPressure.Any())
                {
                    PressureSummary = new TemperatureSummaryData(
                        validMinPressure.Min(),
                        validAvgPressure.Average(),
                        validMaxPressure.Max()
                    );
                }
                else
                {
                    PressureSummary = new TemperatureSummaryData(0, 0, 0);
                }
                
                Logger.LogInformation("Načteno {Count} záznamů atmosférického tlaku pro období {Period}", PressureData.Count, SelectedPeriod);
            }
            else
            {
                PressureSummary = new TemperatureSummaryData(0, 0, 0);
                Logger.LogWarning("Nebyla načtena žádná data atmosférického tlaku pro období {Period}", SelectedPeriod);
            }
            
            if (WindSpeedData.Count > 0)
            {
                // Počítání statistik pro rychlost větru
                var validMinWindSpeed = WindSpeedData.Where(d => d.MinWindSpeed.HasValue).Select(d => d.MinWindSpeed.Value).ToList();
                var validAvgWindSpeed = WindSpeedData.Where(d => d.AvgWindSpeed.HasValue).Select(d => d.AvgWindSpeed.Value).ToList();
                var validMaxWindSpeed = WindSpeedData.Where(d => d.MaxWindSpeed.HasValue).Select(d => d.MaxWindSpeed.Value).ToList();
                var validGustWindSpeed = WindSpeedData.Where(d => d.GustWindSpeed.HasValue).Select(d => d.GustWindSpeed.Value).ToList();
                
                if (validMinWindSpeed.Any() && validAvgWindSpeed.Any() && validMaxWindSpeed.Any())
                {
                    WindSpeedSummary = new TemperatureSummaryData(
                        validMinWindSpeed.Min(),
                        validAvgWindSpeed.Average(),
                        validMaxWindSpeed.Max()
                    );
                    
                    GustSpeedSummary = validGustWindSpeed.Any() ? validGustWindSpeed.Max() : 0;
                }
                else
                {
                    WindSpeedSummary = new TemperatureSummaryData(0, 0, 0);
                    GustSpeedSummary = 0;
                }
                
                Logger.LogInformation("Načteno {Count} záznamů rychlosti větru pro období {Period}", WindSpeedData.Count, SelectedPeriod);
            }
            else
            {
                WindSpeedSummary = new TemperatureSummaryData(0, 0, 0);
                GustSpeedSummary = 0;
                Logger.LogWarning("Nebyla načtena žádná data rychlosti větru pro období {Period}", SelectedPeriod);
            }
            
            if (WindDirectionData.Count > 0)
            {
                // Počítání statistik pro směr větru
                var validWindDirection = WindDirectionData.Where(d => d.WindDirection.HasValue).Select(d => d.WindDirection.Value).ToList();
                
                if (validWindDirection.Any())
                {
                    WindDirectionAvg = validWindDirection.Average();
                }
                else
                {
                    WindDirectionAvg = 0;
                }
                
                Logger.LogInformation("Načteno {Count} záznamů směru větru pro období {Period}", WindDirectionData.Count, SelectedPeriod);
            }
            else
            {
                WindDirectionAvg = 0;
                Logger.LogWarning("Nebyla načtena žádná data směru větru pro období {Period}", SelectedPeriod);
            }
            
            if (RainData.Count > 0)
            {
                // Počítání statistik pro srážky
                var validRainData = RainData.Where(d => d.Rain.HasValue).Select(d => d.Rain.Value).ToList();
                
                if (validRainData.Any())
                {
                    RainMax = validRainData.Max();
                }
                else
                {
                    RainMax = 0;
                }
                
                Logger.LogInformation("Načteno {Count} záznamů srážek pro období {Period}", RainData.Count, SelectedPeriod);
            }
            else
            {
                RainMax = 0;
                Logger.LogWarning("Nebyla načtena žádná data srážek pro období {Period}", SelectedPeriod);
            }
            
            if (SolarRadiationData.Count > 0)
            {
                // Počítání statistik pro sluneční záření
                var validMinSolarRadiation = SolarRadiationData.Where(d => d.MinSolarRadiation.HasValue).Select(d => d.MinSolarRadiation.Value).ToList();
                var validAvgSolarRadiation = SolarRadiationData.Where(d => d.AvgSolarRadiation.HasValue).Select(d => d.AvgSolarRadiation.Value).ToList();
                var validMaxSolarRadiation = SolarRadiationData.Where(d => d.MaxSolarRadiation.HasValue).Select(d => d.MaxSolarRadiation.Value).ToList();
                var validSunshineHours = SolarRadiationData.Where(d => d.SunshineHours.HasValue).Select(d => d.SunshineHours.Value).ToList();
                
                if (validMinSolarRadiation.Any() && validAvgSolarRadiation.Any() && validMaxSolarRadiation.Any())
                {
                    SolarRadiationSummary = new TemperatureSummaryData(
                        validMinSolarRadiation.Min(),
                        validAvgSolarRadiation.Average(),
                        validMaxSolarRadiation.Max()
                    );
                    
                    SunshineHoursTotal = validSunshineHours.Sum();
                }
                else
                {
                    SolarRadiationSummary = new TemperatureSummaryData(0, 0, 0);
                    SunshineHoursTotal = 0;
                }
                
                Logger.LogInformation("Načteno {Count} záznamů slunečního záření pro období {Period}", SolarRadiationData.Count, SelectedPeriod);
            }
            else
            {
                SolarRadiationSummary = new TemperatureSummaryData(0, 0, 0);
                SunshineHoursTotal = 0;
                Logger.LogWarning("Nebyla načtena žádná data slunečního záření pro období {Period}", SelectedPeriod);
            }
            
            if (UVIndexData.Count > 0)
            {
                // Počítání statistik pro UV index
                var validAvgUVIndex = UVIndexData.Where(d => d.AvgUVIndex.HasValue).Select(d => d.AvgUVIndex.Value).ToList();
                var validMaxUVIndex = UVIndexData.Where(d => d.MaxUVIndex.HasValue).Select(d => d.MaxUVIndex.Value).ToList();
                
                if (validAvgUVIndex.Any() && validMaxUVIndex.Any())
                {
                    UVIndexSummary = new TemperatureSummaryData(
                        0, // Nepoužíváme Min hodnotu
                        validAvgUVIndex.Average(),
                        validMaxUVIndex.Max()
                    );
                }
                else
                {
                    UVIndexSummary = new TemperatureSummaryData(0, 0, 0);
                }
                
                Logger.LogInformation("Načteno {Count} záznamů UV indexu pro období {Period}", UVIndexData.Count, SelectedPeriod);
            }
            else
            {
                UVIndexSummary = new TemperatureSummaryData(0, 0, 0);
                Logger.LogWarning("Nebyla načtena žádná data UV indexu pro období {Period}", SelectedPeriod);
            }
            
            ChartNeedsRendering = TemperatureData.Count > 0 && HumidityData.Count > 0 && PressureData.Count > 0 && 
                                 WindSpeedData.Count > 0 && WindDirectionData.Count > 0 && RainData.Count > 0 && 
                                 SolarRadiationData.Count > 0 && UVIndexData.Count > 0;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Chyba pri nacitani dat teplotni historie");
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ChangePeriod(string period)
    {
        if (period == SelectedPeriod)
            return;
            
        // Pokusíme se zničit existující graf před změnou období
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", "if(window.temperatureChart) { window.temperatureChart.destroy(); window.temperatureChart = null; }");
            await JSRuntime.InvokeVoidAsync("eval", "if(window.humidityChart) { window.humidityChart.destroy(); window.humidityChart = null; }");
            await JSRuntime.InvokeVoidAsync("eval", "if(window.pressureChart) { window.pressureChart.destroy(); window.pressureChart = null; }");
            await JSRuntime.InvokeVoidAsync("eval", "if(window.windSpeedChart) { window.windSpeedChart.destroy(); window.windSpeedChart = null; }");
            await JSRuntime.InvokeVoidAsync("eval", "if(window.windDirectionChart) { window.windDirectionChart.destroy(); window.windDirectionChart = null; }");
            await JSRuntime.InvokeVoidAsync("eval", "if(window.rainChart) { window.rainChart.destroy(); window.rainChart = null; }");
            await JSRuntime.InvokeVoidAsync("eval", "if(window.solarRadiationChart) { window.solarRadiationChart.destroy(); window.solarRadiationChart = null; }");
            await JSRuntime.InvokeVoidAsync("eval", "if(window.uvIndexChart) { window.uvIndexChart.destroy(); window.uvIndexChart = null; }");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Nepodařilo se zničit existující graf před změnou období");
        }
        
        SelectedPeriod = period;
        await RefreshData();
    }
    
    private Task ChangePeriodDay() => ChangePeriod("day");
    
    private Task ChangePeriodWeek() => ChangePeriod("week");
    
    private Task ChangePeriodMonth() => ChangePeriod("month");
    
    private Task ChangePeriodYear() => ChangePeriod("year");

    // Nová metoda pro posun o den zpět
    private async Task PreviousDay()
    {
        SelectedDate = SelectedDate.AddDays(-1);
        await RefreshData();
    }

    // Nová metoda pro posun o den vpřed
    private async Task NextDay()
    {
        SelectedDate = SelectedDate.AddDays(1);
        await RefreshData();
    }

    private async Task PreviousWeek()
    {
        SelectedDate = SelectedDate.AddDays(-7);
        await RefreshData();
    }

    private async Task NextWeek()
    {
        SelectedDate = SelectedDate.AddDays(7);
        await RefreshData();
    }

    private async Task PreviousMonth()
    {
        SelectedDate = SelectedDate.AddMonths(-1);
        await RefreshData();
    }

    private async Task NextMonth()
    {
        SelectedDate = SelectedDate.AddMonths(1);
        await RefreshData();
    }

    private async Task PreviousYear()
    {
        SelectedDate = SelectedDate.AddYears(-1);
        await RefreshData();
    }

    private async Task NextYear()
    {
        SelectedDate = SelectedDate.AddYears(1);
        await RefreshData();
    }

    // Metody pro výběr týdne
    private void ToggleWeekPicker()
    {
        ShowWeekPicker = !ShowWeekPicker;
        ShowMonthPicker = false;
        ShowYearPicker = false;
        
        // Nastavíme datum pro výběr týdne na aktuálně vybraný den
        if (ShowWeekPicker)
        {
            WeekPickerDate = SelectedDate;
        }
    }
    
    private async Task SelectWeek()
    {
        // Vypočítáme začátek týdne obsahující vybraný datum
        SelectedDate = WeekPickerDate.AddDays(-(int)WeekPickerDate.DayOfWeek + (int)DayOfWeek.Monday);
        ShowWeekPicker = false;
        await RefreshData();
    }
    
    // Metody pro výběr měsíce
    private void ToggleMonthPicker()
    {
        ShowMonthPicker = !ShowMonthPicker;
        ShowWeekPicker = false;
        ShowYearPicker = false;
        SelectedMonthValue = SelectedDate.Month;
        SelectedYearValue = SelectedDate.Year;
    }
    
    private async Task SelectMonth()
    {
        SelectedDate = new DateTime(SelectedYearValue, SelectedMonthValue, 1);
        ShowMonthPicker = false;
        await RefreshData();
    }
    
    // Metody pro výběr roku
    private void ToggleYearPicker()
    {
        ShowYearPicker = !ShowYearPicker;
        ShowWeekPicker = false;
        ShowMonthPicker = false;
        SelectedYearForYearView = SelectedDate.Year;
    }
    
    private async Task SelectYear()
    {
        SelectedDate = new DateTime(SelectedYearForYearView, 1, 1);
        ShowYearPicker = false;
        await RefreshData();
    }

    // Metoda pro zavírání všech pickerů - volaná z JavaScriptu
    [JSInvokable]
    public static Task CloseDatePickers()
    {
        if (Instance != null)
        {
            Instance.ShowWeekPicker = false;
            Instance.ShowMonthPicker = false;
            Instance.ShowYearPicker = false;
            return Instance.InvokeAsync(Instance.StateHasChanged);
        }
        return Task.CompletedTask;
    }
    
    private static MeteoTrends Instance;
} 