@page "/meteo/trends"
@inject IWeatherHistoryService WeatherHistoryService
@inject ILocalizationService Localizer
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using System.Globalization
@using Radzen
@using Radzen.Blazor
@rendermode InteractiveServer

<PageTitle>@Localizer.GetString("Meteo.Trends.Title") - GrznarAI</PageTitle>

<div class="meteo-trends-container">
    <h1>@Localizer.GetString("Meteo.Trends.Title")</h1>
    
    <div class="period-selector mb-4">
        <div class="period-controls">
            <div class="period-types mb-2">
                <div class="btn-group" role="group">
                    <input type="radio" class="btn-check" name="periodOption" id="dayOption" autocomplete="off"
                           checked="@(SelectedPeriod == PeriodType.Day)" 
                           @onchange="@(() => ChangePeriod(PeriodType.Day))" />
                    <label class="btn btn-outline-primary" for="dayOption">@Localizer.GetString("Meteo.Trends.Day")</label>

                    <input type="radio" class="btn-check" name="periodOption" id="weekOption" autocomplete="off"
                           checked="@(SelectedPeriod == PeriodType.Week)" 
                           @onchange="@(() => ChangePeriod(PeriodType.Week))" />
                    <label class="btn btn-outline-primary" for="weekOption">@Localizer.GetString("Meteo.Trends.Week")</label>

                    <input type="radio" class="btn-check" name="periodOption" id="monthOption" autocomplete="off"
                           checked="@(SelectedPeriod == PeriodType.Month)" 
                           @onchange="@(() => ChangePeriod(PeriodType.Month))" />
                    <label class="btn btn-outline-primary" for="monthOption">@Localizer.GetString("Meteo.Trends.Month")</label>

                    <input type="radio" class="btn-check" name="periodOption" id="yearOption" autocomplete="off"
                           checked="@(SelectedPeriod == PeriodType.Year)" 
                           @onchange="@(() => ChangePeriod(PeriodType.Year))" />
                    <label class="btn btn-outline-primary" for="yearOption">@Localizer.GetString("Meteo.Trends.Year")</label>
                </div>
            </div>
                
            <div class="date-selector">
                @switch (SelectedPeriod)
                {
                    case PeriodType.Day:
                        <RadzenDatePicker @bind-Value="SelectedDate" DateFormat="d" Change="@(() => LoadData())" Class="date-picker" />
                        break;
                    case PeriodType.Week:
                        <div class="d-flex align-items-center">
                            <RadzenDatePicker @bind-Value="SelectedDate" DateFormat="d" Change="@(() => LoadWeekData())" Class="date-picker" />
                            <span class="date-range mx-2">@FirstDayOfWeek.ToString("d") &ndash; @LastDayOfWeek.ToString("d")</span>
                        </div>
                        break;
                    case PeriodType.Month:
                        <div class="d-flex align-items-center gap-2 month-year-selector">
                            <RadzenDropDown @bind-Value="SelectedMonth" Data="@Months" TextProperty="Text" ValueProperty="Value" 
                                          Change="@(() => LoadMonthData())" Class="month-dropdown" />
                            <RadzenDropDown @bind-Value="SelectedYear" Data="@Years" TextProperty="Text" ValueProperty="Value" 
                                          Change="@(() => LoadMonthData())" Class="year-dropdown" />
                        </div>
                        break;
                    case PeriodType.Year:
                        <RadzenDropDown @bind-Value="SelectedYear" Data="@Years" TextProperty="Text" ValueProperty="Value" 
                                      Change="@(() => LoadData())" Class="year-dropdown" />
                        break;
                }
            </div>
        </div>
    </div>
    
    @if (IsLoading)
    {
        <div class="loading-overlay">
            <div class="spinner">
                <span class="visually-hidden">@Localizer.GetString("Meteo.Loading")</span>
            </div>
        </div>
    }
    else if (WeatherData == null || !WeatherData.Any())
    {
        <div class="alert alert-info">
            @Localizer.GetString("Meteo.Trends.NoData")
        </div>
    }
    else
    {
        <div class="trend-charts">
            <!-- Graf teplot -->
            <div class="chart-container">
                <h2>@Localizer.GetString("Meteo.Trends.Temperature")</h2>
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Bottom" />
                    
                    <RadzenCategoryAxis Step="@GetDateAxisStep()">
                        <RadzenAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                        @if (SelectedPeriod == PeriodType.Day)
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="{0:HH:mm}" />
                        }
                        else
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="@GetAxisLabelFormat()" />
                        }
                    </RadzenCategoryAxis>
                    
                    <RadzenValueAxis>
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.Temperature")" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                    </RadzenValueAxis>
                    
                    @if (SelectedPeriod == PeriodType.Day)
                    {
                        <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MinTemperature")" 
                                         ValueProperty="TemperatureOut">
                            <RadzenSeriesDataLabels Visible="false" />
                            <RadzenMarkers MarkerType="MarkerType.Circle" Size="5" />
                            <RadzenCategoryAxisTitle Text="@GetDateAxisTitle()" />
                            <RadzenValueAxisTitle Text="°C" />
                        </RadzenLineSeries>
                        
                        <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.AvgTemperature")" 
                                         ValueProperty="AvgTemperature" LineType="LineType.Dashed">
                            <RadzenSeriesDataLabels Visible="false" />
                            <RadzenMarkers MarkerType="MarkerType.Square" Size="5" />
                        </RadzenLineSeries>
                        
                        <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MaxTemperature")" 
                                         ValueProperty="MaxTemperature">
                            <RadzenSeriesDataLabels Visible="false" />
                            <RadzenMarkers MarkerType="MarkerType.Diamond" Size="5" />
                        </RadzenLineSeries>
                    }
                    else
                    {
                        <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="Date" Title="@Localizer.GetString("Meteo.Trends.MinTemperature")" 
                                         ValueProperty="TemperatureOut">
                            <RadzenSeriesDataLabels Visible="false" />
                            <RadzenMarkers MarkerType="MarkerType.Circle" Size="5" />
                            <RadzenCategoryAxisTitle Text="@GetDateAxisTitle()" />
                            <RadzenValueAxisTitle Text="°C" />
                        </RadzenLineSeries>
                        
                        <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="Date" Title="@Localizer.GetString("Meteo.Trends.AvgTemperature")" 
                                         ValueProperty="AvgTemperature" LineType="LineType.Dashed">
                            <RadzenSeriesDataLabels Visible="false" />
                            <RadzenMarkers MarkerType="MarkerType.Square" Size="5" />
                        </RadzenLineSeries>
                        
                        <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="Date" Title="@Localizer.GetString("Meteo.Trends.MaxTemperature")" 
                                         ValueProperty="MaxTemperature">
                            <RadzenSeriesDataLabels Visible="false" />
                            <RadzenMarkers MarkerType="MarkerType.Diamond" Size="5" />
                        </RadzenLineSeries>
                    }

                    <RadzenChartTooltipOptions Visible="true" />
                </RadzenChart>
                
                @if (WeatherData != null && WeatherData.Any())
                {
                    <div class="temperature-summary-container">
                        <div class="temperature-summary">
                            <span class="temp-min">Min @GetMinTemperature() °C</span>
                            <span class="temp-avg">Prům @GetAvgTemperature() °C</span>
                            <span class="temp-max">Max @GetMaxTemperature() °C</span>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Graf vlhkosti -->
            <div class="chart-container">
                <h2>@Localizer.GetString("Meteo.Trends.Humidity")</h2>
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Bottom" />
                    
                    <RadzenCategoryAxis Step="@GetDateAxisStep()">
                        <RadzenAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                        @if (SelectedPeriod == PeriodType.Day)
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="{0:HH:mm}" />
                        }
                        else
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="@GetAxisLabelFormat()" />
                        }
                    </RadzenCategoryAxis>
                    
                    <RadzenValueAxis>
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.Humidity")" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                    </RadzenValueAxis>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MinHumidity")" 
                                     ValueProperty="MinHumidity">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Circle" Size="5" />
                        <RadzenCategoryAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenValueAxisTitle Text="%" />
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.AvgHumidity")" 
                                     ValueProperty="AvgHumidity" LineType="LineType.Dashed">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Square" Size="5" />
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MaxHumidity")" 
                                     ValueProperty="MaxHumidity">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Diamond" Size="5" />
                    </RadzenLineSeries>

                    <RadzenChartTooltipOptions Visible="true" />
                </RadzenChart>
                
                @if (WeatherData != null && WeatherData.Any())
                {
                    <div class="temperature-summary-container">
                        <div class="temperature-summary">
                            <span class="humidity-min">Min @GetMinHumidity() %</span>
                            <span class="humidity-avg">Prům @GetAvgHumidity() %</span>
                            <span class="humidity-max">Max @GetMaxHumidity() %</span>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Graf tlaku -->
            <div class="chart-container">
                <h2>@Localizer.GetString("Meteo.Trends.Pressure")</h2>
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Bottom" />
                    
                    <RadzenCategoryAxis Step="@GetDateAxisStep()">
                        <RadzenAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                        @if (SelectedPeriod == PeriodType.Day)
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="{0:HH:mm}" />
                        }
                        else
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="@GetAxisLabelFormat()" />
                        }
                    </RadzenCategoryAxis>
                    
                    <RadzenValueAxis>
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.Pressure")" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                    </RadzenValueAxis>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MinPressure")" 
                                     ValueProperty="MinBar">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Circle" Size="5" />
                        <RadzenCategoryAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenValueAxisTitle Text="hPa" />
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.AvgPressure")" 
                                     ValueProperty="AvgBar" LineType="LineType.Dashed">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Square" Size="5" />
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MaxPressure")" 
                                     ValueProperty="MaxBar">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Diamond" Size="5" />
                    </RadzenLineSeries>

                    <RadzenChartTooltipOptions Visible="true" />
                </RadzenChart>
                
                @if (WeatherData != null && WeatherData.Any())
                {
                    <div class="temperature-summary-container">
                        <div class="temperature-summary">
                            <span class="pressure-min">Min @GetMinPressure() hPa</span>
                            <span class="pressure-avg">Prům @GetAvgPressure() hPa</span>
                            <span class="pressure-max">Max @GetMaxPressure() hPa</span>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Graf rychlosti větru -->
            <div class="chart-container">
                <h2>@Localizer.GetString("Meteo.Trends.WindSpeed")</h2>
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Bottom" />
                    
                    <RadzenCategoryAxis Step="@GetDateAxisStep()">
                        <RadzenAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                        @if (SelectedPeriod == PeriodType.Day)
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="{0:HH:mm}" />
                        }
                        else
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="@GetAxisLabelFormat()" />
                        }
                    </RadzenCategoryAxis>
                    
                    <RadzenValueAxis>
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.WindSpeed")" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                    </RadzenValueAxis>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MinWindSpeed")" 
                                     ValueProperty="MinWindSpeed">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Circle" Size="5" />
                        <RadzenCategoryAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenValueAxisTitle Text="m/s" />
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.AvgWindSpeed")" 
                                     ValueProperty="WindSpeedAvg" LineType="LineType.Dashed">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Square" Size="5" />
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MaxWindSpeed")" 
                                     ValueProperty="MaxWindSpeed">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Diamond" Size="5" />
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.WindGust")" 
                                     ValueProperty="WindGust" LineType="LineType.Dotted">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Triangle" Size="5" />
                    </RadzenLineSeries>

                    <RadzenChartTooltipOptions Visible="true" />
                </RadzenChart>
                
                @if (WeatherData != null && WeatherData.Any())
                {
                    <div class="temperature-summary-container">
                        <div class="temperature-summary">
                            <span class="wind-min">Min @GetMinWindSpeed() m/s</span>
                            <span class="wind-avg">Prům @GetAvgWindSpeed() m/s</span>
                            <span class="wind-max">Max @GetMaxWindSpeed() m/s</span>
                            <span class="wind-gust">Náraz @GetWindGust() m/s</span>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Graf srážek -->
            <div class="chart-container">
                <h2>@Localizer.GetString("Meteo.Trends.Rainfall")</h2>
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Bottom" />
                    
                    <RadzenCategoryAxis Step="@GetDateAxisStep()">
                        <RadzenAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                        @if (SelectedPeriod == PeriodType.Day)
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="{0:HH:mm}" />
                        }
                        else
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="@GetAxisLabelFormat()" />
                        }
                    </RadzenCategoryAxis>
                    
                    <RadzenValueAxis>
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.Rainfall")" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                    </RadzenValueAxis>
                    
                    <RadzenColumnSeries Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.RainfallMm")" 
                                       ValueProperty="TotalRain">
                        <RadzenSeriesDataLabels Visible="true" />
                        <RadzenLegend Visible="true" Position="LegendPosition.Bottom" />
                        <RadzenCategoryAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenValueAxisTitle Text="mm" />
                    </RadzenColumnSeries>

                    <RadzenChartTooltipOptions Visible="true" />
                </RadzenChart>
                
                @if (WeatherData != null && WeatherData.Any())
                {
                    <div class="temperature-summary-container">
                        <div class="temperature-summary">
                            <span class="rainfall-total">Celkem @GetTotalRainfall() mm</span>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Graf slunečního záření -->
            <div class="chart-container">
                <h2>@Localizer.GetString("Meteo.Trends.SolarRadiation")</h2>
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Bottom" />
                    
                    <RadzenCategoryAxis Step="@GetDateAxisStep()">
                        <RadzenAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                        @if (SelectedPeriod == PeriodType.Day)
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="{0:HH:mm}" />
                        }
                        else
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="@GetAxisLabelFormat()" />
                        }
                    </RadzenCategoryAxis>
                    
                    <RadzenValueAxis>
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.SolarRadiation")" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                    </RadzenValueAxis>
                    
                    <!-- Křivky pro min, avg, max sluneční záření -->
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MinSolarRadiation")" 
                                     ValueProperty="MinSolarRad">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Circle" Size="5" />
                        <RadzenCategoryAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenValueAxisTitle Text="W/m²" />
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.AvgSolarRadiation")" 
                                     ValueProperty="AvgSolarRad" LineType="LineType.Dashed">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Square" Size="5" />
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MaxSolarRadiation")" 
                                     ValueProperty="MaxSolarRad">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Diamond" Size="5" />
                    </RadzenLineSeries>

                    <RadzenChartTooltipOptions Visible="true" />
                </RadzenChart>
                
                <!-- Sloupcový graf pro dobu slunečního svitu -->
                <h3 class="mt-4">@Localizer.GetString("Meteo.Trends.SunshineHours")</h3>
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Bottom" />
                    
                    <RadzenCategoryAxis Step="@GetDateAxisStep()">
                        <RadzenAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                        @if (SelectedPeriod == PeriodType.Day)
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="{0:hh\\:mm}" />
                        }
                        else
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="@GetAxisLabelFormat()" />
                        }
                    </RadzenCategoryAxis>
                    
                    <RadzenValueAxis>
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.Hours")" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                    </RadzenValueAxis>
                    
                    <RadzenColumnSeries Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.SunshineHours")" 
                                       ValueProperty="SunshineHours">
                        <RadzenSeriesDataLabels Visible="true" />
                        <RadzenLegend Visible="true" Position="LegendPosition.Bottom" />
                        <RadzenCategoryAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenValueAxisTitle Text="h" />
                    </RadzenColumnSeries>

                    <RadzenChartTooltipOptions Visible="true" />
                </RadzenChart>
                
                @if (WeatherData != null && WeatherData.Any())
                {
                    <div class="temperature-summary-container">
                        <div class="temperature-summary">
                            <span class="solar-min">Min @GetMinSolarRadiation() W/m²</span>
                            <span class="solar-avg">Prům @GetAvgSolarRadiation() W/m²</span>
                            <span class="solar-max">Max @GetMaxSolarRadiation() W/m²</span>
                            <span class="sunshine-total">Slunce @GetTotalSunshineHours() h</span>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Graf UV indexu -->
            <div class="chart-container">
                <h2>@Localizer.GetString("Meteo.Trends.UvIndex")</h2>
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Bottom" />
                    
                    <RadzenCategoryAxis Step="@GetDateAxisStep()">
                        <RadzenAxisTitle Text="@GetDateAxisTitle()" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                        @if (SelectedPeriod == PeriodType.Day)
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="{0:hh\\:mm}" />
                        }
                        else
                        {
                            <RadzenAxisLabels Rotation="@GetAxisLabelRotation()" FormatString="@GetAxisLabelFormat()" />
                        }
                    </RadzenCategoryAxis>
                    
                    <RadzenValueAxis Min="0" Max="12" Step="1">
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.UvIndex")" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTicks Visible="true" />
                        <RadzenAxisOptions Padding="20" />
                    </RadzenValueAxis>
                    
                    <RadzenColumnSeries Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.MaxUvIndex")" 
                                       ValueProperty="MaxUvi">
                        <RadzenSeriesDataLabels Visible="true" />
                        <RadzenLegend Visible="true" Position="LegendPosition.Bottom" />
                        <RadzenCategoryAxisTitle Text="@GetDateAxisTitle()" />
                    </RadzenColumnSeries>
                    
                    <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="TimeOnly" Title="@Localizer.GetString("Meteo.Trends.AvgUvIndex")" 
                                     ValueProperty="AvgUvi" LineType="LineType.Dashed">
                        <RadzenSeriesDataLabels Visible="false" />
                        <RadzenMarkers MarkerType="MarkerType.Square" Size="5" />
                    </RadzenLineSeries>

                    <RadzenChartTooltipOptions Visible="true" />
                </RadzenChart>
                
                @if (WeatherData != null && WeatherData.Any())
                {
                    <div class="temperature-summary-container">
                        <div class="temperature-summary">
                            <span class="uv-avg">Prům @GetAvgUvIndex()</span>
                            <span class="uv-max">Max @GetMaxUvIndex()</span>
                            <span class="@GetUvIndexClass()">@GetUvIndexCategory()</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private enum PeriodType
    {
        Day,
        Week,
        Month,
        Year
    }
    
    private PeriodType SelectedPeriod { get; set; } = PeriodType.Day;
    private DateTime SelectedDate { get; set; } = DateTime.Today;
    private int SelectedMonth { get; set; }
    private int SelectedYear { get; set; }
    
    private DateTime FirstDayOfWeek { get; set; }
    private DateTime LastDayOfWeek { get; set; }
    
    private List<WeatherHistory> WeatherData { get; set; }
    private bool IsLoading { get; set; } = false;
    
    private List<DropDownItem> Years { get; set; } = new List<DropDownItem>();
    private List<DropDownItem> Months { get; set; } = new List<DropDownItem>();
    
    private class DropDownItem
    {
        public string Text { get; set; }
        public int Value { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        // Inicializace seznamů pro dropdown
        InitializeDropdowns();
        
        // Nastavení výchozích hodnot
        SelectedYear = DateTime.Today.Year;
        SelectedMonth = DateTime.Today.Month;
        
        // Výpočet týdne
        CalculateWeekDates();
        
        // Načtení dat pro výchozí období
        await LoadData();
    }
    
    private void InitializeDropdowns()
    {
        // Roky
        int currentYear = DateTime.Today.Year;
        for (int year = currentYear - 5; year <= currentYear; year++)
        {
            Years.Add(new DropDownItem { Text = year.ToString(), Value = year });
        }
        
        // Měsíce
        for (int month = 1; month <= 12; month++)
        {
            Months.Add(new DropDownItem 
            { 
                Text = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month), 
                Value = month 
            });
        }
    }
    
    private void CalculateWeekDates()
    {
        DayOfWeek firstDayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
        int diff = SelectedDate.DayOfWeek - firstDayOfWeek;
        if (diff < 0) diff += 7;
        
        FirstDayOfWeek = SelectedDate.AddDays(-diff);
        LastDayOfWeek = FirstDayOfWeek.AddDays(6);
    }
    
    private async Task ChangePeriod(PeriodType periodType)
    {
        SelectedPeriod = periodType;
        
        if (periodType == PeriodType.Week)
        {
            CalculateWeekDates();
            await LoadWeekData();
        }
        else if (periodType == PeriodType.Month)
        {
            await LoadMonthData();
        }
        else
        {
            await LoadData();
        }
    }
    
    private async Task LoadData()
    {
        IsLoading = true;
        try
        {
            DateTime startDate;
            DateTime endDate;
            
            switch (SelectedPeriod)
            {
                case PeriodType.Day:
                    startDate = SelectedDate.Date;
                    endDate = startDate.AddDays(1).AddSeconds(-1);
                    break;
                    
                case PeriodType.Week:
                    CalculateWeekDates();
                    startDate = FirstDayOfWeek;
                    endDate = LastDayOfWeek.AddDays(1).AddSeconds(-1);
                    break;
                    
                case PeriodType.Month:
                    startDate = new DateTime(SelectedYear, SelectedMonth, 1);
                    endDate = startDate.AddMonths(1).AddSeconds(-1);
                    break;
                    
                case PeriodType.Year:
                    startDate = new DateTime(SelectedYear, 1, 1);
                    endDate = startDate.AddYears(1).AddSeconds(-1);
                    break;
                    
                default:
                    startDate = SelectedDate.Date;
                    endDate = startDate.AddDays(1).AddSeconds(-1);
                    break;
            }
            
            WeatherData = await WeatherHistoryService.GetHistoryAsync(startDate, endDate);
            
            // Výpočet průměrů pro grafy
            CalculateAverages();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading weather data: {ex.Message}");
            WeatherData = new List<WeatherHistory>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadWeekData()
    {
        CalculateWeekDates();
        await LoadData();
    }
    
    private async Task LoadMonthData()
    {
        await LoadData();
    }
    
    private void CalculateAverages()
    {
        if (WeatherData == null || !WeatherData.Any())
            return;
        
        switch (SelectedPeriod)
        {
            case PeriodType.Day:
                // Pro denní pohled použijeme hodinové intervaly
                var hourlyData = WeatherData
                    .GroupBy(d => new DateTime(d.Date.Year, d.Date.Month, d.Date.Day, d.Date.Hour, 0, 0))
                    .Select(g => {
                        var first = g.First();
                        // Explicitně nastavíme datum s přesnou hodinou (zaokrouhleno na celé hodiny)
                        var dateTime = new DateTime(first.Date.Year, first.Date.Month, first.Date.Day, first.Date.Hour, 0, 0);
                        first.Date = dateTime;
                        // Přidáme TimeOnly pro zobrazení jen času v denním režimu
                        first.TimeOnly = dateTime.TimeOfDay;
                        first.AvgTemperature = (float?)g.Average(x => x.TemperatureOut);
                        first.MaxTemperature = g.Max(x => x.TemperatureOut);
                        
                        // Výpočet vlhkosti
                        first.MinHumidity = g.Min(x => x.HumidityOut);
                        first.AvgHumidity = (float?)g.Average(x => x.HumidityOut);
                        first.MaxHumidity = g.Max(x => x.HumidityOut);
                        
                        // Výpočet tlaku
                        first.MinBar = g.Min(x => x.Bar);
                        first.AvgBar = (float?)g.Average(x => x.Bar);
                        first.MaxBar = g.Max(x => x.Bar);
                        
                        // Výpočet rychlosti větru
                        first.MinWindSpeed = g.Min(x => x.WindSpeedAvg);  // Minimální průměrná rychlost
                        first.MaxWindSpeed = g.Max(x => x.WindSpeedAvg);  // Maximální průměrná rychlost
                        first.WindGust = g.Max(x => x.WindSpeedHi);       // Náraz větru (max hodnota z max rychlostí)
                        
                        // Výpočet srážek
                        first.TotalRain = g.Sum(x => x.Rain ?? 0);        // Součet srážek za hodinu
                        
                        // Výpočet slunečního záření
                        first.MinSolarRad = g.Min(x => x.SolarRad);       // Minimální sluneční záření
                        first.AvgSolarRad = (float?)g.Average(x => x.SolarRad);   // Průměrné sluneční záření
                        first.MaxSolarRad = g.Max(x => x.SolarRad);       // Maximální sluneční záření
                        first.SunshineHours = CalculateSunshineHours(g);  // Doba slunečního svitu v hodinách
                        
                        // Výpočet UV indexu
                        first.AvgUvi = (float?)g.Average(x => x.Uvi);             // Průměrný UV index
                        first.MaxUvi = g.Max(x => x.Uvi);                 // Maximální UV index
                        
                        return first;
                    })
                    .OrderBy(d => d.Date)
                    .ToList();
                
                WeatherData = hourlyData;
                break;
                
            case PeriodType.Week:
                // Pro týdenní pohled použijeme 4hodinové intervaly
                var fourHourData = WeatherData
                    .GroupBy(d => new DateTime(d.Date.Year, d.Date.Month, d.Date.Day, (d.Date.Hour / 4) * 4, 0, 0))
                    .Select(g => {
                        var first = g.First();
                        // Explicitně nastavíme datum s 4hodinovým zaokrouhlením
                        first.Date = new DateTime(first.Date.Year, first.Date.Month, first.Date.Day, (first.Date.Hour / 4) * 4, 0, 0);
                        first.AvgTemperature = (float?)g.Average(x => x.TemperatureOut);
                        first.MaxTemperature = g.Max(x => x.TemperatureOut);
                        first.TemperatureOut = g.Min(x => x.TemperatureOut); // Min hodnota jako TemperatureOut
                        
                        // Výpočet vlhkosti
                        first.MinHumidity = g.Min(x => x.HumidityOut);
                        first.AvgHumidity = (float?)g.Average(x => x.HumidityOut);
                        first.MaxHumidity = g.Max(x => x.HumidityOut);
                        
                        // Výpočet tlaku
                        first.MinBar = g.Min(x => x.Bar);
                        first.AvgBar = (float?)g.Average(x => x.Bar);
                        first.MaxBar = g.Max(x => x.Bar);
                        
                        // Výpočet rychlosti větru
                        first.MinWindSpeed = g.Min(x => x.WindSpeedAvg);  // Minimální průměrná rychlost
                        first.MaxWindSpeed = g.Max(x => x.WindSpeedAvg);  // Maximální průměrná rychlost
                        first.WindGust = g.Max(x => x.WindSpeedHi);       // Náraz větru (max hodnota z max rychlostí)
                        
                        // Výpočet srážek
                        first.TotalRain = g.Sum(x => x.Rain ?? 0);        // Součet srážek za 4 hodiny
                        
                        // Výpočet slunečního záření
                        first.MinSolarRad = g.Min(x => x.SolarRad);       // Minimální sluneční záření
                        first.AvgSolarRad = (float?)g.Average(x => x.SolarRad);   // Průměrné sluneční záření
                        first.MaxSolarRad = g.Max(x => x.SolarRad);       // Maximální sluneční záření
                        first.SunshineHours = CalculateSunshineHours(g);  // Doba slunečního svitu v hodinách
                        
                        // Výpočet UV indexu
                        first.AvgUvi = (float?)g.Average(x => x.Uvi);             // Průměrný UV index
                        first.MaxUvi = g.Max(x => x.Uvi);                 // Maximální UV index
                        
                        return first;
                    })
                    .OrderBy(d => d.Date)
                    .ToList();
                
                WeatherData = fourHourData;
                break;
                
            case PeriodType.Month:
                // Pro měsíční pohled použijeme denní intervaly
                var dailyData = WeatherData
                    .GroupBy(d => d.Date.Date)
                    .Select(g => {
                        var first = g.First();
                        // Ujistíme se, že datum má jen den bez času
                        first.Date = first.Date.Date;
                        first.AvgTemperature = (float?)g.Average(x => x.TemperatureOut);
                        first.MaxTemperature = g.Max(x => x.TemperatureOut);
                        first.TemperatureOut = g.Min(x => x.TemperatureOut); // Min hodnota jako TemperatureOut
                        
                        // Výpočet vlhkosti
                        first.MinHumidity = g.Min(x => x.HumidityOut);
                        first.AvgHumidity = (float?)g.Average(x => x.HumidityOut);
                        first.MaxHumidity = g.Max(x => x.HumidityOut);
                        
                        // Výpočet tlaku
                        first.MinBar = g.Min(x => x.Bar);
                        first.AvgBar = (float?)g.Average(x => x.Bar);
                        first.MaxBar = g.Max(x => x.Bar);
                        
                        // Výpočet rychlosti větru
                        first.MinWindSpeed = g.Min(x => x.WindSpeedAvg);  // Minimální průměrná rychlost
                        first.MaxWindSpeed = g.Max(x => x.WindSpeedAvg);  // Maximální průměrná rychlost
                        first.WindGust = g.Max(x => x.WindSpeedHi);       // Náraz větru (max hodnota z max rychlostí)
                        
                        // Výpočet srážek
                        first.TotalRain = g.Sum(x => x.Rain ?? 0);        // Denní úhrn srážek
                        
                        // Výpočet slunečního záření
                        first.MinSolarRad = g.Min(x => x.SolarRad);       // Minimální sluneční záření
                        first.AvgSolarRad = (float?)g.Average(x => x.SolarRad);   // Průměrné sluneční záření
                        first.MaxSolarRad = g.Max(x => x.SolarRad);       // Maximální sluneční záření
                        first.SunshineHours = CalculateSunshineHours(g);  // Doba slunečního svitu v hodinách
                        
                        // Výpočet UV indexu
                        first.AvgUvi = (float?)g.Average(x => x.Uvi);             // Průměrný UV index
                        first.MaxUvi = g.Max(x => x.Uvi);                 // Maximální UV index
                        
                        return first;
                    })
                    .OrderBy(d => d.Date)
                    .ToList();
                
                WeatherData = dailyData;
                break;
                
            case PeriodType.Year:
                // Pro roční pohled použijeme týdenní intervaly (7 dní)
                var startOfYear = new DateTime(SelectedYear, 1, 1);
                var weeklyData = WeatherData
                    .GroupBy(d => {
                        int dayOfYear = d.Date.DayOfYear;
                        int weekOfYear = (dayOfYear - 1) / 7;
                        return startOfYear.AddDays(weekOfYear * 7);
                    })
                    .Select(g => {
                        var first = g.First();
                        // Nastavíme datum na začátek týdne
                        int dayOfYear = first.Date.DayOfYear;
                        int weekOfYear = (dayOfYear - 1) / 7;
                        first.Date = startOfYear.AddDays(weekOfYear * 7);
                        
                        first.AvgTemperature = (float?)g.Average(x => x.TemperatureOut);
                        first.MaxTemperature = g.Max(x => x.TemperatureOut);
                        first.TemperatureOut = g.Min(x => x.TemperatureOut); // Min hodnota jako TemperatureOut
                        
                        // Výpočet vlhkosti
                        first.MinHumidity = g.Min(x => x.HumidityOut);
                        first.AvgHumidity = (float?)g.Average(x => x.HumidityOut);
                        first.MaxHumidity = g.Max(x => x.HumidityOut);
                        
                        // Výpočet tlaku
                        first.MinBar = g.Min(x => x.Bar);
                        first.AvgBar = (float?)g.Average(x => x.Bar);
                        first.MaxBar = g.Max(x => x.Bar);
                        
                        // Výpočet rychlosti větru
                        first.MinWindSpeed = g.Min(x => x.WindSpeedAvg);  // Minimální průměrná rychlost
                        first.MaxWindSpeed = g.Max(x => x.WindSpeedAvg);  // Maximální průměrná rychlost
                        first.WindGust = g.Max(x => x.WindSpeedHi);       // Náraz větru (max hodnota z max rychlostí)
                        
                        // Výpočet srážek
                        first.TotalRain = g.Sum(x => x.Rain ?? 0);        // Týdenní úhrn srážek
                        
                        // Výpočet slunečního záření
                        first.MinSolarRad = g.Min(x => x.SolarRad);       // Minimální sluneční záření
                        first.AvgSolarRad = (float?)g.Average(x => x.SolarRad);   // Průměrné sluneční záření
                        first.MaxSolarRad = g.Max(x => x.SolarRad);       // Maximální sluneční záření
                        first.SunshineHours = CalculateSunshineHours(g);  // Doba slunečního svitu v hodinách
                        
                        // Výpočet UV indexu
                        first.AvgUvi = (float?)g.Average(x => x.Uvi);             // Průměrný UV index
                        first.MaxUvi = g.Max(x => x.Uvi);                 // Maximální UV index
                        
                        return first;
                    })
                    .OrderBy(d => d.Date)
                    .ToList();
                
                WeatherData = weeklyData;
                break;
        }
        
        StateHasChanged();
    }

    // Pomocná metoda pro výpočet doby slunečního svitu
    private float CalculateSunshineHours(IGrouping<DateTime, WeatherHistory> group)
    {
        // Za slunečno považujeme, když sluneční záření překročí 120 W/m²
        const float sunshineThreshold = 120.0f;
        
        // Počítáme počet záznamů se slunečním zářením nad prahovou hodnotou
        int sunshineRecords = group.Count(x => x.SolarRad >= sunshineThreshold);
        
        // Odhadujeme dobu slunečního svitu v hodinách
        // Předpokládáme, že každý záznam představuje určitý interval (např. 5-15 minut)
        float recordInterval = 0.25f; // 15 minut na záznam (upravte podle frekvence záznamů)
        
        return sunshineRecords * recordInterval;
    }

    // Funkce pro formátování datumu v grafu podle vybraného období
    private string GetDateAxisTitle()
    {
        switch (SelectedPeriod)
        {
            case PeriodType.Day:
                return Localizer.GetString("Meteo.Trends.Hours");
            case PeriodType.Week:
                return Localizer.GetString("Meteo.Trends.FourHourInterval");
            case PeriodType.Month:
                return Localizer.GetString("Meteo.Trends.Days");
            case PeriodType.Year:
                return Localizer.GetString("Meteo.Trends.Weeks");
            default:
                return Localizer.GetString("Meteo.Trends.DateTime");
        }
    }

    // Formát datumů pro osu X podle zvoleného období
    private string GetDateFormatString()
    {
        switch (SelectedPeriod)
        {
            case PeriodType.Day:
                return "HH:mm"; // Jen hodiny a minuty pro denní pohled
            case PeriodType.Week:
                return "d.M. HH:mm"; // Zkrácené datum a čas pro týdenní pohled
            case PeriodType.Month:
                return "d.M."; // Zkrácené datum pro měsíční pohled
            case PeriodType.Year:
                return "d.M."; // Zkrácené datum pro roční pohled
            default:
                return "g"; // Výchozí formát
        }
    }

    // Nastavení počtu kroků na ose X podle období a počtu bodů v datech
    private int GetDateAxisStep()
    {
        if (WeatherData == null || !WeatherData.Any())
            return 1;

        int dataCount = WeatherData.Count;
        
        switch (SelectedPeriod)
        {
            case PeriodType.Day:
                // Pro denní pohled zobrazíme max. 12 popisků
                return Math.Max(1, dataCount / 12);
            case PeriodType.Week:
                // Pro týdenní pohled zobrazujeme max. 12 popisků (obvykle každých 6 hodin)
                return Math.Max(1, dataCount / 12);
            case PeriodType.Month:
                // Pro měsíční pohled zobrazíme max. 10 popisků
                return Math.Max(1, dataCount / 10);
            case PeriodType.Year:
                // Pro roční pohled zobrazíme max. 12 popisků (po měsících)
                return Math.Max(1, dataCount / 12);
            default:
                return 1;
        }
    }

    // Získání optimální rotace popisků podle typu období
    private double GetAxisLabelRotation()
    {
        switch (SelectedPeriod)
        {
            case PeriodType.Day:
                return 0; // Bez rotace pro denní zobrazení
            case PeriodType.Week:
                return 45; // 45 stupňů pro týdenní zobrazení
            case PeriodType.Month:
                return 45; // 45 stupňů pro měsíční zobrazení
            case PeriodType.Year:
                return 45; // 45 stupňů pro roční zobrazení
            default:
                return 0;
        }
    }

    // Funkce pro formátování osy X podle vybraného období
    private string GetAxisLabelFormat()
    {
        // Tato metoda se nyní používá pouze pro nedenní režimy
        return "{0:" + GetDateFormatString() + "}";
    }

    // Metody pro získání teplotních extrémů a průměrů
    private string GetMinTemperature()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Min(d => d.TemperatureOut)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetAvgTemperature()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        var avgValues = WeatherData.Select(d => d.AvgTemperature).Where(t => t.HasValue);
        if (!avgValues.Any())
            return "N/A";
            
        return avgValues.Average()?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetMaxTemperature()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Max(d => d.MaxTemperature)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }

    // Metody pro získání údajů o vlhkosti
    private string GetMinHumidity()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Min(d => d.MinHumidity)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetAvgHumidity()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        var avgValues = WeatherData.Select(d => d.AvgHumidity).Where(h => h.HasValue);
        if (!avgValues.Any())
            return "N/A";
            
        return avgValues.Average()?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetMaxHumidity()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Max(d => d.MaxHumidity)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }

    // Metody pro získání údajů o tlaku
    private string GetMinPressure()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Min(d => d.MinBar)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetAvgPressure()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        var avgValues = WeatherData.Select(d => d.AvgBar).Where(p => p.HasValue);
        if (!avgValues.Any())
            return "N/A";
            
        return avgValues.Average()?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetMaxPressure()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Max(d => d.MaxBar)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }

    // Metody pro získání údajů o větru
    private string GetMinWindSpeed()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Min(d => d.MinWindSpeed)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetAvgWindSpeed()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        var avgValues = WeatherData.Select(d => d.WindSpeedAvg).Where(w => w.HasValue);
        if (!avgValues.Any())
            return "N/A";
            
        return avgValues.Average()?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetMaxWindSpeed()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Max(d => d.MaxWindSpeed)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetWindGust()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Max(d => d.WindGust)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }

    // Metoda pro získání údajů o srážkách
    private string GetTotalRainfall()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        var totalRain = WeatherData.Sum(d => d.TotalRain ?? 0);
        return totalRain.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',');
    }

    // Metody pro získání údajů o slunečním záření
    private string GetMinSolarRadiation()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Min(d => d.MinSolarRad)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetAvgSolarRadiation()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        var avgValues = WeatherData.Select(d => d.AvgSolarRad).Where(s => s.HasValue);
        if (!avgValues.Any())
            return "N/A";
            
        return avgValues.Average()?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetMaxSolarRadiation()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Max(d => d.MaxSolarRad)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetTotalSunshineHours()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        var totalHours = WeatherData.Sum(d => d.SunshineHours ?? 0);
        return totalHours.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',');
    }

    // Metody pro získání údajů o UV indexu
    private string GetAvgUvIndex()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        var avgValues = WeatherData.Select(d => d.AvgUvi).Where(u => u.HasValue);
        if (!avgValues.Any())
            return "N/A";
            
        return avgValues.Average()?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    private string GetMaxUvIndex()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "N/A";
            
        return WeatherData.Max(d => d.MaxUvi)?.ToString("0.0", CultureInfo.InvariantCulture).Replace('.', ',') ?? "N/A";
    }
    
    // Metoda pro určení kategorie UV indexu podle maximální hodnoty
    private string GetUvIndexCategory()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "Žádná data";
            
        var maxUvi = WeatherData.Max(d => d.MaxUvi) ?? 0;
        
        if (maxUvi < 3) return "Nízký UV index";
        if (maxUvi < 6) return "Střední UV index";
        if (maxUvi < 8) return "Vysoký UV index";
        if (maxUvi < 11) return "Velmi vysoký UV index";
        return "Extrémní UV index";
    }
    
    // Metoda pro získání CSS třídy podle kategorie UV indexu
    private string GetUvIndexClass()
    {
        if (WeatherData == null || !WeatherData.Any())
            return "uv-none";
            
        var maxUvi = WeatherData.Max(d => d.MaxUvi) ?? 0;
        
        if (maxUvi < 3) return "uv-low";
        if (maxUvi < 6) return "uv-moderate";
        if (maxUvi < 8) return "uv-high";
        if (maxUvi < 11) return "uv-very-high";
        return "uv-extreme";
    }
} 