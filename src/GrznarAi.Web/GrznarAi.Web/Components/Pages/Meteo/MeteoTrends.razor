@page "/meteo/trends"
@inject IWeatherHistoryService WeatherHistoryService
@inject ILocalizationService Localizer
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using System.Globalization
@using Radzen
@using Radzen.Blazor
@using Radzen.Blazor.Rendering
@rendermode InteractiveServer

<PageTitle>@Localizer.GetString("Meteo.Trends.Title") - GrznarAI</PageTitle>

<div class="meteo-trends-container">
    <h1>@Localizer.GetString("Meteo.Trends.Title")</h1>
    
    <div class="period-selector mb-4">
        <div class="btn-group" role="group">
            <input type="radio" class="btn-check" name="periodOption" id="dayOption" autocomplete="off"
                   checked="@(CurrentPeriod == PeriodType.Day)" 
                   @onchange="@(() => ChangePeriodAsync(PeriodType.Day))" />
            <label class="btn btn-outline-primary" for="dayOption">@Localizer.GetString("Meteo.Trends.Day")</label>

            <input type="radio" class="btn-check" name="periodOption" id="weekOption" autocomplete="off"
                   checked="@(CurrentPeriod == PeriodType.Week)" 
                   @onchange="@(() => ChangePeriodAsync(PeriodType.Week))" />
            <label class="btn btn-outline-primary" for="weekOption">@Localizer.GetString("Meteo.Trends.Week")</label>

            <input type="radio" class="btn-check" name="periodOption" id="monthOption" autocomplete="off"
                   checked="@(CurrentPeriod == PeriodType.Month)" 
                   @onchange="@(() => ChangePeriodAsync(PeriodType.Month))" />
            <label class="btn btn-outline-primary" for="monthOption">@Localizer.GetString("Meteo.Trends.Month")</label>

            <input type="radio" class="btn-check" name="periodOption" id="yearOption" autocomplete="off"
                   checked="@(CurrentPeriod == PeriodType.Year)" 
                   @onchange="@(() => ChangePeriodAsync(PeriodType.Year))" />
            <label class="btn btn-outline-primary" for="yearOption">@Localizer.GetString("Meteo.Trends.Year")</label>
        </div>
        
        <div class="date-controls mt-2">
            @if (CurrentPeriod == PeriodType.Day)
            {
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ChangeDateAsync(-1)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <RadzenDatePicker @bind-Value="SelectedDate" DateFormat="d" Change="@(args => ChangeDatePickerAsync())" Class="date-picker" />
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => ChangeDateAsync(1)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            }
            else if (CurrentPeriod == PeriodType.Week)
            {
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ChangeDateAsync(-7)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <span class="me-2">@StartDate.ToString("d") - @EndDate.ToString("d")</span>
                    <RadzenDatePicker @bind-Value="SelectedDate" DateFormat="d" Change="@(args => ChangeDatePickerAsync())" Class="date-picker mx-2" />
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => ChangeDateAsync(7)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            }
            else if (CurrentPeriod == PeriodType.Month)
            {
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ChangeDateAsync(-30)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <span class="me-2">@StartDate.ToString("d") - @EndDate.ToString("d")</span>
                    <RadzenDatePicker @bind-Value="SelectedDate" DateFormat="d" Change="@(args => ChangeDatePickerAsync())" Class="date-picker mx-2" />
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => ChangeDateAsync(30)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            }
            else if (CurrentPeriod == PeriodType.Year)
            {
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ChangeDateAsync(-365)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <span class="me-2">@StartDate.ToString("d") - @EndDate.ToString("d")</span>
                    <RadzenDatePicker @bind-Value="SelectedDate" DateFormat="d" Change="@(args => ChangeDatePickerAsync())" Class="date-picker mx-2" />
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => ChangeDateAsync(365)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            }
        </div>
    </div>
    
    @if (IsLoading)
    {
        <div class="loading-indicator">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">@Localizer.GetString("Common.Loading")</span>
            </div>
        </div>
    }
    else if (WeatherData == null || !WeatherData.Any())
    {
        <div class="alert alert-info">
            @Localizer.GetString("Meteo.Trends.NoData")
        </div>
    }
    else
    {
        <div class="chart-container mb-5">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h2>@Localizer.GetString("Meteo.Trends.Temperature")</h2>
                <div class="temperature-summary">
                    <span class="badge bg-info me-2">Min: @TemperatureMinValue?.ToString("F1") °C</span>
                    <span class="badge bg-secondary me-2">Avg: @TemperatureAvgValue?.ToString("F1") °C</span>
                    <span class="badge bg-danger">Max: @TemperatureMaxValue?.ToString("F1") °C</span>
                </div>
            </div>
            
            <RadzenChart @ref="chart">
                <RadzenLegend Position="LegendPosition.Bottom" />
                
                <RadzenCategoryAxis Step="@GetDateAxisStep()" LabelAutoRotation="-45">
                    @if (CurrentPeriod == PeriodType.Day)
                    {
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.Time")" />
                        <RadzenAxisLabels FormatString="{0:HH:mm}" />
                    }
                    else if (CurrentPeriod == PeriodType.Week || CurrentPeriod == PeriodType.Month)
                    {
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.Date")" />
                        <RadzenAxisLabels FormatString="{0:MM-dd}" />
                    }
                    else
                    {
                        <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.Date")" />
                        <RadzenAxisLabels FormatString="{0:yyyy-MM-dd}" />
                    }
                    <RadzenGridLines Visible="true" />
                </RadzenCategoryAxis>
                
                <RadzenValueAxis Min="@GetTemperatureAxisMin()" Max="@GetTemperatureAxisMax()">
                    <RadzenAxisTitle Text="@Localizer.GetString("Meteo.Trends.Temperature")" />
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisOptions Formatter="@FormatTemperatureAxis" />
                </RadzenValueAxis>
                
                <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="DisplayTime" 
                                 Title="@Localizer.GetString("Meteo.Trends.MinTemperature")"
                                 LineType="LineType.Solid" ValueProperty="MinTemperature">
                    <RadzenMarkers MarkerType="MarkerType.Circle" Size="4" />
                </RadzenLineSeries>
                
                <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="DisplayTime" 
                                 Title="@Localizer.GetString("Meteo.Trends.AvgTemperature")"
                                 LineType="LineType.Solid" ValueProperty="AvgTemperature">
                    <RadzenMarkers MarkerType="MarkerType.Square" Size="4" />
                </RadzenLineSeries>
                
                <RadzenLineSeries Smooth="true" Data="@WeatherData" CategoryProperty="DisplayTime" 
                                 Title="@Localizer.GetString("Meteo.Trends.MaxTemperature")"
                                 LineType="LineType.Solid" ValueProperty="MaxTemperature">
                    <RadzenMarkers MarkerType="MarkerType.Diamond" Size="4" />
                </RadzenLineSeries>
                
                <RadzenChartTooltipOptions Visible="true" Shared="true" />
            </RadzenChart>
        </div>
    }
</div>

@code {
    private enum PeriodType
    {
        Day,
        Week,
        Month,
        Year
    }
    
    private class WeatherDataPoint
    {
        public DateTime Date { get; set; }
        public object DisplayTime { get; set; }
        public float? MinTemperature { get; set; }
        public float? AvgTemperature { get; set; }
        public float? MaxTemperature { get; set; }
    }
    
    private RadzenChart chart;
    private PeriodType CurrentPeriod { get; set; } = PeriodType.Day;
    private DateTime SelectedDate { get; set; } = DateTime.Now.Date;
    private DateTime StartDate { get; set; }
    private DateTime EndDate { get; set; }
    private bool IsLoading { get; set; } = true;
    private List<WeatherDataPoint> WeatherData { get; set; } = new List<WeatherDataPoint>();
    
    private float? TemperatureMinValue { get; set; }
    private float? TemperatureAvgValue { get; set; }
    private float? TemperatureMaxValue { get; set; }
    
    private string FormatTooltipDate(object dateValue)
    {
        if (CurrentPeriod == PeriodType.Day)
        {
            if (dateValue is TimeSpan timeSpan)
            {
                return $"{SelectedDate.ToShortDateString()} {timeSpan.ToString("hh\\:mm")}";
            }
        }
        else if (dateValue is DateTime dateTime)
        {
            return dateTime.ToString("yyyy-MM-dd");
        }
        else if (dateValue is string dateString)
        {
            return dateString;
        }
        
        return dateValue?.ToString() ?? "";
    }
    
    private string FormatTemperature(object value)
    {
        if (value is double doubleValue)
        {
            return $"{doubleValue:F1} °C";
        }
        else if (value is float floatValue)
        {
            return $"{floatValue:F1} °C";
        }
        
        return $"{value} °C";
    }
    
    protected override async Task OnInitializedAsync()
    {
        await SetupDateRangeAsync();
        await LoadDataAsync();
    }
    
    private async Task ChangePeriodAsync(PeriodType newPeriod)
    {
        try
        {
            CurrentPeriod = newPeriod;
            await SetupDateRangeAsync();
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing period: {ex.Message}");
        }
    }
    
    private async Task ChangeDateAsync(int days)
    {
        try
        {
            SelectedDate = SelectedDate.AddDays(days);
            await SetupDateRangeAsync();
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing date: {ex.Message}");
        }
    }
    
    private async Task ChangeDatePickerAsync()
    {
        try
        {
            await SetupDateRangeAsync();
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing date from calendar: {ex.Message}");
        }
    }
    
    private async Task SetupDateRangeAsync()
    {
        switch (CurrentPeriod)
        {
            case PeriodType.Day:
                StartDate = SelectedDate.Date;
                EndDate = StartDate.AddDays(1).AddSeconds(-1);
                break;
            case PeriodType.Week:
                StartDate = SelectedDate.Date.AddDays(-6);
                EndDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                break;
            case PeriodType.Month:
                StartDate = SelectedDate.Date.AddDays(-29);
                EndDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                break;
            case PeriodType.Year:
                StartDate = SelectedDate.Date.AddDays(-364);
                EndDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                break;
        }
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();
            
            var rawData = await WeatherHistoryService.GetHistoryAsync(StartDate.ToUniversalTime(), EndDate.ToUniversalTime());
            
            if (rawData == null || !rawData.Any())
            {
                WeatherData = new List<WeatherDataPoint>();
                IsLoading = false;
                StateHasChanged();
                return;
            }
            
            WeatherData = AggregateData(rawData);
            
            CalculateTemperatureSummary();
            
            IsLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    private List<WeatherDataPoint> AggregateData(List<WeatherHistory> rawData)
    {
        List<WeatherDataPoint> result = new List<WeatherDataPoint>();
        
        // Convert all UTC times to local time
        var localData = rawData.Select(d => new {
            Data = d,
            LocalTime = DateTime.SpecifyKind(d.Date, DateTimeKind.Utc).ToLocalTime()
        }).ToList();
        
        switch (CurrentPeriod)
        {
            case PeriodType.Day:
                // For day view, group by hour
                var dayGroups = localData
                    .GroupBy(d => new DateTime(
                        d.LocalTime.Year, d.LocalTime.Month, d.LocalTime.Day, 
                        d.LocalTime.Hour, 0, 0))
                    .OrderBy(g => g.Key);
                
                foreach (var group in dayGroups)
                {
                    result.Add(new WeatherDataPoint
                    {
                        Date = group.Key,
                        DisplayTime = group.Key.TimeOfDay,
                        MinTemperature = group.Min(d => d.Data.TemperatureOut),
                        AvgTemperature = group.Average(d => d.Data.TemperatureOut),
                        MaxTemperature = group.Max(d => d.Data.TemperatureOut)
                    });
                }
                break;
                
            case PeriodType.Week:
                // For week view, group by day
                var weekGroups = localData
                    .GroupBy(d => d.LocalTime.Date)
                    .OrderBy(g => g.Key);
                
                foreach (var group in weekGroups)
                {
                    result.Add(new WeatherDataPoint
                    {
                        Date = group.Key,
                        DisplayTime = group.Key,
                        MinTemperature = group.Min(d => d.Data.TemperatureOut),
                        AvgTemperature = group.Average(d => d.Data.TemperatureOut),
                        MaxTemperature = group.Max(d => d.Data.TemperatureOut)
                    });
                }
                break;
                
            case PeriodType.Month:
                // For month view, group by day
                var monthGroups = localData
                    .GroupBy(d => d.LocalTime.Date)
                    .OrderBy(g => g.Key);
                
                foreach (var group in monthGroups)
                {
                    result.Add(new WeatherDataPoint
                    {
                        Date = group.Key,
                        DisplayTime = group.Key,
                        MinTemperature = group.Min(d => d.Data.TemperatureOut),
                        AvgTemperature = group.Average(d => d.Data.TemperatureOut),
                        MaxTemperature = group.Max(d => d.Data.TemperatureOut)
                    });
                }
                break;
                
            case PeriodType.Year:
                // For year view, group by week
                var yearGroups = localData
                    .GroupBy(d => CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(
                        d.LocalTime, CalendarWeekRule.FirstDay, DayOfWeek.Monday))
                    .OrderBy(g => g.Key);
                
                foreach (var group in yearGroups)
                {
                    var firstDayOfGroup = group.OrderBy(d => d.LocalTime).First().LocalTime.Date;
                    
                    result.Add(new WeatherDataPoint
                    {
                        Date = firstDayOfGroup,
                        DisplayTime = firstDayOfGroup,
                        MinTemperature = group.Min(d => d.Data.TemperatureOut),
                        AvgTemperature = group.Average(d => d.Data.TemperatureOut),
                        MaxTemperature = group.Max(d => d.Data.TemperatureOut)
                    });
                }
                break;
        }
        
        return result;
    }
    
    private int GetDateAxisStep()
    {
        switch (CurrentPeriod)
        {
            case PeriodType.Day:
                return 4; // Every 4 hours
            case PeriodType.Week:
                return 1; // Every day
            case PeriodType.Month:
                return 7; // Every week
            case PeriodType.Year:
                return 12; // Every month
            default:
                return 1;
        }
    }
    
    private void CalculateTemperatureSummary()
    {
        if (WeatherData == null || !WeatherData.Any())
        {
            TemperatureMinValue = null;
            TemperatureAvgValue = null;
            TemperatureMaxValue = null;
            return;
        }
        
        TemperatureMinValue = WeatherData
            .Where(d => d.MinTemperature.HasValue)
            .Min(d => d.MinTemperature);
        
        // Calculate the average of all AvgTemperature values
        TemperatureAvgValue = WeatherData
            .Where(d => d.AvgTemperature.HasValue)
            .Average(d => d.AvgTemperature);
        
        TemperatureMaxValue = WeatherData
            .Where(d => d.MaxTemperature.HasValue)
            .Max(d => d.MaxTemperature);
    }
    
    private string FormatTemperatureAxis(object value)
    {
        if (value is double doubleValue)
        {
            // Zaokrouhlíme na 1 desetinné místo
            return $"{Math.Round(doubleValue, 1)} °C";
        }
        else if (value is float floatValue)
        {
            // Zaokrouhlíme na 1 desetinné místo
            return $"{Math.Round(floatValue, 1)} °C";
        }
        else if (value is int intValue)
        {
            return $"{intValue} °C";
        }
        
        return $"{value} °C";
    }
    
    private int GetTemperatureAxisMin()
    {
        switch (CurrentPeriod)
        {
            case PeriodType.Day:
                return GetTemperatureAxisMinDay();
            case PeriodType.Week:
                return GetTemperatureAxisMinWeek();
            case PeriodType.Month:
                return GetTemperatureAxisMinMonth();
            case PeriodType.Year:
                return GetTemperatureAxisMinYear();
            default:
                return 0;
        }
    }
    
    private int GetTemperatureAxisMax()
    {
        switch (CurrentPeriod)
        {
            case PeriodType.Day:
                return GetTemperatureAxisMaxDay();
            case PeriodType.Week:
                return GetTemperatureAxisMaxWeek();
            case PeriodType.Month:
                return GetTemperatureAxisMaxMonth();
            case PeriodType.Year:
                return GetTemperatureAxisMaxYear();
            default:
                return 40;
        }
    }
    
    private int GetTemperatureAxisMinDay()
    {
        if (WeatherData == null || !WeatherData.Any())
            return 0;
            
        var minTemp = WeatherData
            .Where(d => d.MinTemperature.HasValue)
            .Min(d => d.MinTemperature) ?? 10;
            
        var maxTemp = WeatherData
            .Where(d => d.MaxTemperature.HasValue)
            .Max(d => d.MaxTemperature) ?? 20;
            
        // Pro denní pohled chceme aby rozpětí bylo rozumné
        int lowerBound = (int)Math.Floor((double)minTemp - 2);
        
        // Pokud je rozpětí menší než 8 stupňů, rozšíříme ho
        if (maxTemp - lowerBound < 8)
            lowerBound = (int)maxTemp - 8;
            
        // Zaokrouhlíme na celá čísla dolů
        return lowerBound;
    }
    
    private int GetTemperatureAxisMaxDay()
    {
        if (WeatherData == null || !WeatherData.Any())
            return 30;
            
        var maxTemp = WeatherData
            .Where(d => d.MaxTemperature.HasValue)
            .Max(d => d.MaxTemperature) ?? 20;
            
        // Pro denní pohled nastavíme maximum o 2-3 stupně vyšší
        int upperBound = (int)Math.Ceiling((double)maxTemp + 2);
        
        // Zaokrouhlíme na celá čísla nahoru
        return upperBound;
    }
    
    private int GetTemperatureAxisMinWeek()
    {
        if (WeatherData == null || !WeatherData.Any())
            return -5;
            
        var minTemp = WeatherData
            .Where(d => d.MinTemperature.HasValue)
            .Min(d => d.MinTemperature) ?? 0;
            
        // Pro týdenní pohled ponecháme více prostoru, ale stále reálné teploty
        int lowerBound = (int)Math.Floor((double)minTemp - 3);
        
        // Nejnižší možné minimum pro ČR
        if (lowerBound < -15) lowerBound = -15;
            
        return lowerBound;
    }
    
    private int GetTemperatureAxisMaxWeek()
    {
        if (WeatherData == null || !WeatherData.Any())
            return 30;
            
        var maxTemp = WeatherData
            .Where(d => d.MaxTemperature.HasValue)
            .Max(d => d.MaxTemperature) ?? 25;
            
        // Pro týdenní pohled nastavíme maximum o 3 stupně vyšší
        int upperBound = (int)Math.Ceiling((double)maxTemp + 3);
        
        // Nejvyšší reálné teploty pro ČR
        if (upperBound > 40) upperBound = 40;
            
        return upperBound;
    }
    
    private int GetTemperatureAxisMinMonth()
    {
        if (WeatherData == null || !WeatherData.Any())
            return -10;
            
        var minTemp = WeatherData
            .Where(d => d.MinTemperature.HasValue)
            .Min(d => d.MinTemperature) ?? -5;
            
        // Pro měsíční pohled
        int lowerBound = (int)Math.Floor((double)minTemp - 3);
        
        // Nejnižší možné minimum pro ČR
        if (lowerBound < -20) lowerBound = -20;
            
        return lowerBound;
    }
    
    private int GetTemperatureAxisMaxMonth()
    {
        if (WeatherData == null || !WeatherData.Any())
            return 35;
            
        var maxTemp = WeatherData
            .Where(d => d.MaxTemperature.HasValue)
            .Max(d => d.MaxTemperature) ?? 25;
            
        int upperBound = (int)Math.Ceiling((double)maxTemp + 3);
        
        if (upperBound > 40) upperBound = 40;
            
        return upperBound;
    }
    
    private int GetTemperatureAxisMinYear()
    {
        if (WeatherData == null || !WeatherData.Any())
            return -15;
            
        var minTemp = WeatherData
            .Where(d => d.MinTemperature.HasValue)
            .Min(d => d.MinTemperature) ?? -10;
            
        // Pro roční pohled
        int lowerBound = (int)Math.Floor((double)minTemp - 2);
        
        // Nejnižší možné minimum pro ČR
        if (lowerBound < -25) lowerBound = -25;
            
        return lowerBound;
    }
    
    private int GetTemperatureAxisMaxYear()
    {
        if (WeatherData == null || !WeatherData.Any())
            return 35;
            
        var maxTemp = WeatherData
            .Where(d => d.MaxTemperature.HasValue)
            .Max(d => d.MaxTemperature) ?? 30;
            
        int upperBound = (int)Math.Ceiling((double)maxTemp + 2);
        
        if (upperBound > 40) upperBound = 40;
            
        return upperBound;
    }
}

<style>
    .meteo-trends-container {
        padding: 20px;
    }
    
    .period-selector {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }
    
    .temperature-summary {
        font-weight: 500;
    }
    
    .loading-indicator {
        display: flex;
        justify-content: center;
        padding: 40px;
    }
    
    .chart-container {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .date-controls {
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .date-picker {
        width: 150px;
    }
    
    /* Custom styles for the chart tooltip */
    :deep(.rz-tooltip) {
        background: rgba(0, 0, 0, 0.8) !important;
        color: white !important;
        padding: 8px 12px !important;
        border-radius: 4px !important;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
        font-size: 0.9rem !important;
        white-space: nowrap !important;
        border: none !important;
    }
    
    @@media (max-width: 768px) {
        .temperature-summary {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }
    }
</style> 