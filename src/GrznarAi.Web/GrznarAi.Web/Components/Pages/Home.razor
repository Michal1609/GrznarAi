@page "/"
@inject IJSRuntime JSRuntime
@inject GrznarAi.Web.Services.ILocalizationService Localizer
@inject GrznarAi.Web.Services.IBlogService BlogService
@using GrznarAi.Web.Data
@using GrznarAi.Web.Components.Pages.Blog.Models
@using System.Globalization

<PageTitle>@Localizer.GetString("HomePage.Title")</PageTitle>

<!-- Hero Carousel -->
<div id="heroCarousel" class="carousel slide carousel-fade hero-carousel" data-bs-ride="carousel">
    <div class="carousel-indicators">
        <button type="button" data-bs-target="#heroCarousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
        <button type="button" data-bs-target="#heroCarousel" data-bs-slide-to="1" aria-label="Slide 2"></button>
        <button type="button" data-bs-target="#heroCarousel" data-bs-slide-to="2" aria-label="Slide 3"></button>
    </div>
    <div class="carousel-inner">
        <div class="carousel-item active" style="background: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url('/images/hero-1.svg'); background-size: cover; background-position: center;">
            <div class="carousel-caption d-block">
                <h1>@Localizer.GetString("HomePage.Carousel1.Title")</h1>
                <p class="lead">@Localizer.GetString("HomePage.Carousel1.Lead")</p>
                <div class="mt-4">
                    <a href="/blog" class="btn btn-primary me-2">@Localizer.GetString("HomePage.Carousel.ReadBlogButton")</a>
                    <a href="/projects" class="btn btn-outline-light">@Localizer.GetString("HomePage.Carousel.ViewProjectsButton")</a>
                </div>
            </div>
        </div>
        <div class="carousel-item" style="background: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url('/images/hero-2.svg'); background-size: cover; background-position: center;">
            <div class="carousel-caption d-block">
                <h1>@Localizer.GetString("HomePage.Carousel2.Title")</h1>
                <p class="lead">@Localizer.GetString("HomePage.Carousel2.Lead")</p>
                <div class="mt-4">
                    <a href="/projects" class="btn btn-primary">@Localizer.GetString("HomePage.Carousel.ViewProjectsButton")</a>
                </div>
            </div>
        </div>
        <div class="carousel-item" style="background: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url('/images/hero-3.svg'); background-size: cover; background-position: center;">
            <div class="carousel-caption d-block">
                <h1>@Localizer.GetString("HomePage.Carousel3.Title")</h1>
                <p class="lead">@Localizer.GetString("HomePage.Carousel3.Lead")</p>
                <div class="mt-4">
                    <a href="/meteo" class="btn btn-primary">@Localizer.GetString("HomePage.Carousel.ViewMeteoButton")</a>
                </div>
            </div>
        </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#heroCarousel" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">@Localizer.GetString("HomePage.Carousel.Previous")</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#heroCarousel" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">@Localizer.GetString("HomePage.Carousel.Next")</span>
    </button>
</div>

<!-- Featured Content -->
<div class="container mt-5">
    <div class="row">
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-body d-flex flex-column">
                    <div class="text-center mb-3">
                        <i class="bi bi-journal-richtext text-primary" style="font-size: 3rem;"></i>
                    </div>
                    <h3 class="card-title text-center">@Localizer.GetString("HomePage.Featured.Blog.Title")</h3>
                    <p class="card-text">@Localizer.GetString("HomePage.Featured.Blog.Text")</p>
                    <div class="text-center mt-auto">
                        <a href="/blog" class="btn btn-outline-primary">@Localizer.GetString("HomePage.Carousel.ReadBlogButton")</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-body d-flex flex-column">
                    <div class="text-center mb-3">
                        <i class="bi bi-code-square text-primary" style="font-size: 3rem;"></i>
                    </div>
                    <h3 class="card-title text-center">@Localizer.GetString("HomePage.Featured.Projects.Title")</h3>
                    <p class="card-text">@Localizer.GetString("HomePage.Featured.Projects.Text")</p>
                    <div class="text-center mt-auto">
                        <a href="/projects" class="btn btn-outline-primary">@Localizer.GetString("HomePage.Carousel.ViewProjectsButton")</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-body d-flex flex-column">
                    <div class="text-center mb-3">
                        <i class="bi bi-cloud-sun text-primary" style="font-size: 3rem;"></i>
                    </div>
                    <h3 class="card-title text-center">@Localizer.GetString("HomePage.Featured.Meteo.Title")</h3>
                    <p class="card-text">@Localizer.GetString("HomePage.Featured.Meteo.Text")</p>
                    <div class="text-center mt-auto">
                        <a href="/meteo" class="btn btn-outline-primary">@Localizer.GetString("HomePage.Carousel.ViewMeteoButton")</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Latest Blog Posts -->
<div class="container mt-5">
    <h2 class="mb-4">@Localizer.GetString("HomePage.LatestPosts.Title")</h2>
    <div class="row">
        @if (isLoading)
        {
            <div class="d-flex justify-content-center w-100 py-4">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">@Localizer.GetString("BlogPost.Loading")</span>
                </div>
            </div>
        }
        else if (latestPosts.Count == 0)
        {
            <div class="col-12">
                <div class="alert alert-info">
                    @Localizer.GetString("HomePage.LatestPosts.NoPosts")
                </div>
            </div>
        }
        else
        {
            @foreach (var post in latestPosts)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@post.Title</h5>
                            <p class="card-text text-muted">@post.CreatedAt.ToString("d. MMMM yyyy")</p>
                            <p class="card-text flex-grow-1">@post.Description</p>
                            <a href="/blog/@post.Slug" class="btn btn-sm btn-primary mt-auto">@Localizer.GetString("HomePage.LatestPosts.ReadMore")</a>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <div class="text-center mt-3">
        <a href="/blog" class="btn btn-outline-primary">@Localizer.GetString("HomePage.LatestPosts.ViewAll")</a>
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<BlogViewModel> latestPosts = new();
    private CultureInfo currentCulture => CultureInfo.CurrentUICulture;
    private string languageCode => currentCulture.TwoLetterISOLanguageName;

    protected override async Task OnInitializedAsync()
    {
        await LoadLatestPosts();
    }

    private async Task LoadLatestPosts()
    {
        isLoading = true;
        
        try
        {
            // Získáme poslední 3 publikované příspěvky v aktuálním jazyce
            var posts = await BlogService.GetPublishedBlogsAsync(languageCode, 0, 3);
            
            // Pokud nejsou k dispozici žádné příspěvky v aktuálním jazyce, zkusíme je načíst v angličtině
            if (posts.Count == 0 && languageCode != "en")
            {
                posts = await BlogService.GetPublishedBlogsAsync("en", 0, 3);
                
                // Pokud ani v angličtině nejsou žádné příspěvky, zkusíme je načíst v češtině
                if (posts.Count == 0 && languageCode != "cs")
                {
                    posts = await BlogService.GetPublishedBlogsAsync("cs", 0, 3);
                }
            }
            
            // Převedeme příspěvky na viewmodel
            latestPosts = posts.Select(MapBlogContentToViewModel).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při načítání posledních příspěvků: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private BlogViewModel MapBlogContentToViewModel(BlogContent blogContent)
    {
        string slug = blogContent.Title.ToLower()
            .Replace(" ", "-")
            .Replace("č", "c")
            .Replace("ř", "r")
            .Replace("ž", "z")
            .Replace("š", "s")
            .Replace("ý", "y")
            .Replace("á", "a")
            .Replace("í", "i")
            .Replace("é", "e")
            .Replace("ú", "u")
            .Replace("ů", "u")
            .Replace("ň", "n")
            .Replace("ť", "t")
            .Replace("ď", "d");
        
        return new BlogViewModel
        {
            Id = blogContent.Id,
            BlogId = blogContent.BlogId,
            Title = blogContent.Title,
            Slug = slug,
            Description = blogContent.Description ?? "",
            Content = blogContent.Content,
            Tags = blogContent.Tags?.Split(',').Select(t => t.Trim()).Where(t => !string.IsNullOrWhiteSpace(t)).ToList() ?? new List<string>(),
            CreatedAt = blogContent.CreatedAt,
            UpdatedAt = blogContent.UpdatedAt ?? blogContent.CreatedAt,
            IsPublished = blogContent.IsPublished
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load carousel script
            await JSRuntime.InvokeVoidAsync("eval", $"var script = document.createElement('script'); script.src = '/js/carousel.js?v={DateTime.Now.Ticks}'; document.head.appendChild(script);");
        }
    }
}
