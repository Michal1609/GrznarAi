@page "/blog/{Slug}"
@using GrznarAi.Web.Services
@using GrznarAi.Web.Data
@using GrznarAi.Web.Components.Pages.Blog.Models
@using GrznarAi.Web.Components.Blog
@using System.Globalization
@inject IBlogService BlogService
@inject ICommentService CommentService
@inject MarkdownService MarkdownService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalizationService Localizer

<PageTitle>@(blogViewModel?.Title ?? Localizer.GetString("BlogPost.Title")) - GrznarAI</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-lg-8">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">@Localizer.GetString("BlogPost.Loading")</span>
                    </div>
                </div>
            }
            else if (blogViewModel != null)
            {
                <article class="blog-post">
                    <h1 class="blog-post-title">@blogViewModel.Title</h1>
                    <p class="blog-post-meta">
                        @blogViewModel.CreatedAt.ToString("d. MMMM yyyy")
                    </p>

                    <div class="mb-3">
                        @foreach (var tag in blogViewModel.Tags)
                        {
                            <a href="/blog/tag/@tag" class="badge bg-secondary me-1 text-decoration-none">@tag</a>
                        }
                    </div>
                    
                    @if (blogViewModel.BlogId > 0)
                    {
                        <BlogVotingWidget @rendermode="InteractiveServer"
                            BlogId="@blogViewModel.BlogId" 
                            LikesCount="@likesCount" 
                            DislikesCount="@dislikesCount" 
                            OnVotesChanged="@HandleVotesChanged" />
                    }

                    <div class="blog-post-content">
                        @((MarkupString)MarkdownService.ConvertToHtml(blogViewModel.Content))
                    </div>

                    <hr class="my-5">

                    <!-- Author info -->
                    <div class="card mb-5">
                        <div class="card-body">
                            <div class="d-flex">
                                <div class="flex-shrink-0">
                                    <img src="/images/logo.svg" alt="@Localizer.GetString("BlogPost.Author.Alt")" class="rounded-circle" width="60" height="60">
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <h5>@Localizer.GetString("BlogPost.Author.Name")</h5>
                                    <p class="text-muted mb-0">@Localizer.GetString("BlogPost.Author.Description")</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Komentáře -->
                    @if (blogViewModel.BlogId > 0)
                    {
                        <div class="mt-5">
                            <CommentList @rendermode="InteractiveServer" BlogId="@blogViewModel.BlogId" />
                        </div>
                    }
                </article>
            }
            else
            {
                <div class="alert alert-warning">
                    <h3>@Localizer.GetString("BlogPost.NotFound.Title")</h3>
                    <p>@Localizer.GetString("BlogPost.NotFound.Description")</p>
                    <a href="/blog" class="btn btn-primary">@Localizer.GetString("BlogPost.BackToBlog")</a>
                </div>
            }
        </div>

        <div class="col-lg-4">
            <div class="blog-sidebar">
                <!-- Související příspěvky -->
                @if (relatedPosts.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4 class="mb-0">@Localizer.GetString("BlogPost.RelatedPosts")</h4>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled">
                                @foreach (var relatedPost in relatedPosts)
                                {
                                    <li class="mb-3">
                                        <a href="/blog/@relatedPost.Slug">@relatedPost.Title</a>
                                        <div class="text-muted small">@relatedPost.CreatedAt.ToString("d. MMMM yyyy")</div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                <!-- Populární tagy -->
                @if (popularTags.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4 class="mb-0">@Localizer.GetString("BlogPost.PopularTags")</h4>
                        </div>
                        <div class="card-body">
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var tag in popularTags)
                                {
                                    <a href="/blog/tag/@tag" class="badge bg-secondary text-decoration-none">@tag</a>
                                }
                            </div>
                        </div>
                    </div>
                }

                <!-- Sdílení -->
                <div class="card">
                    <div class="card-header">
                        <h4 class="mb-0">@Localizer.GetString("BlogPost.Share")</h4>
                    </div>
                    <div class="card-body">
                        <div class="d-flex gap-2">
                            <a href="javascript:void(0)" onclick="shareToFacebook()" class="btn btn-outline-primary" title="@Localizer.GetString("BlogPost.Share.Facebook")">
                                <i class="bi bi-facebook"></i>
                            </a>
                            <a href="javascript:void(0)" onclick="shareToTwitter()" class="btn btn-outline-primary" title="@Localizer.GetString("BlogPost.Share.Twitter")">
                                <i class="bi bi-twitter"></i>
                            </a>
                            <a href="javascript:void(0)" onclick="shareToLinkedIn()" class="btn btn-outline-primary" title="@Localizer.GetString("BlogPost.Share.LinkedIn")">
                                <i class="bi bi-linkedin"></i>
                            </a>
                            <a href="javascript:void(0)" onclick="shareByEmail()" class="btn btn-outline-primary" title="@Localizer.GetString("BlogPost.Share.Email")">
                                <i class="bi bi-envelope"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public required string Slug { get; set; }

    private BlogViewModel? blogViewModel;
    private List<BlogViewModel> relatedPosts = new List<BlogViewModel>();
    private List<string> popularTags = new List<string>();
    private bool isLoading = true;
    private int likesCount = 0;
    private int dislikesCount = 0;
    
    // Jazyk pro blog, získáme aktuální jazyk z CultureInfo
    private string languageCode => CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToLower();

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            await LoadBlogAsync();
        }
    }

    private async Task LoadBlogAsync()
    {
        isLoading = true;

        try
        {
            // Načtení blogového příspěvku podle slugu
            var blogContent = await LoadBlogContentWithFallbackAsync(Slug);
            
            if (blogContent != null)
            {
                blogViewModel = new BlogViewModel
                {
                    Id = blogContent.Id,
                    BlogId = blogContent.BlogId,
                    Title = blogContent.Title,
                    Slug = Slug,
                    Description = blogContent.Description ?? "",
                    Content = blogContent.Content,
                    Tags = ParseTags(blogContent.Tags),
                    CreatedAt = blogContent.CreatedAt,
                    UpdatedAt = blogContent.UpdatedAt ?? DateTime.UtcNow,
                    IsPublished = blogContent.IsPublished
                };
                
                // Načtení počtu hlasů
                if (blogViewModel.BlogId > 0)
                {
                    var blog = await BlogService.GetBlogByIdAsync(blogViewModel.BlogId);
                    if (blog != null)
                    {
                        likesCount = blog.LikesCount;
                        dislikesCount = blog.DislikesCount;
                    }
                }
                
                // Načtení populárních tagů
                popularTags = await BlogService.GetPopularTagsAsync(languageCode);
                
                // Načtení souvisejících příspěvků (příspěvky se stejnými tagy)
                await LoadRelatedPostsAsync(blogViewModel.Tags);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blog post: {ex.Message}");
            // Můžeme zde implementovat lepší zpracování chyb
        }
        
        isLoading = false;
    }
    
    private async Task<BlogContent?> LoadBlogContentWithFallbackAsync(string slug)
    {
        // Nejprve zkusíme načíst obsah v aktuálním jazyce
        var content = await BlogService.GetBlogContentBySlugAsync(languageCode, slug);
        
        // Pokud není obsah v aktuálním jazyce, zkusíme angličtinu
        if (content == null && languageCode != "en")
        {
            content = await BlogService.GetBlogContentBySlugAsync("en", slug);
            
            // Pokud ani v angličtině není obsah a není to čeština, zkusíme češtinu
            if (content == null && languageCode != "cs")
            {
                content = await BlogService.GetBlogContentBySlugAsync("cs", slug);
            }
        }
        
        return content;
    }
    
    private async Task LoadRelatedPostsAsync(List<string> tags)
    {
        if (tags.Count == 0 || blogViewModel == null)
            return;
            
        relatedPosts.Clear();
        
        try
        {
            foreach (var tag in tags)
            {
                // Získání příspěvků se stejným tagem
                var postsWithTag = await BlogService.GetBlogsByTagAsync(languageCode, tag, 0, 5);
                
                foreach (var post in postsWithTag)
                {
                    // Přidáme jen pokud to není aktuální příspěvek a ještě není v seznamu
                    if (post.Id != blogViewModel.Id && !relatedPosts.Any(p => p.Id == post.Id))
                    {
                        relatedPosts.Add(new BlogViewModel
                        {
                            Id = post.Id,
                            BlogId = post.BlogId,
                            Title = post.Title,
                            Slug = GenerateSlug(post.Title),
                            Description = post.Description ?? "",
                            CreatedAt = post.CreatedAt,
                            UpdatedAt = post.UpdatedAt ?? DateTime.UtcNow,
                            IsPublished = post.IsPublished
                        });
                        
                        // Omezíme počet souvisejících příspěvků
                        if (relatedPosts.Count >= 3)
                            break;
                    }
                }
                
                // Pokud už máme dost příspěvků, končíme
                if (relatedPosts.Count >= 3)
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading related posts: {ex.Message}");
        }
    }
    
    private List<string> ParseTags(string? tagString)
    {
        if (string.IsNullOrWhiteSpace(tagString))
            return new List<string>();
            
        return tagString.Split(',')
            .Select(t => t.Trim())
            .Where(t => !string.IsNullOrWhiteSpace(t))
            .ToList();
    }
    
    private string GenerateSlug(string title)
    {
        // Jednoduchá implementace generování slugu
        // V reálné aplikaci by měla být sofistikovanější
        if (string.IsNullOrWhiteSpace(title))
            return "";
            
        return title.ToLower()
            .Replace(" ", "-")
            .Replace("č", "c")
            .Replace("ř", "r")
            .Replace("ž", "z")
            .Replace("š", "s")
            .Replace("ě", "e")
            .Replace("ť", "t")
            .Replace("ď", "d")
            .Replace("ň", "n")
            .Replace("ú", "u")
            .Replace("ů", "u")
            .Replace("á", "a")
            .Replace("í", "i")
            .Replace("é", "e")
            .Replace("ý", "y")
            .Replace("ó", "o");
    }
    
    // Metody pro sdílení příspěvku
    private async Task ShareToFacebook()
    {
        await JSRuntime.InvokeVoidAsync("window.open", $"https://www.facebook.com/sharer/sharer.php?u={Uri.EscapeDataString(NavigationManager.Uri)}", "_blank");
    }
    
    private async Task ShareToTwitter()
    {
        string text = blogViewModel?.Title ?? Localizer.GetString("BlogPost.Share.DefaultTitle");
        await JSRuntime.InvokeVoidAsync("window.open", $"https://twitter.com/intent/tweet?text={Uri.EscapeDataString(text)}&url={Uri.EscapeDataString(NavigationManager.Uri)}", "_blank");
    }
    
    private async Task ShareToLinkedIn()
    {
        await JSRuntime.InvokeVoidAsync("window.open", $"https://www.linkedin.com/sharing/share-offsite/?url={Uri.EscapeDataString(NavigationManager.Uri)}", "_blank");
    }
    
    private async Task ShareByEmail()
    {
        string subject = blogViewModel?.Title ?? Localizer.GetString("BlogPost.Share.DefaultTitle");
        string body = Localizer.GetString("BlogPost.Share.EmailBody", NavigationManager.Uri);
        await JSRuntime.InvokeVoidAsync("window.open", $"mailto:?subject={Uri.EscapeDataString(subject)}&body={Uri.EscapeDataString(body)}", "_blank");
    }

    private void HandleVotesChanged((int likes, int dislikes) voteInfo)
    {
        likesCount = voteInfo.likes;
        dislikesCount = voteInfo.dislikes;
        StateHasChanged();
    }
}
