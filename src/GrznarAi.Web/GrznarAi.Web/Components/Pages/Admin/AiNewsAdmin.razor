@page "/admin/ainews"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin")]
@rendermode InteractiveServer

@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using System.Globalization
@using Microsoft.AspNetCore.Components.Web

@inject IAiNewsService AiNewsService
@inject ILocalizationService Localizer
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>@Localizer.GetString("Administration.AiNews.Title")</PageTitle>

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2>@Localizer.GetString("Administration.AiNews.Title")</h2>
            <p class="mb-0">@Localizer.GetString("Administration.AiNews.Description")</p>
        </div>
        <div class="card-body">
            <div class="mb-4">
                <div class="row">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" 
                                   placeholder="@Localizer.GetString("Administration.AiNews.Filter")" 
                                   @bind-value="searchTerm" 
                                   @bind-value:event="oninput" 
                                   @onkeyup="HandleSearchKeyPress" />
                            <button class="btn btn-primary" @onclick="Search">
                                <i class="bi bi-search"></i> @Localizer.GetString("Administration.Search")
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">@Localizer.GetString("Administration.Loading")</span>
                    </div>
                    <span class="ms-3">@Localizer.GetString("Administration.Loading")</span>
                </div>
            }
            else if (newsItems.Count == 0)
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    @Localizer.GetString("Administration.AiNews.NoItems")
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>@Localizer.GetString("AiNews.Title") (CZ)</th>
                                <th>@Localizer.GetString("AiNews.Title") (EN)</th>
                                <th>Datum publikace</th>
                                <th>Zdroj</th>
                                <th>@Localizer.GetString("Administration.Actions")</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in newsItems)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.TitleCz</td>
                                    <td>@item.TitleEn</td>
                                    <td>@(item.PublishedDate?.ToString("d. MMMM yyyy") ?? "Nedatováno")</td>
                                    <td>@(string.IsNullOrEmpty(item.SourceName) ? "-" : item.SourceName)</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(item)">
                                            <i class="bi bi-trash"></i> @Localizer.GetString("Administration.AiNews.Delete")
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-center mt-4">
                    <nav>
                        <ul class="pagination">
                            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="PreviousPage" disabled="@(currentPage <= 1)">
                                    &laquo;
                                </button>
                            </li>

                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                var pageNumber = i;
                                <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                </li>
                            }

                            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="NextPage" disabled="@(currentPage >= totalPages)">
                                    &raquo;
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div>

@if (deleteConfirmationVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Localizer.GetString("Administration.Confirmation")</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteConfirmation"></button>
                </div>
                <div class="modal-body">
                    <p>@Localizer.GetString("Administration.AiNews.DeleteConfirmation")</p>
                    <p><strong>@(newsItemToDelete?.TitleCz ?? "")</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmation">
                        @Localizer.GetString("Administration.Cancel")
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteNewsItem">
                        @Localizer.GetString("Administration.AiNews.Delete")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<AiNewsItem> newsItems = new();
    private string searchTerm = "";
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private int totalPages => (int)Math.Ceiling(totalCount / (double)pageSize);

    // Proměnné pro potvrzení mazání
    private bool deleteConfirmationVisible = false;
    private AiNewsItem? newsItemToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadNewsAsync();
    }

    private async Task LoadNewsAsync()
    {
        isLoading = true;
        try
        {
            var result = await AiNewsService.GetAiNewsAsync(currentPage, pageSize, searchTerm);
            newsItems = result.Items;
            totalCount = result.TotalCount;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při načítání dat: {ex.Message}");
            newsItems = new List<AiNewsItem>();
            totalCount = 0;
        }
        isLoading = false;
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadNewsAsync();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadNewsAsync();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadNewsAsync();
        }
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadNewsAsync();
    }

    private void ShowDeleteConfirmation(AiNewsItem item)
    {
        newsItemToDelete = item;
        deleteConfirmationVisible = true;
    }

    private void CloseDeleteConfirmation()
    {
        deleteConfirmationVisible = false;
        newsItemToDelete = null;
    }

    private async Task DeleteNewsItem()
    {
        if (newsItemToDelete != null)
        {
            try
            {
                var result = await AiNewsService.DeleteAiNewsItemAsync(newsItemToDelete.Id);
                
                // Uzavřeme dialog ještě před voláním JSRuntime
                CloseDeleteConfirmation();
                
                if (result)
                {
                    // Použijeme Toastify pro notifikaci
                    await JSRuntime.InvokeVoidAsync("Toastify", new { 
                        text = "Novinka byla úspěšně smazána", 
                        duration = 3000, 
                        gravity = "bottom", 
                        position = "right", 
                        style = new { 
                            background = "linear-gradient(to right, #00b09b, #96c93d)" 
                        }
                    });
                    
                    // Po smazání můžeme zkontrolovat, zda na aktuální stránce zůstaly nějaké položky
                    // Pokud by po smazání na stránce nezbyly žádné položky a není to první stránka,
                    // vrátíme se o stránku zpět
                    if (newsItems.Count <= 1 && currentPage > 1)
                    {
                        currentPage--;
                    }
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("Toastify", new { 
                        text = "Chyba při mazání novinky", 
                        duration = 3000, 
                        gravity = "bottom", 
                        position = "right", 
                        style = new { 
                            background = "linear-gradient(to right, #ff5f6d, #ffc371)" 
                        }
                    });
                }
                
                // Načteme novinky až po zobrazení zprávy
                await LoadNewsAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Chyba při mazání: {ex.Message}");
                
                try 
                {
                    await JSRuntime.InvokeVoidAsync("Toastify", new { 
                        text = "Chyba při mazání novinky: " + ex.Message, 
                        duration = 3000, 
                        gravity = "bottom", 
                        position = "right", 
                        style = new { 
                            background = "linear-gradient(to right, #ff5f6d, #ffc371)" 
                        }
                    });
                }
                catch (Exception jsEx)
                {
                    // Pokud selže Toastify, zkusíme alespoň základní alert
                    Console.WriteLine($"Chyba při zobrazení Toastify: {jsEx.Message}");
                    await JSRuntime.InvokeVoidAsync("alert", "Chyba při mazání novinky: " + ex.Message);
                }
                
                CloseDeleteConfirmation();
                await LoadNewsAsync();
            }
        }
    }
} 