@page "/admin/localization"
@attribute [Authorize]
@rendermode InteractiveServer
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject ILocalizationService LocalizationService
@inject IJSRuntime JSRuntime
@inject ILogger<LocalizationAdmin> Logger

<PageTitle>Localization Management</PageTitle>

<h1>Localization Management</h1>

<div class="mb-3">
    <a href="/admin/localization/new" class="btn btn-primary">Add New String Entry</a>
    <button class="btn btn-success ms-2" @onclick="InstallFromJson" disabled="@isInstalling">
        @if (isInstalling)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="ms-1">Instaluji...</span>
        }
        else
        {
            <span>Instalovat lokalizace z JSON</span>
        }
    </button>
    <button class="btn btn-danger ms-2" @onclick="DeleteAllLocalizations" disabled="@isDeletingAll">
        @if (isDeletingAll)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="ms-1">Mažu...</span>
        }
        else
        {
            <span>Smazat všechny lokalizace</span>
        }
    </button>
</div>
@if (!string.IsNullOrEmpty(installMessage))
{
    <div class="alert @(installSuccess ? "alert-success" : "alert-danger") mt-2">@installMessage</div>
}
@if (!string.IsNullOrEmpty(deleteAllMessage))
{
    <div class="alert @(deleteAllSuccess ? "alert-success" : "alert-danger") mt-2">@deleteAllMessage</div>
}

@if (localizationStrings == null)
{
    <p><em>Loading strings...</em></p>
}
else if (!localizationStrings.Any())
{
     <p><em>No localization strings found.</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Key</th>
                    <th>Language</th>
                    <th>Value</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in localizationStrings)
                {
                    <tr>
                        <td><code>@item.Key</code></td>
                        <td>@item.LanguageCode</td>
                        <td>@item.Value</td>
                        <td>@item.Description</td>
                        <td>
                            <a href="/admin/localization/edit/@item.Id" class="btn btn-sm btn-secondary me-1">Edit</a>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteString(item.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<LocalizationString>? localizationStrings;
    private bool isInstalling = false;
    private string? installMessage = null;
    private bool installSuccess = false;
    private bool isDeletingAll = false;
    private string? deleteAllMessage = null;
    private bool deleteAllSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStrings();
    }

    private async Task LoadStrings()
    {
        try
        {
            localizationStrings = await LocalizationService.GetAllStringsAdminAsync();
            StateHasChanged(); // Ensure UI updates after loading
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading localization strings for admin.");
            localizationStrings = new List<LocalizationString>(); // Initialize to empty list on error
        }
    }

    private async Task DeleteString(int id)
    {
        // Confirmation dialog
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this specific language entry (ID: {id})?"))
        {
            return; 
        }

        try
        {
            await LocalizationService.DeleteStringAsync(id);
            Logger.LogInformation("Deleted localization string entry with ID {Id}", id);
            await LoadStrings(); // Reload list after deletion
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting localization string entry with ID {Id}", id);
            // Optionally show an error message to the user via JS interop or a Blazor component
            await JSRuntime.InvokeVoidAsync("alert", "Error deleting localization string entry.");
        }
    }

    private async Task InstallFromJson()
    {
        isInstalling = true;
        installMessage = null;
        installSuccess = false;
        try
        {
            var result = await LocalizationService.InstallFromJsonAsync();
            if (result)
            {
                installMessage = "Lokalizace byly úspěšně nainstalovány ze seedovacího JSON souboru.";
                installSuccess = true;
                await LoadStrings();
            }
            else
            {
                installMessage = "Chyba při instalaci lokalizací ze seedovacího JSON souboru.";
                installSuccess = false;
            }
        }
        catch (Exception ex)
        {
            installMessage = $"Chyba: {ex.Message}";
            installSuccess = false;
        }
        isInstalling = false;
    }

    private async Task DeleteAllLocalizations()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Opravdu chcete smazat všechny lokalizace? Tato akce je nevratná!"))
            return;
        isDeletingAll = true;
        deleteAllMessage = null;
        deleteAllSuccess = false;
        try
        {
            await LocalizationService.DeleteAllStringsAsync();
            deleteAllMessage = "Všechny lokalizace byly smazány.";
            deleteAllSuccess = true;
            await LoadStrings();
        }
        catch (Exception ex)
        {
            deleteAllMessage = $"Chyba při mazání všech lokalizací: {ex.Message}";
            deleteAllSuccess = false;
        }
        isDeletingAll = false;
    }
} 