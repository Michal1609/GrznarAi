@page "/meteo/trends"
@inject IWeatherHistoryService WeatherHistoryService
@inject ILocalizationService Localizer
@inject IJSRuntime JSRuntime
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using System.Globalization
@using Microsoft.JSInterop
@rendermode InteractiveServer

<PageTitle>@Localizer.GetString("Meteo.Trends.Title") - GrznarAI</PageTitle>

<div class="meteo-trends-container">
    <h1>@Localizer.GetString("Meteo.Trends.Title")</h1>
    
    <div class="period-selector mb-4">
        <div class="btn-group" role="group">
            <input type="radio" class="btn-check" name="periodOption" id="dayOption" autocomplete="off"
                   checked="@(CurrentPeriod == PeriodType.Day)" 
                   @onchange="@(() => ChangePeriodAsync(PeriodType.Day))" />
            <label class="btn btn-outline-primary" for="dayOption">@Localizer.GetString("Meteo.Trends.Day")</label>

            <input type="radio" class="btn-check" name="periodOption" id="weekOption" autocomplete="off"
                   checked="@(CurrentPeriod == PeriodType.Week)" 
                   @onchange="@(() => ChangePeriodAsync(PeriodType.Week))" />
            <label class="btn btn-outline-primary" for="weekOption">@Localizer.GetString("Meteo.Trends.Week")</label>

            <input type="radio" class="btn-check" name="periodOption" id="monthOption" autocomplete="off"
                   checked="@(CurrentPeriod == PeriodType.Month)" 
                   @onchange="@(() => ChangePeriodAsync(PeriodType.Month))" />
            <label class="btn btn-outline-primary" for="monthOption">@Localizer.GetString("Meteo.Trends.Month")</label>

            <input type="radio" class="btn-check" name="periodOption" id="yearOption" autocomplete="off"
                   checked="@(CurrentPeriod == PeriodType.Year)" 
                   @onchange="@(() => ChangePeriodAsync(PeriodType.Year))" />
            <label class="btn btn-outline-primary" for="yearOption">@Localizer.GetString("Meteo.Trends.Year")</label>
        </div>
        
        <div class="date-controls mt-2">
            @if (CurrentPeriod == PeriodType.Day)
            {
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ChangeDateAsync(-1)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <input type="date" class="form-control date-picker" value="@SelectedDate.ToString("yyyy-MM-dd")" @onchange="@(e => ChangeDateFromInputAsync(e.Value))" />
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => ChangeDateAsync(1)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            }
            else if (CurrentPeriod == PeriodType.Week)
            {
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ChangeDateAsync(-7)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <span class="me-2">@StartDate.ToString("d") - @EndDate.ToString("d")</span>
                    <input type="date" class="form-control date-picker mx-2" value="@SelectedDate.ToString("yyyy-MM-dd")" @onchange="@(e => ChangeDateFromInputAsync(e.Value))" />
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => ChangeDateAsync(7)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            }
            else if (CurrentPeriod == PeriodType.Month)
            {
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ChangeDateAsync(-30)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <span class="me-2">@StartDate.ToString("d") - @EndDate.ToString("d")</span>
                    <input type="date" class="form-control date-picker mx-2" value="@SelectedDate.ToString("yyyy-MM-dd")" @onchange="@(e => ChangeDateFromInputAsync(e.Value))" />
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => ChangeDateAsync(30)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            }
            else if (CurrentPeriod == PeriodType.Year)
            {
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ChangeDateAsync(-365)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <span class="me-2 fw-bold">@StartDate.ToString("dd.MM.yyyy") - @EndDate.ToString("dd.MM.yyyy")</span>
                    <input type="date" class="form-control date-picker mx-2" value="@SelectedDate.ToString("yyyy-MM-dd")" @onchange="@(e => ChangeDateFromInputAsync(e.Value))" />
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="() => ChangeDateAsync(365)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            }
        </div>
    </div>
    
    @if (IsLoading)
    {
        <div class="loading-indicator">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">@Localizer.GetString("Common.Loading")</span>
            </div>
        </div>
    }
    else if (WeatherData == null || !WeatherData.Any())
    {
        <div class="alert alert-info">
            @Localizer.GetString("Meteo.Trends.NoData")
        </div>
    }
    else
    {
        <div class="chart-container mb-5">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h2>@Localizer.GetString("Meteo.Trends.Temperature")</h2>
                <div class="temperature-summary">
                    <span class="badge bg-info me-2">Min: @TemperatureMinValue?.ToString("F1") °C</span>
                    <span class="badge bg-secondary me-2">Avg: @TemperatureAvgValue?.ToString("F1") °C</span>
                    <span class="badge bg-danger">Max: @TemperatureMaxValue?.ToString("F1") °C</span>
                </div>
            </div>
            
            <div id="temperatureChart" style="width: 100%; height: 400px;"></div>
        </div>
    }
</div>

@code {
    private enum PeriodType
    {
        Day,
        Week,
        Month,
        Year
    }
    
    private class WeatherDataPoint
    {
        public DateTime Date { get; set; }
        public object DisplayTime { get; set; }
        public float? MinTemperature { get; set; }
        public float? AvgTemperature { get; set; }
        public float? MaxTemperature { get; set; }
    }
    
    private PeriodType CurrentPeriod { get; set; } = PeriodType.Day;
    private DateTime SelectedDate { get; set; } = DateTime.Now.Date;
    private DateTime StartDate { get; set; }
    private DateTime EndDate { get; set; }
    private bool IsLoading { get; set; } = true;
    private List<WeatherDataPoint> WeatherData { get; set; } = new List<WeatherDataPoint>();
    
    private float? TemperatureMinValue { get; set; }
    private float? TemperatureAvgValue { get; set; }
    private float? TemperatureMaxValue { get; set; }
    
    private string FormatTooltipDate(object dateValue)
    {
        if (CurrentPeriod == PeriodType.Day)
        {
            if (dateValue is TimeSpan timeSpan)
            {
                return $"{SelectedDate.ToShortDateString()} {timeSpan.ToString("hh\\:mm")}";
            }
        }
        else if (dateValue is DateTime dateTime)
        {
            return dateTime.ToString("yyyy-MM-dd");
        }
        else if (dateValue is string dateString)
        {
            return dateString;
        }
        
        return dateValue?.ToString() ?? "";
    }
    
    protected override async Task OnInitializedAsync()
    {
        await SetupDateRangeAsync();
        await LoadDataAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                // Načtení skriptu při prvním renderování
                await JSRuntime.InvokeVoidAsync("loadApexChartsScript");
            }
            
            // Vykreslení grafu pouze pokud máme data a načetli jsme již JS knihovnu
            if (!IsLoading && WeatherData != null && WeatherData.Any())
            {
                await RenderChartAsync();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
        }
    }
    
    private async Task ChangePeriodAsync(PeriodType newPeriod)
    {
        try
        {
            CurrentPeriod = newPeriod;
            await SetupDateRangeAsync();
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing period: {ex.Message}");
        }
    }
    
    private async Task ChangeDateAsync(int days)
    {
        try
        {
            SelectedDate = SelectedDate.AddDays(days);
            await SetupDateRangeAsync();
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing date: {ex.Message}");
        }
    }
    
    private async Task ChangeDateFromInputAsync(object value)
    {
        try
        {
            if (value != null && DateTime.TryParse(value.ToString(), out DateTime date))
            {
                SelectedDate = date;
                await SetupDateRangeAsync();
                await LoadDataAsync();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing date from calendar: {ex.Message}");
        }
    }
    
    private async Task SetupDateRangeAsync()
    {
        switch (CurrentPeriod)
        {
            case PeriodType.Day:
                StartDate = SelectedDate.Date;
                EndDate = StartDate.AddDays(1).AddSeconds(-1);
                break;
            case PeriodType.Week:
                StartDate = SelectedDate.Date.AddDays(-6);
                EndDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                break;
            case PeriodType.Month:
                StartDate = SelectedDate.Date.AddDays(-29);
                EndDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                break;
            case PeriodType.Year:
                // Pro roční pohled nastavíme StartDate jeden rok zpět od EndDate
                EndDate = SelectedDate.Date.AddDays(1).AddSeconds(-1);
                StartDate = EndDate.AddYears(-1).AddDays(1);
                break;
        }
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();
            
            var rawData = await WeatherHistoryService.GetHistoryAsync(StartDate.ToUniversalTime(), EndDate.ToUniversalTime());
            
            if (rawData == null || !rawData.Any())
            {
                WeatherData = new List<WeatherDataPoint>();
                IsLoading = false;
                StateHasChanged();
                return;
            }
            
            WeatherData = AggregateData(rawData);
            
            CalculateTemperatureSummary();
            
            IsLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    private List<WeatherDataPoint> AggregateData(List<WeatherHistory> rawData)
    {
        List<WeatherDataPoint> result = new List<WeatherDataPoint>();
        
        // Convert all UTC times to local time
        var localData = rawData.Select(d => new {
            Data = d,
            LocalTime = DateTime.SpecifyKind(d.Date, DateTimeKind.Utc).ToLocalTime()
        }).ToList();
        
        switch (CurrentPeriod)
        {
            case PeriodType.Day:
                // For day view, group by hour
                var dayGroups = localData
                    .GroupBy(d => new DateTime(
                        d.LocalTime.Year, d.LocalTime.Month, d.LocalTime.Day, 
                        d.LocalTime.Hour, 0, 0))
                    .OrderBy(g => g.Key);
                
                foreach (var group in dayGroups)
                {
                    result.Add(new WeatherDataPoint
                    {
                        Date = group.Key,
                        DisplayTime = group.Key.TimeOfDay,
                        MinTemperature = group.Min(d => d.Data.TemperatureOut),
                        AvgTemperature = group.Average(d => d.Data.TemperatureOut),
                        MaxTemperature = group.Max(d => d.Data.TemperatureOut)
                    });
                }
                break;
                
            case PeriodType.Week:
                // For week view, group by day
                var weekGroups = localData
                    .GroupBy(d => d.LocalTime.Date)
                    .OrderBy(g => g.Key);
                
                foreach (var group in weekGroups)
                {
                    result.Add(new WeatherDataPoint
                    {
                        Date = group.Key,
                        DisplayTime = group.Key,
                        MinTemperature = group.Min(d => d.Data.TemperatureOut),
                        AvgTemperature = group.Average(d => d.Data.TemperatureOut),
                        MaxTemperature = group.Max(d => d.Data.TemperatureOut)
                    });
                }
                break;
                
            case PeriodType.Month:
                // For month view, group by day
                var monthGroups = localData
                    .GroupBy(d => d.LocalTime.Date)
                    .OrderBy(g => g.Key);
                
                foreach (var group in monthGroups)
                {
                    result.Add(new WeatherDataPoint
                    {
                        Date = group.Key,
                        DisplayTime = group.Key,
                        MinTemperature = group.Min(d => d.Data.TemperatureOut),
                        AvgTemperature = group.Average(d => d.Data.TemperatureOut),
                        MaxTemperature = group.Max(d => d.Data.TemperatureOut)
                    });
                }
                break;
                
            case PeriodType.Year:
                // For year view, group by week but zajistíme správné pořadí
                // Použijeme DateTime jako klíč místo čísla týdne pro lepší seřazení
                var yearGroups = localData
                    .GroupBy(d => CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(
                        d.LocalTime, CalendarWeekRule.FirstDay, DayOfWeek.Monday))
                    .OrderBy(g => g.Key);
                
                // Přepracujeme tuto logiku, abychom měli jistotu, že data jsou správně seřazena
                var orderedYearGroups = localData
                    .GroupBy(d => new { 
                        Week = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(
                            d.LocalTime, CalendarWeekRule.FirstDay, DayOfWeek.Monday),
                        // Přidáme rok, aby se správně seřadily týdny přes přelom roku
                        Year = d.LocalTime.Year 
                    })
                    .OrderBy(g => g.Key.Year)
                    .ThenBy(g => g.Key.Week);
                
                foreach (var group in orderedYearGroups)
                {
                    var firstDayOfGroup = group.OrderBy(d => d.LocalTime).First().LocalTime.Date;
                    
                    result.Add(new WeatherDataPoint
                    {
                        Date = firstDayOfGroup,
                        DisplayTime = firstDayOfGroup,
                        MinTemperature = group.Min(d => d.Data.TemperatureOut),
                        AvgTemperature = group.Average(d => d.Data.TemperatureOut),
                        MaxTemperature = group.Max(d => d.Data.TemperatureOut)
                    });
                }
                break;
        }
        
        return result;
    }
    
    private void CalculateTemperatureSummary()
    {
        if (WeatherData == null || !WeatherData.Any())
        {
            TemperatureMinValue = null;
            TemperatureAvgValue = null;
            TemperatureMaxValue = null;
            return;
        }
        
        TemperatureMinValue = WeatherData
            .Where(d => d.MinTemperature.HasValue)
            .Min(d => d.MinTemperature);
        
        // Calculate the average of all AvgTemperature values
        TemperatureAvgValue = WeatherData
            .Where(d => d.AvgTemperature.HasValue)
            .Average(d => d.AvgTemperature);
        
        TemperatureMaxValue = WeatherData
            .Where(d => d.MaxTemperature.HasValue)
            .Max(d => d.MaxTemperature);
    }
    
    private async Task RenderChartAsync()
    {
        try
        {
            if (WeatherData == null || !WeatherData.Any())
                return;
                
            var categories = new List<string>();
            var minTempData = new List<object>();
            var avgTempData = new List<object>();
            var maxTempData = new List<object>();
            
            // Ensure WeatherData is correctly ordered for all views
            var orderedData = WeatherData.OrderBy(d => d.Date).ToList();
            
            // Prepare data for the chart based on period
            foreach (var point in orderedData)
            {
                string category;
                
                if (CurrentPeriod == PeriodType.Day && point.DisplayTime is TimeSpan ts)
                {
                    category = ts.ToString(@"hh\:mm");
                }
                else if (point.DisplayTime is DateTime dt)
                {
                    if (CurrentPeriod == PeriodType.Week || CurrentPeriod == PeriodType.Month)
                    {
                        category = dt.ToString("dd.MM.");
                    }
                    else if (CurrentPeriod == PeriodType.Year)
                    {
                        // Pro roční pohled zobrazíme datum ve formátu dd.MM.yy pro lepší jasnost
                        category = dt.ToString("dd.MM.yy");
                    }
                    else
                    {
                        category = dt.ToString("yyyy-MM-dd");
                    }
                }
                else
                {
                    category = point.DisplayTime?.ToString() ?? "";
                }
                
                categories.Add(category);
                minTempData.Add(point.MinTemperature ?? 0);
                avgTempData.Add(point.AvgTemperature ?? 0);
                maxTempData.Add(point.MaxTemperature ?? 0);
            }
            
            // Kontrola, zda máme nějaká validní data
            if (categories.Count == 0 || minTempData.Count == 0)
            {
                Console.Error.WriteLine("Nedostatek dat pro vykreslení grafu");
                return;
            }
            
            string minTitle = Localizer.GetString("Meteo.Trends.MinTemperature");
            string avgTitle = Localizer.GetString("Meteo.Trends.AvgTemperature");
            string maxTitle = Localizer.GetString("Meteo.Trends.MaxTemperature");
            string xAxisTitle = CurrentPeriod == PeriodType.Day 
                ? Localizer.GetString("Meteo.Trends.Time") 
                : Localizer.GetString("Meteo.Trends.Date");
            string yAxisTitle = Localizer.GetString("Meteo.Trends.Temperature");
            
            // Calculate min/max for Y axis (similar to original function but simplified)
            var allTemps = minTempData.Concat(avgTempData).Concat(maxTempData)
                .Where(t => t != null)
                .Select(t => Convert.ToSingle(t))
                .ToList();
                
            if (allTemps.Count == 0)
            {
                Console.Error.WriteLine("Žádné validní teplotní údaje");
                return;
            }
                
            float minY = allTemps.Min() - 2;
            float maxY = allTemps.Max() + 2;
            
            // Render chart through JS interop
            await JSRuntime.InvokeVoidAsync("renderTemperatureChart", 
                "temperatureChart", 
                categories,
                new[] { minTempData, avgTempData, maxTempData },
                new[] { minTitle, avgTitle, maxTitle },
                xAxisTitle,
                yAxisTitle,
                minY,
                maxY);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error rendering chart: {ex.Message}");
        }
    }
}

<style>
    .meteo-trends-container {
        padding: 20px;
    }
    
    .period-selector {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }
    
    .temperature-summary {
        font-weight: 500;
    }
    
    .loading-indicator {
        display: flex;
        justify-content: center;
        padding: 40px;
    }
    
    .chart-container {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .date-controls {
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .date-picker {
        width: 150px;
    }
    
    @@media (max-width: 768px) {
        .temperature-summary {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }
    }
</style> 