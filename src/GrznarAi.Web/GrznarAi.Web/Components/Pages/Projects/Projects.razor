@page "/projects"
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@inject IProjectService ProjectService
@inject IGitHubService GitHubService
@inject ILogger<Projects> Logger
@inject ILocalizationService Localizer

<PageTitle>@Localizer.GetString("Projects.Title")</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">@Localizer.GetString("Projects.Heading")</h1>
    
    <p class="lead mb-5">
        @Localizer.GetString("Projects.Description")
    </p>
    
    @if (displayProjects == null)
    {
        <p><em>@Localizer.GetString("Projects.Loading")</em></p>
    }
    else if (!displayProjects.Any())
    {
        <p><em>@Localizer.GetString("Projects.NoProjects")</em></p>
    }
    else
    {
        <div class="row">
            @foreach (var project in displayProjects)
            {
                <div class="col-md-6 col-lg-4 mb-4 d-flex align-items-stretch">
                    <div class="card project-card h-100 w-100">
                        <div class="card-body d-flex flex-column">
                            <h3 class="card-title">@project.DbName</h3>
                            <div class="mb-2">
                                @if (project.Languages.Any())
                                {
                                    @foreach(var lang in project.Languages)
                                    {
                                        <span class="badge @GetLanguageColorClass(lang) me-1">@lang</span>
                                    }
                                }
                                else
                                {
                                     <span class="badge bg-secondary me-1">N/A</span>
                                }
                            </div>
                            <p class="card-text flex-grow-1">@project.GitHubDescription</p>
                            <div class="mt-auto d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="badge bg-primary me-1" title="@Localizer.GetString("Projects.Stars")"><i class="bi bi-star-fill"></i> @project.Stars</span>
                                    <span class="badge bg-secondary" title="@Localizer.GetString("Projects.Forks")"><i class="bi bi-diagram-2"></i> @project.Forks</span>
                                </div>
                                <div>
                                    <a href="@project.GitHubUrl" target="_blank" class="btn btn-sm btn-outline-primary" disabled="string.IsNullOrEmpty(project.GitHubUrl)">
                                        <i class="bi bi-github me-1"></i> GitHub
                                    </a>
                                    <a href="/project/@project.Id" class="btn btn-sm btn-info ms-1">@Localizer.GetString("Projects.DetailButton")</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private class ProjectDisplayInfo
    {
        public int Id { get; set; }
        public string DbName { get; set; } = string.Empty;
        public string? GitHubUrl { get; set; }
        public string? GitHubDescription { get; set; }
        public List<string> Languages { get; set; } = new List<string>();
        public int Stars { get; set; }
        public int Forks { get; set; }
    }

    private List<ProjectDisplayInfo>? displayProjects;

    protected override async Task OnInitializedAsync()
    {
        displayProjects = new List<ProjectDisplayInfo>();
        List<Project> dbProjects = new List<Project>();

        try
        {
            dbProjects = await ProjectService.GetProjectsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading projects from database.");
            displayProjects = null;
            return;
        }

        if (dbProjects == null || !dbProjects.Any())
        {
            Logger.LogInformation("No projects found in the database.");
            return;
        }

        foreach (var dbProject in dbProjects)
        {
            GitHubRepositoryInfo? githubInfo = null;
            if (!string.IsNullOrEmpty(dbProject.GitHubUrl))
            {
                var (owner, repoName) = ParseGitHubUrl(dbProject.GitHubUrl);
                if (owner != null && repoName != null)
                {
                    try
                    {
                        githubInfo = await GitHubService.GetRepositoryDetailsAsync(owner, repoName);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error fetching GitHub details for {Url}", dbProject.GitHubUrl);
                    }
                }
                else
                {
                    Logger.LogWarning("Could not parse owner/repo from URL: {Url}", dbProject.GitHubUrl);
                }
            }

            displayProjects.Add(new ProjectDisplayInfo
            {
                Id = dbProject.Id,
                DbName = dbProject.Name,
                GitHubUrl = dbProject.GitHubUrl,
                GitHubDescription = githubInfo?.Description ?? dbProject.Description ?? "(No description available)",
                Languages = githubInfo?.Languages ?? new List<string>(),
                Stars = githubInfo?.Stars ?? 0,
                Forks = githubInfo?.Forks ?? 0
            });
        }
        
        displayProjects = displayProjects.OrderBy(p => p.DbName).ToList();
    }

    private (string? owner, string? repoName) ParseGitHubUrl(string url)
    {
        if (string.IsNullOrWhiteSpace(url) || !Uri.TryCreate(url, UriKind.Absolute, out var uri))
            return (null, null);
        
        if (!uri.Host.Equals("github.com", StringComparison.OrdinalIgnoreCase))
            return (null, null);

        var pathSegments = uri.AbsolutePath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        if (pathSegments.Length >= 2)
        {
            return (pathSegments[0], pathSegments[1]);
        }

        return (null, null);
    }

    // Helper method to get CSS class based on language
    private string GetLanguageColorClass(string? language)
    {
        // Using switch expression for conciseness
        return language?.ToLowerInvariant() switch
        {
            "c#" => "bg-primary",         // Blue
            "javascript" => "bg-warning text-dark", // Yellow
            "html" => "bg-danger",          // Red
            "css" => "bg-info text-dark",    // Teal
            "python" => "bg-success",         // Green
            "typescript" => "bg-primary",     // Blue (same as C#)
            "java" => "bg-secondary",       // Grey
            "php" => "bg-secondary",        // Grey
            "powershell" => "bg-dark",      // Dark
            "shell" => "bg-dark",          // Dark
            "dockerfile" => "bg-info text-dark", // Teal
            "c++" => "bg-primary",         // Blue
            "c" => "bg-secondary",        // Grey
            "razor" => "bg-danger",         // Red (similar to HTML)
            // Add more languages and colors as needed
            _ => "bg-light text-dark",      // Default: Light Grey
        };
    }
}
