@implements IDisposable

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject GrznarAi.Web.Services.ILocalizationService Localizer

<!-- Left Aligned Nav Items -->
<ul class="navbar-nav me-auto mb-lg-0">
    <li class="nav-item">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            <span class="nav-icon-wrapper"><i class="bi bi-house-door-fill"></i></span> @Localizer.GetString("NavMenu.Home")
        </NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="blog">
            <span class="nav-icon-wrapper"><i class="bi bi-journal-richtext"></i></span> @Localizer.GetString("NavMenu.Blog")
        </NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="projects">
            <span class="nav-icon-wrapper"><i class="bi bi-code-square"></i></span> @Localizer.GetString("NavMenu.Projects")
        </NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="meteo">
            <span class="nav-icon-wrapper"><i class="bi bi-cloud-sun"></i></span> @Localizer.GetString("NavMenu.MeteoStation")
        </NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="ai-news">
            <span class="nav-icon-wrapper"><i class="bi bi-robot"></i></span> @Localizer.GetString("NavMenu.AiNews")
        </NavLink>
    </li>

    <li class="nav-item">
        <NavLink class="nav-link" href="contact">
            <span class="nav-icon-wrapper"><i class="bi bi-envelope"></i></span> @Localizer.GetString("NavMenu.Contact")
        </NavLink>
    </li>

    <!-- Applications Section -->
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="applicationsDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="nav-icon-wrapper"><i class="bi bi-app"></i></span> @Localizer.GetString("NavMenu.Applications")
        </a>
        <ul class="dropdown-menu" aria-labelledby="applicationsDropdown">
            <!-- Broadcast Announcements - available to everyone -->
            <li>
                <NavLink class="dropdown-item" href="broadcast-announcements">
                    <span class="nav-icon-wrapper"><i class="bi bi-broadcast-pin"></i></span> @Localizer.GetString("NavMenu.Applications.BroadcastAnnouncements")
                </NavLink>
            </li>
            
            <!-- Only show Notes app when user has permission -->
            <AuthorizeView>
                <Authorized>
                    @if (HasPermission("App.Notes"))
                    {
                        <li>
                            <NavLink class="dropdown-item" href="notes">
                                <span class="nav-icon-wrapper"><i class="bi bi-journal-text"></i></span> @Localizer.GetString("NavMenu.Applications.Notes")
                            </NavLink>
                        </li>
                    }
                </Authorized>
            </AuthorizeView>
        </ul>
    </li>
    <!-- End Applications Section -->

    <!-- Administration Section -->
    <AuthorizeView Roles="Admin">
        <Authorized>
            <li class="nav-item">
                <NavLink class="nav-link" href="admin/administration">
                    <span class="nav-icon-wrapper"><i class="bi bi-gear-wide-connected"></i></span> @Localizer.GetString("NavMenu.Admin.Title")
                </NavLink>
            </li>
        </Authorized>
    </AuthorizeView>
    <!-- End Administration Section -->
</ul>

<!-- Language Selector and Auth Section -->
<div class="navbar-nav ms-auto d-flex flex-row align-items-center">
    <div class="nav-item dropdown me-2">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false" style="max-width: 110px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"> 
             @currentCulture.NativeName
        </button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="languageDropdown">
            <li><a class="dropdown-item @(IsCurrentCulture("cs") ? "active" : "")" href="@GetSetCultureUrl("cs")">Čeština</a></li>
            <li><a class="dropdown-item @(IsCurrentCulture("en") ? "active" : "")" href="@GetSetCultureUrl("en")">English</a></li>
        </ul>
    </div>

    <!-- Auth Links/User Menu -->
    <AuthorizeView>
        <Authorized>
            <div class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick="ToggleDropdown" @onclick:preventDefault>
                    <span class="nav-icon-wrapper"><i class="bi bi-person-fill"></i></span> @context.User.Identity?.Name
                </a>
                <ul class="dropdown-menu dropdown-menu-end @(isDropdownOpen ? "show" : "")">
                    <li>
                        <NavLink class="dropdown-item" href="Account/Manage">
                            <span class="nav-icon-wrapper"><i class="bi bi-gear"></i></span> @Localizer.GetString("NavMenu.User.ManageAccount")
                        </NavLink>
                    </li>
                    <li>
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="dropdown-item">
                                <span class="nav-icon-wrapper"><i class="bi bi-box-arrow-left"></i></span> @Localizer.GetString("NavMenu.User.Logout")
                            </button>
                        </form>
                    </li>
                </ul>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item me-2">
                <NavLink class="nav-link" href="Account/Register">
                    <span class="nav-icon-wrapper"><i class="bi bi-person-plus"></i></span> @Localizer.GetString("NavMenu.Auth.Register")
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="Account/Login">
                    <span class="nav-icon-wrapper"><i class="bi bi-box-arrow-in-right"></i></span> @Localizer.GetString("NavMenu.Auth.Login")
                </NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private string? currentUrl;
    private bool isDropdownOpen = false;
    private System.Globalization.CultureInfo currentCulture => System.Globalization.CultureInfo.CurrentUICulture;

    [Inject]
    private GrznarAi.Web.Services.IPermissionService PermissionService { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private async Task<bool> HasPermissionAsync(string permissionKey)
    {
        try
        {
            if (AuthStateTask == null)
                return false;

            var authState = await AuthStateTask;
            var user = authState.User;
            if (!user.Identity.IsAuthenticated)
                return false;

            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
                return false;

            // Pokud je administrátor, má všechna oprávnění
            if (user.IsInRole("Admin"))
                return true;

            return await PermissionService.UserHasPermissionAsync(userId, permissionKey);
        }
        catch
        {
            return false;
        }
    }

    private bool HasPermission(string permissionKey)
    {
        try
        {
            // Pokud je k dispozici Task<AuthenticationState>
            if (AuthStateTask == null)
                return false;

            var user = AuthStateTask.Result?.User;
            if (user == null || !user.Identity?.IsAuthenticated == true)
                return false;

            // Administrátoři mají všechna oprávnění
            if (user.IsInRole("Admin"))
                return true;
            
            // Pro ostatní uživatele zkontrolujeme oprávnění synchronně
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
                return false;

            // Použijeme Task.Run místo GetAwaiter().GetResult() pro bezpečnější volání
            return Task.Run(() => PermissionService.UserHasPermissionAsync(userId, permissionKey)).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při ověřování oprávnění: {ex.Message}");
            return false; // V případě chyby raději nepovolíme
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        isDropdownOpen = false; // Close user dropdown on navigation
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private bool IsCurrentCulture(string cultureCode)
    {
        return currentCulture.Name.StartsWith(cultureCode, StringComparison.OrdinalIgnoreCase);
    }

    private string GetSetCultureUrl(string cultureCode)
    {
        var safeReturnUrl = string.IsNullOrEmpty(currentUrl) ? "/" : currentUrl;
        return $"/Culture/SetCulture?culture={Uri.EscapeDataString(cultureCode)}&redirectUri={Uri.EscapeDataString(safeReturnUrl)}";
    }
}

