@page "/admin/projects"
@attribute [Authorize] // Re-enabled
@using Microsoft.AspNetCore.Authorization
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IJSRuntime JSRuntime
@inject ILogger<ProjectAdmin> Logger

<PageTitle>Project Administration</PageTitle>

<h1>Project Administration</h1>

<div class="mb-3">
    <!-- Using <a> tag for navigation -->
    <a href="/admin/projects/new" class="btn btn-primary">Add New Project</a>
    <!-- Removed Test Navigate Home button -->
</div>

@if (projects == null)
{
    <p><em>Loading projects...</em></p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>GitHub URL</th>
                <th>Created At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.Name</td>
                    <td><a href="@project.GitHubUrl" target="_blank">@project.GitHubUrl</a></td>
                    <td>@project.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>
                        <!-- Using <a> tag for navigation -->
                        <a href="/admin/projects/edit/@project.Id" class="btn btn-sm btn-secondary me-1">Edit</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProject(project.Id)">Delete</button> <!-- Delete stays with method for confirm dialog -->
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Project>? projects;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        projects = await ProjectService.GetProjectsAsync();
        StateHasChanged(); // Ensure UI updates after loading
    }

    // Removed AddNewProject, NavigateHome, EditProject methods as they are no longer used

    // DeleteProject method remains as it needs async and JSRuntime
    private async Task DeleteProject(int projectId)
    {
        Logger.LogInformation("DeleteProject button clicked for ID {ProjectId}.", projectId);
        // Confirmation dialog
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this project?"))
        {
            Logger.LogInformation("Deletion confirmed for project ID {ProjectId}.", projectId);
            try
            {
                await ProjectService.DeleteProjectAsync(projectId);
                Logger.LogInformation("Project deleted successfully, reloading list.");
                await LoadProjects(); // Reload the list after deletion
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting project ID {ProjectId}", projectId);
            }
        }
        else
        {
             Logger.LogInformation("Deletion cancelled for project ID {ProjectId}.", projectId);
        }
    }
} 