@page "/admin/localization/new"
@page "/admin/localization/edit/{Id:int}"
@attribute [Authorize]
@rendermode InteractiveServer
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject ILocalizationService LocalizationService
@inject ILogger<LocalizationEdit> Logger

<PageTitle>@(IsEditMode ? "Edit" : "Add New") Localization String</PageTitle>

<h1>@(IsEditMode ? "Edit" : "Add New") Localization String</h1>

<EditForm Model="@Model" OnValidSubmit="HandleValidSubmit" FormName="LocalizationEditForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="key" class="form-label">Key:</label>
        <InputText id="key" class="form-control" @bind-Value="Model.Key" />
        <ValidationMessage For="() => Model.Key" />
    </div>

    <div class="mb-3">
        <label for="valuecs" class="form-label">Value (CS):</label>
        <InputTextArea id="valuecs" class="form-control" @bind-Value="Model.ValueCs" rows="3"/>
        <ValidationMessage For="() => Model.ValueCs" />
    </div>

    <div class="mb-3">
        <label for="valueen" class="form-label">Value (EN):</label>
        <InputTextArea id="valueen" class="form-control" @bind-Value="Model.ValueEn" rows="3"/>
        <ValidationMessage For="() => Model.ValueEn" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description (Optional):</label>
        <InputTextArea id="description" class="form-control" @bind-Value="Model.Description" rows="2"/>
    </div>

    <div class="d-flex justify-content-between">
        <button type="submit" class="btn btn-success">@(IsEditMode ? "Save Changes" : "Add String")</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </div>

</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private LocalizationString Model { get; set; } = new();

    private bool IsEditMode => Id.HasValue;

    protected override async Task OnParametersSetAsync()
    {
        if (IsEditMode)
        {
            var existingString = await LocalizationService.GetStringByIdAsync(Id.Value);
            if (existingString != null)
            {
                Model = existingString;
            }
            else
            {
                Logger.LogWarning("Localization string with ID {Id} not found for editing.", Id.Value);
                NavigationManager.NavigateTo("/admin/localization"); // Redirect if not found
            }
        }
        else
        {
            Model = new LocalizationString(); // Initialize for new entry
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (IsEditMode)
            {
                await LocalizationService.UpdateStringAsync(Model);
                Logger.LogInformation("Updated localization string with ID {Id}", Model.Id);
            }
            else
            {
                await LocalizationService.AddStringAsync(Model);
                Logger.LogInformation("Added new localization string with Key '{Key}'", Model.Key);
            }
            NavigationManager.NavigateTo("/admin/localization");
        }
        catch (DbUpdateException dbEx) when (dbEx.InnerException is Microsoft.Data.SqlClient.SqlException sqlEx && sqlEx.Number == 2601) // Unique constraint violation
        {
             Logger.LogError(dbEx, "Error saving localization string - Key '{Key}' already exists.", Model.Key);
             // TODO: Show a user-friendly error message on the form
             // Maybe add a custom validation error to the Key field
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving localization string (ID: {Id}, Key: {Key})", Model.Id, Model.Key);
            // TODO: Show a generic error message to the user
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/localization");
    }
} 