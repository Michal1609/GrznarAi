@page "/admin/localization"
@attribute [Authorize]
@rendermode InteractiveServer
@using GrznarAi.Web.Data
@using GrznarAi.Web.Services
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject ILocalizationService LocalizationService
@inject IJSRuntime JSRuntime
@inject ILogger<LocalizationAdmin> Logger

<PageTitle>Localization Management</PageTitle>

<h1>Localization Management</h1>

<div class="mb-3">
    <a href="/admin/localization/new" class="btn btn-primary">Add New String Entry</a>
</div>

@if (localizationStrings == null)
{
    <p><em>Loading strings...</em></p>
}
else if (!localizationStrings.Any())
{
     <p><em>No localization strings found.</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Key</th>
                    <th>Language</th>
                    <th>Value</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in localizationStrings)
                {
                    <tr>
                        <td><code>@item.Key</code></td>
                        <td>@item.LanguageCode</td>
                        <td>@item.Value</td>
                        <td>@item.Description</td>
                        <td>
                            <a href="/admin/localization/edit/@item.Id" class="btn btn-sm btn-secondary me-1">Edit</a>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteString(item.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<LocalizationString>? localizationStrings;

    protected override async Task OnInitializedAsync()
    {
        await LoadStrings();
    }

    private async Task LoadStrings()
    {
        try
        {
            localizationStrings = await LocalizationService.GetAllStringsAdminAsync();
            StateHasChanged(); // Ensure UI updates after loading
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading localization strings for admin.");
            localizationStrings = new List<LocalizationString>(); // Initialize to empty list on error
        }
    }

    private async Task DeleteString(int id)
    {
        // Confirmation dialog
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this specific language entry (ID: {id})?"))
        {
            return; 
        }

        try
        {
            await LocalizationService.DeleteStringAsync(id);
            Logger.LogInformation("Deleted localization string entry with ID {Id}", id);
            await LoadStrings(); // Reload list after deletion
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting localization string entry with ID {Id}", id);
            // Optionally show an error message to the user via JS interop or a Blazor component
            await JSRuntime.InvokeVoidAsync("alert", "Error deleting localization string entry.");
        }
    }
} 