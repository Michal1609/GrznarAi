@page "/blog"

<PageTitle>Blog - GrznarAI</PageTitle>

<div class="container mt-4">
    <div class="row">
        <!-- Main content -->
        <div class="col-lg-8">
            <h1 class="mb-4">Blog</h1>
            
            <!-- Search bar -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search blog posts..." @bind="searchTerm" @bind:event="oninput">
                        <button class="btn btn-primary" type="button" @onclick="Search">
                            <i class="bi bi-search"></i> Search
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Blog posts -->
            @foreach (var post in filteredPosts)
            {
                <div class="card mb-4 blog-post">
                    <div class="card-body">
                        <h2 class="card-title blog-post-title">@post.Title</h2>
                        <p class="blog-post-meta">
                            @post.PublishedDate.ToString("MMMM d, yyyy") by <a href="#">@post.Author</a>
                            @foreach (var tag in post.Tags)
                            {
                                <span class="badge bg-secondary ms-2">@tag</span>
                            }
                        </p>
                        <p class="card-text">@post.Excerpt</p>
                        <a href="/blog/@post.Slug" class="btn btn-primary">Read More</a>
                    </div>
                </div>
            }
            
            <!-- Pagination -->
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="#" @onclick="PreviousPage" @onclick:preventDefault>Previous</a>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                            <a class="page-link" href="#" @onclick="() => GoToPage(pageNumber)" @onclick:preventDefault>@pageNumber</a>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <a class="page-link" href="#" @onclick="NextPage" @onclick:preventDefault>Next</a>
                    </li>
                </ul>
            </nav>
        </div>
        
        <!-- Sidebar -->
        <div class="col-lg-4">
            <div class="blog-sidebar">
                <!-- Categories -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h4 class="mb-0">Categories</h4>
                    </div>
                    <div class="card-body">
                        <ul class="list-unstyled mb-0">
                            @foreach (var category in categories)
                            {
                                <li class="mb-2">
                                    <a href="#" @onclick="() => FilterByCategory(category)" @onclick:preventDefault class="d-flex justify-content-between align-items-center">
                                        @category
                                        <span class="badge bg-primary rounded-pill">@blogPosts.Count(p => p.Tags.Contains(category))</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                
                <!-- Calendar -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h4 class="mb-0">Archive</h4>
                    </div>
                    <div class="card-body">
                        <ul class="list-unstyled mb-0">
                            @foreach (var month in archiveMonths)
                            {
                                <li class="mb-2">
                                    <a href="#" @onclick="() => FilterByMonth(month)" @onclick:preventDefault>
                                        @month.ToString("MMMM yyyy")
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                
                <!-- Popular Tags -->
                <div class="card">
                    <div class="card-header">
                        <h4 class="mb-0">Popular Tags</h4>
                    </div>
                    <div class="card-body">
                        @foreach (var tag in popularTags)
                        {
                            <a href="#" @onclick="() => FilterByCategory(tag)" @onclick:preventDefault class="badge bg-secondary text-decoration-none me-1 mb-1">@tag</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchTerm = "";
    private int currentPage = 1;
    private int postsPerPage = 5;
    private int totalPages => (int)Math.Ceiling((double)filteredPosts.Count / postsPerPage);
    
    private List<BlogPost> blogPosts = new List<BlogPost>();
    private List<BlogPost> filteredPosts => blogPosts
        .Where(p => string.IsNullOrEmpty(searchTerm) || 
                   p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
                   p.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .Skip((currentPage - 1) * postsPerPage)
        .Take(postsPerPage)
        .ToList();
    
    private List<string> categories = new List<string> { "Technology", "Programming", "AI", "Machine Learning", "Web Development", "Data Science" };
    private List<string> popularTags = new List<string> { "C#", ".NET", "Blazor", "AI", "Machine Learning", "SQL", "Entity Framework", "Web Development" };
    private List<DateTime> archiveMonths = new List<DateTime>();
    
    protected override void OnInitialized()
    {
        // Generate sample blog posts
        GenerateSampleBlogPosts();
        
        // Generate archive months
        var startDate = DateTime.Now.AddMonths(-12);
        for (int i = 0; i <= 12; i++)
        {
            archiveMonths.Add(startDate.AddMonths(i));
        }
    }
    
    private void GenerateSampleBlogPosts()
    {
        blogPosts = new List<BlogPost>
        {
            new BlogPost
            {
                Id = 1,
                Title = "Getting Started with Blazor WebAssembly",
                Slug = "getting-started-with-blazor-webassembly",
                Author = "Michal",
                PublishedDate = DateTime.Now.AddDays(-2),
                Content = "Blazor WebAssembly is a single-page app framework for building interactive client-side web apps with .NET. Blazor WebAssembly uses open web standards without plugins or code transpilation and works in all modern web browsers, including mobile browsers.",
                Excerpt = "Learn how to build interactive web applications with Blazor WebAssembly, a powerful framework for .NET developers.",
                Tags = new List<string> { "Programming", "Web Development", "Blazor", ".NET" },
                IsPublished = true,
                AllowComments = true
            },
            new BlogPost
            {
                Id = 2,
                Title = "Introduction to Entity Framework Core",
                Slug = "introduction-to-entity-framework-core",
                Author = "Michal",
                PublishedDate = DateTime.Now.AddDays(-5),
                Content = "Entity Framework Core is a modern object-database mapper for .NET. It supports LINQ queries, change tracking, updates, and schema migrations. EF Core works with SQL Server, Azure SQL Database, SQLite, Azure Cosmos DB, MySQL, PostgreSQL, and other databases through a provider plugin API.",
                Excerpt = "Discover how to use Entity Framework Core to simplify database access in your .NET applications.",
                Tags = new List<string> { "Programming", "Database", "Entity Framework", ".NET" },
                IsPublished = true,
                AllowComments = true
            },
            new BlogPost
            {
                Id = 3,
                Title = "Building a Weather Station with Arduino",
                Slug = "building-a-weather-station-with-arduino",
                Author = "Michal",
                PublishedDate = DateTime.Now.AddDays(-10),
                Content = "In this tutorial, we'll build a weather station using Arduino that can measure temperature, humidity, pressure, and wind speed. We'll connect various sensors to the Arduino board and write code to read and process the data.",
                Excerpt = "Learn how to build your own weather station using Arduino and various sensors to collect meteorological data.",
                Tags = new List<string> { "Technology", "Arduino", "IoT", "Weather" },
                IsPublished = true,
                AllowComments = true
            },
            new BlogPost
            {
                Id = 4,
                Title = "Introduction to Machine Learning with ML.NET",
                Slug = "introduction-to-machine-learning-with-ml-net",
                Author = "Michal",
                PublishedDate = DateTime.Now.AddDays(-15),
                Content = "ML.NET is an open-source, cross-platform machine learning framework for .NET developers. With ML.NET, you can create custom machine learning models using C# or F# without having to leave the .NET ecosystem.",
                Excerpt = "Explore machine learning concepts and implementation using ML.NET, Microsoft's machine learning framework for .NET developers.",
                Tags = new List<string> { "AI", "Machine Learning", "ML.NET", ".NET" },
                IsPublished = true,
                AllowComments = true
            },
            new BlogPost
            {
                Id = 5,
                Title = "Implementing Authentication in ASP.NET Core",
                Slug = "implementing-authentication-in-asp-net-core",
                Author = "Michal",
                PublishedDate = DateTime.Now.AddDays(-20),
                Content = "Authentication is a crucial aspect of web applications. In this article, we'll explore how to implement authentication in ASP.NET Core using Identity, JWT tokens, and external providers like Google and Facebook.",
                Excerpt = "Learn how to secure your ASP.NET Core applications with various authentication methods and best practices.",
                Tags = new List<string> { "Programming", "Web Development", "Security", "ASP.NET Core" },
                IsPublished = true,
                AllowComments = true
            },
            new BlogPost
            {
                Id = 6,
                Title = "Working with SQL Server in .NET Applications",
                Slug = "working-with-sql-server-in-net-applications",
                Author = "Michal",
                PublishedDate = DateTime.Now.AddDays(-25),
                Content = "SQL Server is a powerful relational database management system that works well with .NET applications. In this article, we'll explore different ways to interact with SQL Server from .NET, including ADO.NET, Entity Framework Core, and Dapper.",
                Excerpt = "Discover various approaches to working with SQL Server databases in your .NET applications for optimal performance and maintainability.",
                Tags = new List<string> { "Programming", "Database", "SQL Server", ".NET" },
                IsPublished = true,
                AllowComments = true
            },
            new BlogPost
            {
                Id = 7,
                Title = "Creating a Neural Network from Scratch in C#",
                Slug = "creating-a-neural-network-from-scratch-in-csharp",
                Author = "Michal",
                PublishedDate = DateTime.Now.AddDays(-30),
                Content = "Neural networks are the foundation of deep learning. In this article, we'll implement a simple neural network from scratch in C# to understand the underlying concepts and mathematics.",
                Excerpt = "Build a simple neural network from scratch in C# to understand the fundamental concepts of deep learning and artificial intelligence.",
                Tags = new List<string> { "AI", "Machine Learning", "Neural Networks", "C#" },
                IsPublished = true,
                AllowComments = true
            },
            new BlogPost
            {
                Id = 8,
                Title = "Deploying .NET Applications to Azure",
                Slug = "deploying-net-applications-to-azure",
                Author = "Michal",
                PublishedDate = DateTime.Now.AddDays(-35),
                Content = "Azure provides a robust platform for hosting .NET applications. In this article, we'll explore different options for deploying .NET applications to Azure, including App Service, Azure Functions, and Azure Kubernetes Service.",
                Excerpt = "Learn how to deploy your .NET applications to Microsoft Azure using various services and best practices for scalability and reliability.",
                Tags = new List<string> { "Programming", "Cloud", "Azure", ".NET" },
                IsPublished = true,
                AllowComments = true
            }
        };
    }
    
    private void Search()
    {
        currentPage = 1;
        // The filtering is handled by the filteredPosts property
    }
    
    private void FilterByCategory(string category)
    {
        searchTerm = category;
        currentPage = 1;
    }
    
    private void FilterByMonth(DateTime month)
    {
        // In a real application, you would filter by month
        // For this sample, we'll just reset the search
        searchTerm = month.ToString("MMMM yyyy");
        currentPage = 1;
    }
    
    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
    
    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }
    
    private void GoToPage(int page)
    {
        currentPage = page;
    }
    
    public class BlogPost
    {
        public int Id { get; set; }
        public string Slug { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
        public DateTime PublishedDate { get; set; }
        public bool IsPublished { get; set; }
        public bool AllowComments { get; set; }
        public string Content { get; set; }
        public string Excerpt { get; set; }
        public List<string> Tags { get; set; }
    }
}
